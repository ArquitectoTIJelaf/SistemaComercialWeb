@using SisComWeb.Aplication.Helpers;

@{
    ViewBag.Title = "Ventas";

    var ImagePath = HttpContext.Current.Request.ApplicationPath == "/" ? "" : HttpContext.Current.Request.ApplicationPath;
    var urlImprimirBoleto = System.Configuration.ConfigurationManager.AppSettings["urlImprimirBoleto"];
    var addTimeTurno = System.Configuration.ConfigurationManager.AppSettings["addTimeTurno"];
    var JLMrootCode = System.Configuration.ConfigurationManager.AppSettings["JLMrootCode"];

    var claveAcompañanteConMayorEdad = Constant.CLAVE_ACOMPAÑANTE_CON_MAYOR_EDAD;
    var claveDescuentoDePasajes = Constant.CLAVE_CLAVE_DE_DESCUENTO_DE_PASAJES;
    var claveCambioPrecioBoletoViaje = Constant.CLAVE_CAMBIO_DE_PRECIO_DE_BOLETO_DE_VIAJE;
    var claveProgramacion = Constant.CLAVE_PROGRAMACION;
    var claveAnularFechaPasada = Constant.CLAVE_ANULAR_BOLETOS_DE_FECHAS_PASADAS;
    var claveMoverVentaFueraDeHora = Constant.CLAVE_CLAVE_PARA_MOVER_VENTA_FUERA_DE_HORA;
    var claveAnulacionTarjetaCredito = Constant.CLAVE_ANULACION_DE_TARJETA_DE_CREDITO;
    var clavePostergacionesBoleto = Constant.CLAVE_POSTERGACIONES_DE_BOLETO;
    var claveFechaAbiertaABolPasados = Constant.CLAVE_FECHA_ABIERTA_A_BOL_PASADOS;
    var claveConfirmacionDeBoletosRemotosSinManifiesto = Constant.CLAVE_CONFIRMACION_DE_BOLETOS_REMOTOS_SIN_MANIFIESTO;
    var claveCambioDeNivelDeAsiento = Constant.CLAVE_CAMBIO_DE_NIVEL_DE_ASIENTO;
    var claveHoraConfirmacion = Constant.CLAVE_HORA_CONFIRMACION;
    var claveReintegro = Constant.CLAVE_REINTEGRO;
    var claveReintegroConfirmacion = Constant.CLAVE_REINTEGRO_CONFIRMACION;
    var claveAnulacionPanel234 = Constant.CLAVE_ANULACION_PANEL234;
    var claveAnulacionPanel36 = Constant.CLAVE_ANULACION_PANEL36;
    var claveTiempoReserva = Constant.CLAVE_TIEMPO_RESERVA;
    var claveReimpresionPanel226 = Constant.CLAVE_REIMPRESION_PANEL226;
    var claveCambioNivelServicio = Constant.CLAVE_CAMBIO_DE_NIVEL_DE_SERVICIO_;
    var clavePostergacionFlag9 = Constant.CLAVE_POSTERGACION_FLAG_9;

    var claveCambioTipoPago = Constant.CLAVE_CAMBIO_TIPO_PAGO;
}

@Html.Partial("_Filtros")
@Html.Partial("_Table")
@Html.Partial("_Venta")
@Html.Partial("_TipoPago")
@Html.Partial("_RegistrarInfante")
@Html.Partial("_PaseCortesia")
@Html.Partial("_BoletosVendidos")
@Html.Partial("_Postergacion")
@Html.Partial("_ClaveAutorizacion")
@Html.Partial("_CreditoClientes")
@Html.Partial("_CreditoOpciones")
@Html.Partial("_BuscaClientePasaje")
@Html.Partial("_DescuentoControl")
@Html.Partial("_ModificacionBoleto")
@Html.Partial("_FechaAbierta")
@Html.Partial("_Reintegro")
@Html.Partial("_ManifiestoPasajeros")
@Html.Partial("_MiniMapa")
@Html.Partial("_TipoPago2")
@Html.Partial("_AnularReintegro")
@Html.Partial("_PaseLote")
@Html.Partial("_CTipoPago")
@Html.Partial("_CrearProgramacion")
@Html.Partial("_NotaCredito")

@section styles{
    <style type="text/css">
        .btn-mini-ticket:focus {
            opacity: 0.3;
        }

        .btn-mini-ticket:hover {
            opacity: 0.6;
        }

        .btn:focus {
            opacity: 0.6;
        }

        #right-click-menu {
            background: #FAFAFA;
            border: 1px solid #BDBDBD;
            box-shadow: 0 2px 2px 0 rgba(0,0,0,.14),0 3px 1px -2px rgba(0,0,0,.2),0 1px 5px 0 rgba(0,0,0,.12);
            display: block;
            list-style: none;
            margin: 0;
            padding: 0;
            position: absolute;
            width: 125px;
            z-index: 999999;
            cursor: pointer;
        }

            #right-click-menu li {
                border-bottom: 1px solid #E0E0E0;
                margin: 0;
                padding: 5px 15px;
            }

                #right-click-menu li:last-child {
                    border-bottom: none;
                }

                #right-click-menu li:hover {
                    background: #03A9F4;
                    color: #FAFAFA;
                }

        .swal2-content [type="radio"]:checked,
        .swal2-content [type="radio"]:not(:checked) {
            position: inherit !important;
        }

        .lblDescTipo::after {
            background: var(--emp-color) !important;
            width: 10px !important;
            height: 10px !important;
            top: 3px !important;
            left: 3px !important;
        }

        .lblDescTipo::before {
            border: 1px solid var(--emp-color) !important;
        }

        .lblDescTipo {
            color: #313131 !important;
            font-weight: 500 !important;
            margin-right: 10px;
        }

        .lblBoletoTipoDir::after {
            background: var(--emp-color) !important;
            width: 10px !important;
            height: 10px !important;
            top: 3px !important;
            left: 3px !important;
        }

        .lblBoletoTipoDir::before {
            border: 1px solid var(--emp-color) !important;
        }

        .lblBoletoTipoDir {
            color: #313131 !important;
            font-weight: 500 !important;
            margin-right: 10px;
        }

        input[type=checkbox][disabled] {
            cursor: not-allowed !important;
        }

        .checkbox input[type=checkbox]:disabled + label {
            cursor: not-allowed;
        }

        .form-control[disabled] {
            background-color: inherit;
        }

        .ancho {
            width: 23%;
        }

        #txtPrecio {
            outline: 0 !important;
            border-width: 0 0 2px !important;
            border-color: var(--emp-color) !important;
        }

        .checkbox label::before {
            border: 1px solid var(--emp-color);
        }

        button[disabled] {
            cursor: not-allowed;
        }

        .v-select.disabled .open-indicator {
            background-color: transparent !important;
        }

        #checkRegistrarNino {
            align-items: center;
            border: 1px solid var(--emp-color);
            border-radius: 5px;
            color: black;
            display: inline-flex;
            height: 31px;
            margin: 0px;
            padding-left: 25px;
            padding-right: 5px;
            text-align: center;
        }

        .v-select.disabled .dropdown-toggle input {
            background-color: transparent !important;
        }

        #divOtrosTurnos {
            padding: 0 5px 5px 0;
            background-color: #F7FAFC;
            float: right;
        }

            #divOtrosTurnos label {
                padding-top: 5px;
                width: 100%;
                text-align: center;
            }

            #divOtrosTurnos ul {
                list-style-type: none;
                padding-left: 0;
                display: block;
            }

                #divOtrosTurnos ul li {
                    padding-left: 20%;
                }

                    #divOtrosTurnos ul li a {
                        cursor: pointer;
                        font-weight: 500;
                    }

            #divOtrosTurnos ::-webkit-scrollbar {
                width: inherit;
                height: inherit;
            }

            #divOtrosTurnos ::-webkit-scrollbar-thumb:horizontal {
                background-repeat: no-repeat;
                background-position: center;
                background-color: #2a97f4;
                background-clip: padding-box;
                border: solid transparent;
                border-width: 1px;
                padding: 100px 0 0;
                box-shadow: inset 1px 1px 0 rgb(220, 172, 0), inset 0 -1px 0 rgb(220, 172, 0);
            }

            #divOtrosTurnos ::-webkit-scrollbar-track {
                background: white;
                border-width: 1px;
            }

            #divOtrosTurnos ::-webkit-scrollbar-thumb:vertical {
                background-repeat: no-repeat;
                background-position: center;
                background-color: #2a97f4;
                background-clip: padding-box;
                border: solid transparent;
                border-width: 1px;
                min-height: 26px;
                padding: 100px 0 0;
                box-shadow: inset 1px 1px 0 rgb(220, 172, 0), inset 0 -1px 0 rgb(220, 172, 0);
            }

        #appVueRegistrarInfante .form-horizontal .control-label {
            text-align: left;
        }

        #appVueTipoPago .form-horizontal .control-label {
            text-align: left;
        }

        a[disabled] {
            pointer-events: none;
        }

        .panel-default .panel-heading {
            height: auto;
        }

        .input-group-addon {
            border-radius: 4px;
            border: 1px solid rgb(228, 231, 234);
            color: #2a97f4;
            background-color: white;
        }

        ul.pagination {
            display: inline-block;
            padding: 0;
            margin: 0;
            background-color: white;
            padding: 5px;
            border-radius: 8px;
            cursor: pointer;
        }

            ul.pagination li {
                display: inline;
            }

                ul.pagination li a {
                    color: black;
                    float: left;
                    padding: 8px 16px;
                    text-decoration: none;
                    transition: background-color .3s;
                    border: 1px solid #ddd;
                    margin: 0 4px;
                    border-radius: 50%;
                }

                    ul.pagination li a.active {
                        background-color: #4CAF50;
                        color: white;
                        border: 1px solid #4CAF50;
                    }

                    ul.pagination li a:hover:not(.active) {
                        background-color: #ddd;
                    }

        .pagination > li:first-child > a {
            border-top-left-radius: 50%;
            border-bottom-left-radius: 50%
        }

        .pagination > li:last-child > a {
            border-bottom-right-radius: 50%;
            border-top-right-radius: 50%;
        }

        .table-responsive > ul {
            display: none;
        }

        .btn-inverse:focus {
            background-color: #A1ABB7 !important;
            border: 1px solid #A1ABB7 !important;
        }

        .container-bus {
            display: inline-block;
            width: 100%;
            padding: 15px;
        }

        .img-bus {
            float: left;
        }

        .mini-bus {
            height: 206px !important;
        }

            .mini-bus .bus-td {
                height: 30px;
            }

        .form-bus {
            overflow-y: hidden;
            background-color: #616e7e;
            width: calc(100% - 108px);
            border: 2px solid #4b4a4b;
            border-radius: 0 8px 8px 0;
            margin-bottom: 0;
        }

        .table-bus {            
            cursor: default;
            background-color: white;
            height: 252px;
        }

        .LI {
            border-left: 2px solid #4b4a4b;
            margin-left: 5px;
            margin-right: 3px;
            height: 100%;
            display: block;
        }

        .VA {
            display: block;
            height: 95%;
            min-width: 40px;
        }

        .CU {
            display: block;
            height: 95%;
            min-width: 40px;
        }

        .bus-td {
            padding: 0 !important;
            height: 48px;
            border-color: transparent !important;
            vertical-align: middle !important;
            align-items: center;
            text-align: center;
        }

        .btn-bus {
            padding: 5px;
            height: 95% !important;
            width: 95% !important;
            font-weight: 900;
            background-color: #f7fafc;
            border: 1px solid #5b5b5c !important;
            color: #333;
            background-image: radial-gradient(circle,rgba(255,255,255,.5),rgba(255,255,255,0));
        }

        .number-of-seat {
            display: block;
            font-size: 14px;
        }

        .icons-of-seat {
            display: block;
        }

        .ios-left {
            position: relative;
            left: -10%;
            height: 95%;
            min-width: 8px;
        }

        .ios-right {
            position: relative;
            right: -10%;
        }

        .ios-center {
            position: relative;
            height: 95%;
        }

        .check-with-label:checked + .label-for-check {
        }

        .active-chck {
            color: #2A97F4;
            font-weight: 500 !important;
        }

        @@-webkit-keyframes pulseColor {
            0% {
                color: #2A97F4;
            }

            50% {
                color: #198DF3;
            }

            51% {
                color: #0A67B8;
            }

            100% {
                color: #064072;
            }
        }

        .animated {
            -webkit-animation-duration: 400ms;
            animation-duration: 400ms;
        }

        .align-radio {
            float: left;
            margin-right: 5px !important;
            margin-top: 2px !important;
        }

        .align-label-radio {
            margin-bottom: 4px;
        }

        .placeh-ticket-venta::placeholder {
            color: var(--emp-color);
            opacity: 1;
        }

        .placeh-ticket-venta:-ms-input-placeholder {
            color: var(--emp-color);
        }

        .placeh-ticket-venta::-ms-input-placeholder {
            color: var(--emp-color);
        }

        #appVueTable {
            /*height: calc(100vh - 265px);
            display: flex;*/
            /*align-items: center;*/
        }

        .content {
            /*text-align: center;
            width: 100%;*/
        }

        .boletosVendidos {
            font-size: 16px !important;
            font-weight: 500;
            color: #004e90;
            line-height: 0.5;
            text-align: center;
        }

        .boletosVendidosTitle {
            font-weight: 500;
            color: #6c7282;
            font-size: 18px;
            font-weight: 600;
            font-family: monospace;
            line-height: 15px;
        }

        .faImgTitle {
            font-size: 6em;
            color: var(--emp-color);
        }

        .colorHr {
            margin-top: 5px;
            background-color: cadetblue;
        }

        .mfBoletosVendidos {
            text-align: center;
        }

        .btn-bus:hover {
            background-color: var(--emp-color);
            transition: background-color .3s;
        }

        .a-transition {
            -webkit-transition: all 0.6s ease;
            -moz-transition: all 0.6s ease;
            -o-transition: all 0.6s ease;
            transition: all 0.6s ease;
        }

        .tbl-mini-row .custom-th {
            padding: 8px 5px;
        }

        .rainUp {
            -webkit-animation: fadeInUp 1.6s infinite;
            animation: fadeInUp 1.6s infinite;
            -webkit-animation-direction: reverse;
            animation-direction: reverse;
            -webkit-animation-timing-function: linear;
            animation-timing-function: linear;
        }

        .rainDown {
            -webkit-animation: fadeInDown 1.6s infinite;
            animation: fadeInDown 1.6s infinite;
            -webkit-animation-timing-function: linear;
            animation-timing-function: linear;
        }

        td:focus {
            background-color: var(--emp-color) !important;
            color: white;
        }
    </style>

    <style type="text/css">
        .PU {
            background: @Url.Content("url(" + ImagePath + "/wwwroot/plugins/images/users/puerta.png)") no-repeat center center;
            display: block;
            height: 95%;
            min-width: 40px;
            -webkit-user-drag: none;
            -khtml-user-drag: none;
            -moz-user-drag: none;
            -o-user-drag: none;
            user-drag: none;
        }

        .BA {
            background: @Url.Content("url(" + ImagePath + "/wwwroot/plugins/images/users/bano.png)") no-repeat center center;
            display: block;
            height: 95%;
            width: 95%;
            min-width: 38px;
            -webkit-user-drag: none;
            -khtml-user-drag: none;
            -moz-user-drag: none;
            -o-user-drag: none;
            user-drag: none;
        }

        .TV {
            background: @Url.Content("url(" + ImagePath + "/wwwroot/plugins/images/users/TV.png)") no-repeat center center;
            display: block;
            height: 95%;
            min-width: 40px;
            -webkit-user-drag: none;
            -khtml-user-drag: none;
            -moz-user-drag: none;
            -o-user-drag: none;
            user-drag: none;
        }

        .EE {
            background: @Url.Content("url(" + ImagePath + "/wwwroot/plugins/images/users/ESCALERA.png)") no-repeat center center;
            background-color: #B2B2B2;
            border-radius: 4px;
            display: block;
            height: 95%;
            /*min-width: 40px;*/
            margin: 0 5px;
            -webkit-user-drag: none;
            -khtml-user-drag: none;
            -moz-user-drag: none;
            -o-user-drag: none;
            user-drag: none;
        }
    </style>
}

@section scripts{
    <script type="text/javascript">

        $(document).ready(function () {

            $(document).on('hidden.bs.modal', '.modal', function () {
                $('.modal:visible').length && $(document.body).addClass('modal-open');
            });

            $("#appVueMiniMapa").draggable({
                handle: ".modal-header"
            });

            $("#appVueAnulaReintegro").draggable({
                handle: ".modal-header"
            });

            $("#appVueCrearProgramacion").draggable({
                handle: ".modal-header"
            });

            //#region RECORRIDO ITINERARIOS

            $(document).on('focus active', 'input[type=checkbox]', function () {
                $('label[for=' + $(this).attr('id') + ']').addClass('active-chck');
            });

            $(document).on('blur', 'input[type=checkbox]', function () {
                $('label[for=' + $(this).attr('id') + ']').removeClass('active-chck');
            });

            //#endregion

            //#region MODALES

            $('#appVueTipoPago').on('shown.bs.modal', function () {
                window.addEventListener('keyup', appVueTipoPago.esc);

                appVueTipoPago.$nextTick(function () {
                    switch (appVueVenta.pickedBusVenta) {
                        case '7': // Pase de cortesía
                        case '1': // Crédito
                            $('#cboEmbarqueTP input[type=search]').focus();
                            break;
                        default:
                            document.getElementById('txtImportePagadoC').focus();
                    }
                });
            });

            $('#appVueTipoPago').on('hidden.bs.modal', function () {
                document.getElementById('btnTipoPago').focus();

                window.removeEventListener('keyup', appVueTipoPago.esc);
            });

            $('#appVueTipoPago2').on('shown.bs.modal', function () {
                window.addEventListener('keyup', appVueTipoPago2.esc);

                appVueTipoPago2.$nextTick(() => {
                    appVueTipoPago2.recorridoSectionTipoPagos2(false);
                });
            });

            $('#appVueTipoPago2').on('hidden.bs.modal', function () {
                window.removeEventListener('keyup', appVueTipoPago2.esc);
            });

            $('#appVueRegistrarInfante').on('shown.bs.modal', function () {
                window.addEventListener('keyup', appVueRegistrarInfante.esc);

                if (appVueVenta.list.ventas[appVueVenta.indexVenta].ObjAcompaniante.Documento) {
                    document.getElementById("chckRegistrarNino").checked = true;
                    document.getElementById("btnCancelarRA").focus();
                }
                else
                    $("#cboTipoDocRA input[type=search]").focus();
            });

            $('#appVueRegistrarInfante').on('hidden.bs.modal', function () {
                appVueVenta.$refs.refRegistrarNino.focus();

                if (appVueVenta.list.ventas[appVueVenta.indexVenta].ObjAcompaniante.Documento)
                    appVueVenta.list.ventas[appVueVenta.indexVenta].CheckRegistrarNino = true;
                else
                    appVueVenta.list.ventas[appVueVenta.indexVenta].CheckRegistrarNino = false;

                appVueRegistrarInfante.limpiarCampos();

                window.removeEventListener('keyup', appVueRegistrarInfante.esc);
            });

            $('#appVuePaseCortesia').on('shown.bs.modal', function () {
                window.addEventListener('keyup', appVuePaseCortesia.esc);

                $("#cboGerentePC input[type=search]").focus();
            });

            $('#appVuePaseCortesia').on('hidden.bs.modal', function () {
                appVuePaseCortesia.limpiarPaseCortesia();

                window.removeEventListener('keyup', appVuePaseCortesia.esc);
            });

            $('#appBoletosVendidos').on('shown.bs.modal', function () {
                window.addEventListener('keyup', appBoletosVendidos.esc);

                document.getElementById('btnCerrarVenta').focus();
            });

            $('#appBoletosVendidos').on('hidden.bs.modal', async function () {
                var tmpPickedBusVenta = appVueVenta.pickedBusVenta;

                await appController.chargeTurnos();
                appVueTipoPago.processing = false;

                if (appBoletosVendidos.boletos && appBoletosVendidos.boletos.length > 0) {
                    if (tmpPickedBusVenta !== 'R')
                        appVueTipoPago.convertirVentaToBase64(appBoletosVendidos.boletos, TipoImprimir)
                }

                window.removeEventListener('keyup', appBoletosVendidos.esc);
            });

            $('#appVuePostergacion').on('shown.bs.modal', function () {
                window.addEventListener('keyup', appVuePostergacion.esc);

                if (appVuePostergacion.filtro.empresa && appVuePostergacion.filtro.serie && appVuePostergacion.filtro.documento)
                    appVuePostergacion.searchPasajero();
                else
                    $('#cboEmpresaPos input[type=search]').focus();
            });

            $('#appVuePostergacion').on('hidden.bs.modal', function () {
                appVuePostergacion.limpiarCampos();

                window.removeEventListener('keyup', appVuePostergacion.esc);
            });

            $('#appClaveAutorizacion').on('shown.bs.modal', function () {
                if (appClaveAutorizacion.Tipo === ClaveAcompañanteConMayorEdad)
                    window.removeEventListener('keyup', appVueRegistrarInfante.esc);

                switch (appClaveAutorizacion.Tipo) {
                    case ClaveHoraConfirmacion:
                    case ClaveTiempoReserva:
                        $('#cboUsuarioCA input[type=search]').focus();
                        break;
                    case claveReintegro:
                    case claveReintegroConfirmacion:
                    case ClaveAnulacionPanel234:
                    case ClaveAnulacionPanel36:
                    case ClaveReimpresionPanel226:
                        {
                            if (appController.validatePanel('147') === '1') // Disabled Combo
                                $('#txtContraseniaCA').focus();
                            else
                                $('#cboUsuarioCA input[type=search]').focus();
                        };
                        break;
                    default:
                        document.getElementById('txtContraseniaCA').focus();
                }
            });

            $('#appClaveAutorizacion').on('hidden.bs.modal', function () {
                if (appClaveAutorizacion.Tipo === ClaveAcompañanteConMayorEdad)
                    window.addEventListener('keyup', appVueRegistrarInfante.esc);

                appClaveAutorizacion.$nextTick(function () {
                    switch (appClaveAutorizacion.Tipo) {
                        case ClaveAcompañanteConMayorEdad:
                            {
                                if (appVueRegistrarInfante.enableSaveWithClaveAutorizacion)
                                    document.getElementById('btnRegistrarAconpaniante').focus();
                                else
                                    document.getElementById('btnIngresarConClave').focus();
                            };
                            break;
                        case ClaveDescuentoDePasajes:
                            {
                                if (!appVueVenta.list.ventas[appVueVenta.indexVenta].ValidadorDescuento) {

                                    if (appVueVenta.list.ventas[appVueVenta.indexVenta].ValidadorDescuentoControl) {
                                        appVueVenta.list.ventas[appVueVenta.indexVenta].ValidadorDescuentoControl = false;
                                        appVueVenta.list.ventas[appVueVenta.indexVenta].DescuentoTipoDC = '0';
                                        appVueVenta.list.ventas[appVueVenta.indexVenta].ImporteDescuentoDC = '';
                                        appVueVenta.list.ventas[appVueVenta.indexVenta].ImporteDescontadoDC = '';
                                        appVueVenta.list.ventas[appVueVenta.indexVenta].AutorizadoDC = '';
                                        appVueVenta.list.ventas[appVueVenta.indexVenta].ClaveDC = '';

                                        appVueVenta.list.ventas[appVueVenta.indexVenta].ReadonlyPrecio = false;
                                    }

                                    var auxPrecio = parseFloat(appVueVenta.list.ventas[appVueVenta.indexVenta].PrecioNormal || '0') || 0;
                                    appVueVenta.list.ventas[appVueVenta.indexVenta].Precio = auxPrecio.toFixed(2);
                                }

                                document.getElementById('txtPrecio').focus();
                            };
                            break;
                    }
                });
            });

            $('#appVueCreditoClientes').on('shown.bs.modal', function () {
                window.addEventListener('keyup', appVueCreditoClientes.esc);
            });

            $('#appVueCreditoClientes').on('hidden.bs.modal', function () {
                appVueCreditoClientes.limpiarCreditoClientes();

                window.removeEventListener('keyup', appVueCreditoClientes.esc);
            });

            $('#appVueCreditoOpciones').on('shown.bs.modal', function () {
                window.addEventListener('keyup', appVueCreditoOpciones.esc);

                $("#cboSeccion input[type=search]").focus();
            });

            $('#appVueCreditoOpciones').on('hidden.bs.modal', function () {
                appVueCreditoOpciones.limpiarCreditoOpciones();

                window.removeEventListener('keyup', appVueCreditoOpciones.esc);
            });

            $('#appVueBuscaClientePasaje').on('shown.bs.modal', function () {
                window.addEventListener('keyup', appVueBuscaClientePasaje.esc);

                document.getElementById('txtNombreBCP').focus();
            });

            $('#appVueBuscaClientePasaje').on('hidden.bs.modal', function () {
                appVueBuscaClientePasaje.limpiarBuscaClientePasaje();

                window.removeEventListener('keyup', appVueBuscaClientePasaje.esc);
            });

            $('#appVueDescuentoControl').on('shown.bs.modal', function () {
                window.addEventListener('keyup', appVueDescuentoControl.esc);

                document.getElementById('txtImporteDescDC').focus();
            });

            $('#appVueDescuentoControl').on('hidden.bs.modal', function () {
                appVueDescuentoControl.limpiarDescuentoControl();
                appVueDescuentoControl.$nextTick(function () {
                    document.getElementById('txtPrecio').focus();
                });

                window.removeEventListener('keyup', appVueDescuentoControl.esc);
            });

            $('#appVueManifiestoPasajeros').on('shown.bs.modal', function () {
                window.addEventListener('keyup', appVueManifiestoPasajeros.esc);

            });

            $('#appVueManifiestoPasajeros').on('hidden.bs.modal', function () {
                //appVueManifiestoPasajeros.limpiarManifiestoPasajeros();

                window.removeEventListener('keyup', appVueManifiestoPasajeros.esc);
            });

            $('#appVueNotaCredito').on('shown.bs.modal', function () {
                window.addEventListener('keyup', appVueNotaCredito.esc);

                $('#cboEmpresaNC input[type=search]').focus();
            });

            $('#appVueNotaCredito').on('hidden.bs.modal', function () {
                appVueNotaCredito.limpiarNotaCredito();

                window.removeEventListener('keyup', appVueNotaCredito.esc);
            });

            //#endregion

            //#region DATETIMEPICKER

            if ($('.dpFiltro').length) {
                $('.dpFiltro').datetimepicker({
                    keyBinds: {
                        enter: function (e) {
                            if (e) {
                                switch (e[0].previousElementSibling.id) {
                                    case 'txtFechaReservacion':
                                        {
                                            if (appVueVenta.validateFechaReservacion() === false)
                                                return;
                                        };
                                        break;
                                    case 'txtFechaInicialNC':
                                        {
                                            if (appVueNotaCredito.recorridoTxtFechaInicial() === false)
                                                return;
                                        };
                                        break;
                                    case 'txtFechaFinalNC':
                                        {
                                            if (appVueNotaCredito.recorridoTxtFechaFinal() === false)
                                                return;
                                        };
                                        break;
                                }
                            }
                        },
                        up: null,
                        down: null,
                        left: null,
                        right: null,
                    },
                    useCurrent: false,
                    locale: 'es',
                    showTodayButton: false,
                    showClose: false,
                    showClear: false,
                    keepOpen: false,
                    toolbarPlacement: 'top',
                    format: 'DD/MM/YYYY',
                    defaultDate: moment(),
                    maxDate: moment().add(1, 'year'),
                    minDate: moment().subtract(1, 'year'),
                    tooltips: {
                        today: 'Ir a la fecha actual',
                        clear: 'Borrar fecha',
                        close: 'Cerrar selector'
                    }
                });
            }

            if ($('.dpNac').length) {
                $('.dpNac').datetimepicker({
                    keyBinds: {
                        enter: function (e) {
                            if (e) {
                                switch (e[0].previousElementSibling.id) {
                                    case 'txtFechaNacRA':
                                        {
                                            if (appVueRegistrarInfante.recorrerFechaNac() === false)
                                                return;
                                        };
                                        break;
                                }
                            }
                        },
                        up: null,
                        down: null,
                        left: null,
                        right: null
                    },
                    useCurrent: false,
                    locale: 'es',
                    showTodayButton: false,
                    showClose: false,
                    showClear: false,
                    keepOpen: false,
                    toolbarPlacement: 'top',
                    format: 'DD/MM/YYYY',
                    defaultDate: moment(),
                    maxDate: moment(),
                    minDate: moment().subtract(100, 'years'),
                    tooltips: {
                        today: 'Ir a la fecha actual',
                        clear: 'Borrar fecha',
                        close: 'Cerrar selector'
                    }
                });
            }

            if ($('.dph').length) {
                $('.dph').datetimepicker({
                    keyBinds: {
                        enter: async function (e) {
                            if (e) {
                                switch (e[0].previousElementSibling.id) {
                                    case 'txtHoraReservacion':
                                        {
                                            if (await appVueVenta.validateHoraReservacion() === false)
                                                return;
                                        };
                                        break;
                                }
                            }
                        },
                        up: null,
                        down: null,
                        left: null,
                        right: null
                    },
                    useCurrent: false,
                    locale: 'es',
                    showTodayButton: false,
                    showClose: false,
                    showClear: false,
                    keepOpen: false,
                    toolbarPlacement: 'top',
                    format: 'hh:mm A',
                    tooltips: {
                        today: 'Ir a la hora actual',
                        clear: 'Borrar hora',
                        close: 'Cerrar selector'
                    }
                });
            }

            if ($('.dph2').length) {
                $('.dph2').datetimepicker({
                    //keyBinds: {
                    //    enter: async function (e) {
                    //        if (e) {
                    //        }
                    //    },
                    //    up: null,
                    //    down: null,
                    //    left: null,
                    //    right: null
                    //},
                    useCurrent: false,
                    locale: 'es',
                    showTodayButton: true,
                    showClose: true,
                    showClear: false,
                    keepOpen: false,
                    toolbarPlacement: 'top',
                    format: 'hh:mm A',
                    tooltips: {
                        today: 'Ir a la hora actual',
                        clear: 'Borrar hora',
                        close: 'Cerrar selector'
                    }
                });
            }

            //#endregion

        });

        var UrlIndexPrincipal = '@Url.Action("Index", "Principal")';
        var Usuario = @Html.Raw(Json.Encode(Model));
        var ImagePath = '@ImagePath';
        var UrlImprimirBoleto = '@urlImprimirBoleto';
        var AddTimeTurno = '@addTimeTurno';
        var JLMrootCode = '@JLMrootCode';

        var ClaveAcompañanteConMayorEdad = '@claveAcompañanteConMayorEdad';
        var ClaveDescuentoDePasajes = '@claveDescuentoDePasajes';
        var ClaveCambioPrecioBoletoViaje = '@claveCambioPrecioBoletoViaje';
        var ClaveProgramacion = '@claveProgramacion';
        var ClaveAnularFechaPasada = '@claveAnularFechaPasada';
        var ClaveMoverVentaFueraDeHora = '@claveMoverVentaFueraDeHora';
        var ClaveAnulacionTarjetaCredito = '@claveAnulacionTarjetaCredito';
        var ClavePostergacionesBoleto = '@clavePostergacionesBoleto';
        var ClaveFlag9 = '109';
        var ClaveFechaAbiertaABolPasados = '@claveFechaAbiertaABolPasados';
        var ClaveConfirmacionDeBoletosRemotosSinManifiesto = '@claveConfirmacionDeBoletosRemotosSinManifiesto';
        var ClaveCambioDeNivelDeAsiento = '@claveCambioDeNivelDeAsiento';
        var ClaveHoraConfirmacion = '@claveHoraConfirmacion';
        var claveReintegro = '@claveReintegro';
        var claveReintegroConfirmacion = '@claveReintegroConfirmacion';
        var ClaveAnulacionPanel234 = '@claveAnulacionPanel234';
        var ClaveAnulacionPanel36 = '@claveAnulacionPanel36';
        var ClaveTiempoReserva = '@claveTiempoReserva';
        var ClaveReimpresionPanel226 = '@claveReimpresionPanel226';
        var ClaveCambioNivelServicio = '@claveCambioNivelServicio';
        var ClavePostergacionFlag9 = '@clavePostergacionFlag9';
        var ClaveCambioTipoPago = '@claveCambioTipoPago';

        var ClaveCancelarReserva = '';
        var IngresoManualPasajes = false;
        var NacionalidadPorDefault = 'PERUANA';
        var TipoImprimir = 'Impresion';
        var TipoReimprimir = 'Reimpresion';
        var VerificaHoraConfirmacion = '0';
        var TiempoReserva = null;

        var selectAll = {
            id: '0',
            label: 'TODOS'
        };
        var rutas = [];
        var empresas = [];
        var servicios = [];
        var tiposDoc = [];
        var pvOrigenesBus = [];
        var tiposPago = [];
        var tarjetas = [];

        Vue.filter('formatNombre', function (value) {
            var nombreConcat = value.split(',');

            // Valida Split
            if (nombreConcat.length !== 3)
                nombreConcat = ['', '', ''];
            // ------------

            return `${nombreConcat[0]} ${nombreConcat[1]} ${nombreConcat[2]}`;
        });

        Vue.filter('formatNroVenta', function (value) {
            if (value) {
                // Para el caso de 'Reserva'
                var auxCeroPorSigno = value.substring(1, 2);
                if (auxCeroPorSigno === '-') {
                    auxCeroPorSigno = '0';
                    value = value.substring(0, 1) + auxCeroPorSigno + value.substring(2);
                }
                // -------------------------
                var auxValue = value.substring(5);
                auxValue = auxValue.padStart(8, '0');
                return value.substring(0, 5) + auxValue;
            }
            else
                return '';
        });

        Vue.filter('rutas', function (value) {
            if (!value) return '';
            var filter = _.find(rutas, (o) => { return o.id == value.toString(); });
            return (filter) ? filter.label : '';
        });

        Vue.filter('empresas', function (value) {
            if (!value) return '';
            value = value.toString();
            var filter = _.find(empresas, (o) => { return o.id == value; });
            return (filter) ? filter.label : '';
        });

        Vue.filter('servicios', function (value) {
            if (!value) return '';
            var filter = _.find(servicios, (o) => { return o.id == value.toString(); });
            return (filter) ? filter.label : '';
        });

        Vue.filter('tipoDocumento', function (value) {
            if (!value) return '';
            var filter = _.find(tiposDoc, (o) => { return o.id == value.toString(); })
            return (filter) ? filter.label : '';
        });

        Vue.filter('tipoPago', function (value) {
            if (!value) return '';
            var filter = _.find(tiposPago, (o) => { return o.id == value.toString(); })
            return (filter) ? filter.label : '';
        });

        Vue.filter('formatCodiProgramacion', function (value, length = 7) {
            value = String(value || '') || '';
            return value.padStart(length, '0');
        });

        Vue.prototype.$getValueDateTimePicker = function obtenerValorDateTimePicker(e, _validateFechaActual) {
            if (e && !e.target.value && _validateFechaActual !== false)
                e.target.value = moment().format('DD/MM/YYYY');

            return e.target.value;
        }

        Vue.prototype.$getValueDateTimePicker_Hours = function obtenerValorDateTimePicker_Hours(e, _validateHoraActual) {
            if (e && !e.target.value && _validateHoraActual !== false)
                return moment().format('hh:mm A');

            return e.target.value;
        }

        Vue.prototype.$formatNumberWithTwoDecimals = function formatoNumeroConDosDecimales(value, _parteEntera) {
            var re1 = /^([0-9]+[\.]?[0-9]?[0-9]?|[0-9]+)$/g;
            var re2 = /^([0-9]+[\.]?[0-9]?[0-9]?|[0-9]+)/g;

            var auxIndexPunto = value.indexOf('.');
            var validate = /^\d{1,}(\.\d{0,2})?$/.test(value);

            if (validate) {
                if (auxIndexPunto === -1 || auxIndexPunto > _parteEntera)
                    value = value.substring(0, _parteEntera);
            }
            else {
                value = value.substring(0, value.length - 1);

                if (!re1.test(value)) {
                    value = re2.exec(value);
                    value = (value ? value[0] : '');
                }
            }

            return value;
        }

        Vue.prototype.$filterLettersToName = function $filtroLetrasParaNombres(value) {
            if (value && isNaN(value)) {
                var auxValue = value.match(/[a-zA-ZçáàãâéèêíìóòõôúùüñÇÁÀÃÂÉÈÊÍÌÓÒÕÔÚÙÜÑ,'. ]/gi);
                if (auxValue)
                    value = auxValue.join("");
                else
                    value = '';
            }
            else
                value = '';

            return value.toUpperCase();
        }

        Vue.prototype.$getValuePickedBusVenta = function obtenerValorPickedBusVenta() {
            return appVueVenta.pickedBusVenta;
        }

        Vue.prototype.$getFormatName = function $obtenerFormatName(_nombres, _apePaterno, _apeMaterno) {
            if (_nombres && _apePaterno && _apeMaterno) {
                return `${_nombres} ${_apePaterno} ${_apeMaterno}`;
            } else return 'NO DISPONIBLE';
        };

        Vue.prototype.$colorBloqueoInterno = APP.ventas.colorBloqueoInterno;

        function formatoBoletoCompleto(_TipoBoleto, _Boleto) {
            return (_TipoBoleto === 'M' ? '0' : _TipoBoleto) + _Boleto;
        }

        function callSignalR_BloquearAsiento(_NroViaje, _FechaProgramacion, _NroAsiento) {
            ClientSignalR.NroViaje = _NroViaje;
            ClientSignalR.FechaProgramacion = _FechaProgramacion;
            ClientSignalR.NroAsiento = _NroAsiento;
            ClientSignalR.Owner = false;
            if (ClientSignalR.NroViaje && ClientSignalR.FechaProgramacion && ClientSignalR.NroAsiento)
                document.getElementById('btnHiddenBloquearAsiento').click();
        }

        function callSignalR_LiberarAsiento(_NroViaje, _FechaProgramacion, _NroAsiento) {
            ClientSignalR.NroViaje = _NroViaje;
            ClientSignalR.FechaProgramacion = _FechaProgramacion;
            ClientSignalR.NroAsiento = _NroAsiento;
            ClientSignalR.Owner = false;
            if (ClientSignalR.NroViaje && ClientSignalR.FechaProgramacion && ClientSignalR.NroAsiento)
                document.getElementById('btnHiddenLiberarAsiento').click();
        }

        function callSignalR_LiberarArregloAsientos(_NroViaje, _FechaProgramacion, _ArregloNroAsientos) {
            ClientSignalR.NroViaje = _NroViaje;
            ClientSignalR.FechaProgramacion = _FechaProgramacion;
            ClientSignalR.ArregloNroAsientos = _ArregloNroAsientos;
            ClientSignalR.Owner = false;
            if (ClientSignalR.NroViaje && ClientSignalR.FechaProgramacion && ClientSignalR.ArregloNroAsientos)
                document.getElementById('btnHiddenLiberarArregloAsientos').click();
        }

        function callSignalR_ActualizarTurnoPlano(_NroViaje, _FechaProgramacion, _VentaResponse) {
            ClientSignalR.NroViaje = _NroViaje;
            ClientSignalR.FechaProgramacion = _FechaProgramacion;
            ClientSignalR.VentaResponse = _VentaResponse;
            ClientSignalR.Owner = true;
            if (ClientSignalR.NroViaje && ClientSignalR.FechaProgramacion && ClientSignalR.VentaResponse)
                document.getElementById('btnHiddenActualizarTurnoPlano').click();
        }

        function deferredModal(modal, state) {
            var d = $.Deferred();
            modal.one(state ? 'shown.bs.modal' : 'hidden.bs.modal', d.resolve);
            return d.promise();
        };

        function auxSetTd(id, afterEnter, stepsOfRow, auxFirstCurrCell = true) {

            var currCell = (auxFirstCurrCell) ? $('#' + id + ' tr td').first() : $('#' + id + ' tr td').last();
            var firstRow = $('#' + id + ' tr').first().index();
            var currRow = $('#' + id + ' tr').first().index();
            var lastRow = $('#' + id + ' tr').last().index();

            if (currCell.length > 0) {
                currCell.focus();
            }

            $('#' + id + ' tr td').unbind();

            $('#' + id).unbind();

            $('#' + id + ' tr td').click(function () {
                currCell = $(this);
                currRow = $(this).parent().index();
            });

            $('#' + id).keydown(function (e) {

                if (e.which == 39 || e.which == 37 || e.which == 38 || e.which == 40 ||
                    e.which == 13 || e.which == 32 || e.which == 9 || e.which == 35 || e.which == 36) {

                    var c = "";

                    if (e.which == 39) {
                        //Rigth Arrow
                        e.preventDefault();
                        c = currCell.next();
                    } else if (e.which == 37) {
                        //Left Arrow
                        e.preventDefault();
                        c = currCell.prev();
                    } else if (e.which == 38) {
                        //Up Arrow
                        e.preventDefault();
                        currRow = currCell.parent().index();
                        if (currRow == firstRow) {
                            stepsOfRow(1);
                        } else {
                            c = currCell.closest('tr').prev().find('td:eq(' + currCell.index() + ')');
                        }
                    } else if (e.which == 40) {
                        //Down Arrow
                        e.preventDefault();
                        currRow = currCell.parent().index();
                        if (currRow == lastRow) {
                            stepsOfRow(2);
                        } else {
                            c = currCell.closest('tr').next().find('td:eq(' + currCell.index() + ')');
                        }
                    } else if (e.which == 9 && !e.shiftKey) {
                        //Tab
                        e.preventDefault();
                        c = currCell.next();
                    } else if (e.which == 9 && e.shiftKey) {
                        //Shift + Tab
                        e.preventDefault();
                        c = currCell.prev();
                    } else if (e.which == 36) {
                        //Inicio
                        e.preventDefault();
                        c = $('#' + id + ' tr td').first();
                    } else if (e.which == 35) {
                        //Fin
                        e.preventDefault();
                        c = $('#' + id + ' tr td').last();
                    } else if (e.which == 13) {
                        //Enter
                        e.preventDefault();
                        afterEnter(e);
                    }

                    if (c.length > 0) {
                        currCell = c;
                        currCell.focus();
                    }
                }
            });
        }

        var appController = (function () {
            return {
                loadTable: function (_list) {
                    appVueTable.loadTable(_list)
                },
                showVentas: async function (_item, _turnos) {
                    await appVueVenta.chargeVentas(_item, _turnos);
                    if (appVueVenta.showPlano) {
                        appVueFilter.showVentas = true;
                        appVueTable.showVentas = true;
                        appVueVenta.showVentas = true;
                    }
                },
                hideVentas: function () {
                    appVueFilter.showVentas = false;
                    appVueTable.showVentas = false;
                    appVueVenta.showVentas = false;
                },
                chargeTurnos: async function () {
                    appVueVenta.firstCharge = false;

                    var item = {};
                    item.CodiEmpresa = appVueVenta.filtro.CodiEmpresa.id;
                    item.CodiOrigen = appVueVenta.filtro.CodiSucursal.id;
                    item.CodiSucursal = appVueVenta.filtro.CodiOrigenBus.id;
                    item.CodiPuntoVenta = appVueVenta.filtro.CodiPVOrigenBus.id;
                    item.CodiRuta = appVueVenta.filtro.CodiDestinoBus.id;
                    item.CodiServicio = appVueVenta.filtro.CodiServicio.id;
                    item.CodiDestino = appVueVenta.filtro.CodiDestinoPas.id;
                    item.HoraPartida = appVueVenta.filtro.Turno;
                    item.FechaViaje = appVueVenta.filtro.Fecha;

                    await appVueVenta.getTurno(item);
                },
                showTipoPago: function (_embarque, _arribos, _ticketVenta, _listaVenta) {
                    appVueTipoPago.show(_embarque, _arribos, _ticketVenta, _listaVenta);
                },
                showRegistrarInfante: function (_ObjAcompaniante) {
                    appVueRegistrarInfante.show(_ObjAcompaniante);
                },
                showPaseCortesia: function () {
                    appVuePaseCortesia.show();
                },
                sendPaseCortesia: async function (_beneficiario) {
                    await appVueVenta.setPaseCortesia(_beneficiario);
                },
                showBoletosVendidos: function (_boletosVendidos, _tmpCantidadVendida) {
                    appBoletosVendidos.show(_boletosVendidos, _tmpCantidadVendida);
                },
                showPostergacion: function () {
                    appVuePostergacion.show();
                },
                showFechaAbierta: function (asientoSel) {
                    appVueFechaAbierta.show(asientoSel);
                },
                showClaveAutorizacion: async function (_Tipo) {
                    await appClaveAutorizacion.show(_Tipo);
                },
                sendClaveAutorizacion: async function (_password, _Tipo, _observacion) {
                    var auxResponse = null;
                    await APP.rq.axios2.post(APP.base + '/itinerarios/clave-autorizacion' + APP.util.getQueryParamByObject({
                        password: _password,
                        codiTipo: _Tipo
                    }))
                        .then(res => {
                            switch (_Tipo) {
                                case ClaveAcompañanteConMayorEdad:
                                    appVueRegistrarInfante.sendClaveAutorizacion(res.data);
                                    break;
                                case ClaveDescuentoDePasajes:
                                    appVueVenta.sendClaveAutorizacion(res.data, _observacion);
                                    break;
                                case ClaveCambioPrecioBoletoViaje:
                                    var objValues = {};
                                    objValues.DescuentoTipoDC = appVueDescuentoControl.DescuentoTipo;
                                    objValues.ImporteDescuentoDC = appVueDescuentoControl.ImporteDescuento;
                                    objValues.ImporteDescontadoDC = appVueDescuentoControl.ImporteDescontado;
                                    objValues.AutorizadoDC = appVueDescuentoControl.Autorizado;
                                    objValues.ClaveDC = appVueDescuentoControl.Clave;

                                    appVueVenta.sendClaveAutorizacionDC(res.data, objValues);
                                    break;
                                case ClaveProgramacion:
                                case ClaveAnularFechaPasada:
                                case ClaveMoverVentaFueraDeHora:
                                case ClaveAnulacionTarjetaCredito:
                                case ClavePostergacionesBoleto:
                                case ClaveFlag9:
                                case ClaveFechaAbiertaABolPasados:
                                case ClaveCambioDeNivelDeAsiento:

                                case ClaveCambioNivelServicio:
                                case ClavePostergacionFlag9:
                                    auxResponse = res.data;
                                    break;
                                case ClaveCambioTipoPago:
                                    auxResponse = res.data;
                                    break;
                            }
                        })
                        .catch(APP.rq.axios_handler_error_alert);

                    return auxResponse;
                },
                liberarAsientoActual: function () {
                    var auxNroAsiento = appVueVenta.list.ventas[appVueVenta.indexVenta].NroAsiento;
                    if (auxNroAsiento) {
                        var auxObj = appVueVenta.findObjectAsiento(auxNroAsiento);
                        appVueVenta.liberarAsiento(auxObj, true);
                    }
                    appVueVenta.$refs.refNroAsientoVenta.focus();
                },
                showCreditoClientes: function (_dataVenta) {
                    appVueCreditoClientes.show(_dataVenta);
                },
                validatePanel: function (_cadenaCodiPanel) {
                    var auxResponse = "0";

                    var objPanel = _.find(appVueVenta.list.panelControl, { 'CodiPanel': _cadenaCodiPanel });
                    if (objPanel)
                        auxResponse = objPanel.Valor;

                    return auxResponse;
                },
                validatePanelClave: function (_cadenaCodiPanel) {
                    var auxResponse = "0";

                    var objPanel = _.find(appVueVenta.list.panelControlClave, { 'CodiPanel': _cadenaCodiPanel });
                    if (objPanel)
                        auxResponse = objPanel.Valor;

                    return auxResponse;
                },
                validatePanelNivel: function (_codigo, _nivel) {
                    var auxResponse = "0";

                    var objPanel = _.find(appVueVenta.list.panelControlNivel, { 'Codigo': _codigo, 'Nivel': _nivel });
                    if (objPanel)
                        auxResponse = "1";

                    return auxResponse;
                },
                sendDataCredito: function (_auxItem) {
                    appVueVenta.setCreditoCliente( _auxItem);
                },
                showCreditoOpciones: function (_idContrato) {
                    appVueCreditoOpciones.show(_idContrato);
                },
                sendCreditoOpciones: function (_request) {
                    appVueVenta.setCreditoOpciones(_request);
                },
                showBuscaClientePasaje: function (_CodiTipoDocId) {
                    appVueBuscaClientePasaje.show(_CodiTipoDocId);
                },
                sendBuscaClientePasaje: async function (_item) {
                    await appVueVenta.sendBuscaClientePasaje(_item);
                },
                showDescuentoControl: function (_PrecioVenta) {
                    appVueDescuentoControl.show(_PrecioVenta);
                },
                getDescServicio: function () {
                    return appVueVenta.objTurno.DescServicio;
                },
                validateAlgoritmoRuc: function (_Ruc) {
                    return appVueVenta.validateAlgoritmoRuc(_Ruc);
                },
                convertirVentaToBase64: function (_ListaVentasRealizadas, _TipoImpresion) {
                    appVueTipoPago.convertirVentaToBase64(_ListaVentasRealizadas, _TipoImpresion);
                },
                disabledAsientos: function (_value) {
                    appVueVenta.disabledAsiento = _value;
                },
                refreshItinerarios: function () {
                    appVueFilter.search();
                },
                setDataTempDescuentoControl: function () {
                    if (appVueVenta.list.ventas[appVueVenta.indexVenta].ValidadorDescuentoControl) {
                        appVueDescuentoControl.DescuentoTipo = appVueVenta.list.ventas[appVueVenta.indexVenta].DescuentoTipoDC;
                        appVueDescuentoControl.ImporteDescuento = appVueVenta.list.ventas[appVueVenta.indexVenta].ImporteDescuentoDC;
                        appVueDescuentoControl.ImporteDescontado = appVueVenta.list.ventas[appVueVenta.indexVenta].ImporteDescontadoDC;
                    }
                },
                recorridoSectionVentas: function () {
                    appVueVenta.recorridoSectionVentas();
                },
                getCurrentCorrelativo: function () {
                    var correlativo = '';
                    if (appVueVenta.list.ventas[appVueVenta.indexVenta].FlagVenta === '') {
                        correlativo = appVueVenta.Correlativo;
                    } else {
                        var value = appVueVenta.list.ventas[appVueVenta.indexVenta].NroVenta;
                        var auxCeroPorSigno = value.substring(1, 2);
                        if (auxCeroPorSigno === '-') {
                            auxCeroPorSigno = '0';
                            value = value.substring(0, 1) + auxCeroPorSigno + value.substring(2);
                        }
                        // -------------------------
                        var auxValue = value.substring(5);
                        auxValue = auxValue.padStart(8, '0');
                        correlativo =  value.substring(0, 5) + auxValue;
                    }
                    return correlativo;
                },
                validaManifiestoProgramacion: async function () {
                    return await appVueVenta.validaManifiestoProgramacion();
                },
                verificaTurnoDisponible: function () {
                    return appVueVenta.verificaTurnoDisponible();
                },
                acompanianteVentaCRUD: async function (_ObjAcompaniante) {
                    await appVueVenta.setAcompanianteVenta(_ObjAcompaniante);
                },
                showManifiestoPasajeros: function (_objRequest) {
                    appVueManifiestoPasajeros.show(_objRequest);
                },
                getListPvOrigenesBus: function (_CodiOrigenBus) {
                    return _.filter(pvOrigenesBus, function (obj) { return obj.CodiSucursal == _CodiOrigenBus; });
                },
                showReintegro: function (_item) {
                    appVueReintegro.show(_item);
                },
                showMiniMapa: function (_item) {
                    appVueMiniMapa.show(_item);
                },
                getSelectorVselect: function (_list, _objFiltro) {
                    var tmpIndex = _.findIndex(_list, { 'id': _objFiltro.id, 'label': _objFiltro.label });
                    return (tmpIndex >= 0 ? tmpIndex : 0);
                },
                setFiltrosPostergacion: function (_objFiltros) {
                    var auxNroVenta = _objFiltros.NroVenta;

                    appVuePostergacion.filtro.empresa = _objFiltros.Empresa;
                    appVuePostergacion.filtro.serie = auxNroVenta.substring(0, 4);
                    appVuePostergacion.filtro.documento = auxNroVenta.substring(5);
                },
                asignBeneficiarioDrag: async function () {
                    if (appVuePostergacion.filtro.empresa && appVuePostergacion.filtro.serie && appVuePostergacion.filtro.documento) {
                        await appVuePostergacion.searchPasajero();
                        await appVuePostergacion.asignBeneficiario();
                    }
                    else
                        this.showPostergacion();
                },
                existValidadorDescuento: function () {
                    return _.findIndex(appVueVenta.list.ventas, function (obj) { return obj.ValidadorDescuento === true; });
                },
                existValidadorDescuentoControl: function () {
                    var indexObj = _.findIndex(appVueVenta.list.ventas, function (obj) { return obj.ValidadorDescuentoControl === true; });

                    if (indexObj !== -1) {
                        appVueDescuentoControl.Autorizado = appVueVenta.list.ventas[indexObj].AutorizadoDC;
                        appVueDescuentoControl.Clave = appVueVenta.list.ventas[indexObj].ClaveDC;
                    }
                },
                validateNumDias: async function (_FechaVenta, _CodTab) {
                    return await appVueFechaAbierta.validateNumDias(_FechaVenta, _CodTab);
                },
                sendClaveAutorizacionReserva: async function (_CodiUsuario, _password) {
                    return await appVueVenta.sendClaveAutorizacionReserva(_CodiUsuario, _password);
                },
                sendClaveAutorizacionReintegro: async function (_CodiUsuario, _password) {
                    return await appVueReintegro.sendClaveAutorizacionReintegro(_CodiUsuario, _password);
                },
                consultaClaveControl: async function (_Usuario, _Pwd) {
                    var auxResponse = false;

                    await APP.rq.axios2.post(APP.base + '/itinerarios/consultaClaveControl', {
                        Usuario: _Usuario,
                        Pwd: _Pwd
                    }).then(res => {
                        if (res.data.Estado) {
                            if (res.data.Valor) auxResponse = res.data.Valor;
                            else APP.msg.warning(res.data.Mensaje);
                        } else
                                APP.msg.error(res.data.Mensaje);
                        }).catch(APP.rq.axios_handler_error_alert);

                    return auxResponse;
                },
                UsuarioClaveAutorizacion: function (codiPanel) {
                    var objUsuario = {};
                    switch (codiPanel) {
                        case '147': {
                            objUsuario.id = Usuario.CodiUsuario;
                            objUsuario.label = Usuario.Nombre;
                        }; break;
                    }
                    return objUsuario;
                },
                getHoraBaseReservacion: function (_embarques, _CodiPuntoVenta) {
                    var tmpHoraBase = '';

                    var auxObjEmbarque = _.find(_embarques, { 'CodiPuntoVenta': _CodiPuntoVenta });
                    if (auxObjEmbarque)
                        tmpHoraBase = auxObjEmbarque.Hora;
                    else
                        tmpHoraBase = appVueVenta.filtro.Turno;

                    return tmpHoraBase;
                },
                findTipoDocumento: function (_TipoDocumento) {
                    return _.find(tiposDoc, { 'id': _TipoDocumento }) || null;
                },
                findSexo: function (_Sexo) {
                    return _.find(appVueVenta.list.sexos, { 'id': _Sexo }) || null;
                },
                findEmpresa: function (_Empresa) {
                    _Empresa = String(_Empresa);
                    return _.find(empresas, { 'id': _Empresa }) || null;
                },
                validateTipoDocumento: function (_TipoDocumento, _Documento, auxValidate) {
                    var auxResponse = false;

                    var tmpTipoDocumento = this.findTipoDocumento(_TipoDocumento);
                    if (tmpTipoDocumento && _Documento.length >= tmpTipoDocumento.MinLonDocumento && _Documento.length <= tmpTipoDocumento.MaxLonDocumento)
                        auxResponse = true;

                    if (!auxResponse && auxValidate === true)
                        APP.msg.warning('Ingrese ' +
                            (tmpTipoDocumento.label === '-' ? 'documento' : tmpTipoDocumento.label) +
                            ' de ' + tmpTipoDocumento.MinLonDocumento +
                            (tmpTipoDocumento.MinLonDocumento === '1' ? ' carácter' : ' caracteres') +
                            ' como mínimo.');

                    return auxResponse;
                },
                getTiposDocumentosSinRaya: function () {
                    return _.cloneDeep(_.filter(tiposDoc, function (o) {
                        return o.id !== '00';
                    }));
                },
                verificaLiquidacionComiDet: async function (_IdVenta) {
                    return await appVueVenta.verificaLiquidacionComiDet(_IdVenta);
                },
                verificaLiquidacionComi: async function (_CodiProgramacion, _CodiPuntoVenta) {
                    return await appVueVenta.verificaLiquidacionComi(_CodiProgramacion, _CodiPuntoVenta);
                },
                verificaNC: async function (_IdVenta) {
                    return await appVueVenta.verificaNC(_IdVenta);
                },
                obtenerManifiestoProgramacion: async function (_Prog, _Suc) {
                    return await appVueVenta.obtenerManifiestoProgramacion(_Prog, _Suc);
                },
                verificaManifiestoPorPVenta: async function (_CodiProgramacion, _CodiPuntoVenta) {
                    return await appVueVenta.verificaManifiestoPorPVenta(_CodiProgramacion, _CodiPuntoVenta);
                },
                getValuePNP: function (_canPNP) {
                    var auxResponse = true;

                    var nPNP = _.filter(appVueVenta.list.tempList, function (obj) { return obj.FlagVenta === 'S'; }).length;
                    if (_canPNP > 0) {
                        if (nPNP >= _canPNP)
                            auxResponse = false;
                        else
                            auxResponse = true;
                    }

                    return auxResponse;
                },
                validaDocumentoRepetido: function (_TipoDocumento, _NumeroDocumento, _NroAsiento) {
                    return appVueVenta.validaDocumentoRepetido(_TipoDocumento, _NumeroDocumento, _NroAsiento);
                },
                consultaPos: async function (_CodTab, _CodEmp) {
                    return await appVueVenta.consultaPos(_CodTab, _CodEmp);
                },
                consultaSumaBoletosPostergados: async function (_Tipo, _Numero, _Emp) {
                    return await appVueVenta.consultaSumaBoletosPostergados(_Tipo, _Numero, _Emp);
                },
                calculaEdad: function (_FechaNac) {
                    var resEdad = '0';

                    if (_FechaNac)
                        resEdad = String(moment().diff(moment(_FechaNac, 'DD/MM/YYYY'), 'years'));

                    return resEdad;
                },
                showCTipoPago: function (_item) {
                    appVueCTipoPago.show(_item);
                },
                showCrearProgramacion: function (_item) {
                    appVueCrearProgramacion.show(_item);
                },
                showNotaCredito: function () {
                    appVueNotaCredito.show();
                },
                getTiposDocumentosNC: function () {
                    var auxTiposDoc = [];

                    auxTiposDoc = _.cloneDeep(_.filter(tiposDoc, function (o) {
                        return o.id === '01' || o.id === '03' || o.id === '07';
                    }));
                    auxTiposDoc.unshift({ 'id': '77', 'label': 'RUC', 'MinLonDocumento': '11', 'MaxLonDocumento': '11', 'TipoDatoDocumento': '#' });

                    return auxTiposDoc;
                }
            };
        })();

        var appVueFilter = new Vue({
            el: '#appVueFilter',
            data: {
                filtro: {
                    CodiOrigen: null,
                    CodiDestino: selectAll,
                    CodiRuta: selectAll,
                    FechaViaje: moment().format('DD/MM/YYYY'),
                    Hora: moment().format('hh:mm A'),
                    TodosTurnos: false,
                    SoloProgramados: false
                },
                list: {
                    origenesPas: [],
                    destinosPas: [],
                    destinosBus: []
                },
                showVentas: false,
                processing: false
            },
            mounted: function () {
                document.getElementsByClassName("borderBottom")[0].classList.add("colorBlue");
                $(".preloader").fadeIn();

                this.getSucursales();
                this.$nextTick(() => {
                    $('#cboDestinoBus input[type=search]').focus();
                    $(".preloader").fadeOut();
                });
            },
            methods: {
                getLabel(option) {
                    return `${option.id} - ${option.label}`
                },
                getSucursales() {
                    var _this = this;
                    APP.rq.axios2.get(APP.base + '/base/get-oficinas')
                        .then(res => {
                            if (res.data.Estado) {
                                _this.list.origenesPas = _.cloneDeep(res.data.Valor);
                                _this.list.destinosPas = _.cloneDeep(res.data.Valor);
                                _this.list.destinosPas.unshift(selectAll);
                                _this.list.destinosBus = _.cloneDeep(res.data.Valor);
                                _this.list.destinosBus.unshift(selectAll);

                                appVueVenta.list.sucursales = _.cloneDeep(res.data.Valor);
                                appVueVenta.list.origenesBus = _.cloneDeep(res.data.Valor);
                                appVueVenta.list.destinosBus = _.cloneDeep(res.data.Valor);
                                appVueVenta.list.destinosPas = _.cloneDeep(res.data.Valor);

                                rutas = _.cloneDeep(res.data.Valor);

                                appVueManifiestoPasajeros.list.origenesBus = _.cloneDeep(res.data.Valor);
                                appVueManifiestoPasajeros.list.destinosBus = _.cloneDeep(res.data.Valor);

                                _this.$nextTick(() => {
                                    _this.filtro.CodiOrigen = _this.list.origenesPas.find(x => x.id === String(Usuario.CodiSucursal));
                                });
                            }
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                search() {
                    var _this = this;
                    _this.processing = true;

                    var input = {};
                    input.CodiOrigen = _this.filtro.CodiOrigen.id;
                    input.CodiDestino = _this.filtro.CodiDestino.id;
                    input.CodiRuta = _this.filtro.CodiRuta.id;
                    input.FechaViaje = _this.filtro.FechaViaje;
                    input.Hora = _this.filtro.Hora;
                    input.TodosTurnos = _this.filtro.TodosTurnos;
                    input.SoloProgramados = _this.filtro.SoloProgramados;
                    input.NomDestino = _this.filtro.CodiDestino.label;

                    APP.rq.axios.post(APP.base + '/itinerarios/lista-itinerarios', input)
                        .then(res => {
                            if (res.data.Estado)
                                appController.loadTable(res.data.Valor);
                            else
                                APP.msg.error(res.data.Mensaje);

                            _this.processing = false;
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                recorrido: function () {
                    if (!this.filtro.CodiOrigen)
                        $('#cboOrigenPas input[type=search]').focus();
                    else if (!this.filtro.CodiDestino)
                        $('#cboDestinoPas input[type=search]').focus();
                    else if (!this.filtro.CodiRuta)
                        $('#cboDestinoBus input[type=search]').focus();
                    else if (!this.filtro.FechaViaje)
                        document.getElementById('txtFecha').focus();
                    else
                        this.search();
                },
                nextStep: function (code) {
                    switch (code) {
                        case 1:
                            $('#cboDestinoPas input[type=search]').focus();
                            break;
                        case 2:
                            $('#cboDestinoBus input[type=search]').focus();
                            break;
                        case 3:
                            document.getElementById('txtFecha').focus();
                            break;
                        case 4:
                            {
                                document.getElementById('txtFecha').blur();

                                this.$nextTick(() => {
                                    document.getElementById('txtHora').focus();
                                });
                            };
                            break;
                        case 5:
                            {
                                document.getElementById('txtHora').blur();

                                this.$nextTick(() => {
                                    $('#chckTodos:first').focus();
                                });
                            };
                            break;
                        case 6:
                            $('#chckProgramados:first').focus();
                            break;
                        case 7:
                            document.getElementById('buscar').focus();
                            break;
                        default:
                            this.recorrido();
                    }
                }
            },
            watch: {
                'filtro.CodiOrigen': function (newVal, oldVal) {
                    if (this.filtro.CodiOrigen) {
                        var auxRutas = _.cloneDeep(rutas);
                        auxRutas.unshift(selectAll)

                        this.list.destinosPas = auxRutas;
                        _.pull(this.list.destinosPas, _.find(this.list.destinosPas, { 'id': this.filtro.CodiOrigen.id, 'label': this.filtro.CodiOrigen.label }));

                        this.list.destinosBus = auxRutas;
                        _.pull(this.list.destinosBus, _.find(this.list.destinosBus, { 'id': this.filtro.CodiOrigen.id, 'label': this.filtro.CodiOrigen.label }));
                    }

                    this.$nextTick(() => {
                        this.$refs.refOrigenPas.typeAheadPointer = this.$getSelectorVselect(this.list.origenesPas, this.filtro.CodiOrigen);
                    });
                },
                'list.destinosPas': function (newVal, oldVal) {
                    this.$nextTick(() => {
                        this.$refs.refDestinoPas.typeAheadPointer = this.$getSelectorVselect(this.list.destinosPas, this.filtro.CodiDestino);
                    });
                },
                'list.destinosBus': function (newVal, oldVal) {
                    this.$nextTick(() => {
                        this.$refs.refDestinoBus.typeAheadPointer = this.$getSelectorVselect(this.list.destinosBus, this.filtro.CodiRuta);
                    });
                }
            }
        });

        var appVueTable = new Vue({
            el: '#appVueTable',
            data: {
                list: {
                    itinerarios: []
                },
                paginate: ['items'],
                showVentas: false,
                chargeCurrCell: false, //evitar multiples llamadas a auxSetTd
                auxFirstCurrCell: true //inicia en la primera celda
            },
            mounted: function () {},
            methods: {
                loadTable: function (list) {
                    this.auxFirstCurrCell = true;
                    this.list.itinerarios = list;

                    this.$nextTick(() => {
                        this.shown = true
                        if (this.$refs.paginator && this.list.itinerarios.length > 0) {
                            this.$refs.paginator.goToPage(1);
                            this.setTd();
                        }
                    });
                },
                setTd: function () {
                    auxSetTd('tblListaItinerarios', this.sendRowOfTab, this.stepsOfRow, this.auxFirstCurrCell);
                },
                sendRowOfTab: async function (e) {
                    let _this = this;
                    if (!_this.chargeCurrCell) {
                        _this.chargeCurrCell = true;
                        var _index = parseInt(e.target.tabIndex / 19) + (_this.paginate.items.page * 10);
                        var _item = _this.list.itinerarios[_index];
                        await _this.sendRow(_item);
                        appVueVenta.$nextTick(() => {
                            _this.chargeCurrCell = false;
                        });
                    }
                },
                stepsOfRow: function (_auxStep) {
                    let _this = this;
                    switch (_auxStep) {
                        case 1: {
                            if (_this.paginate.items.page > 0) {
                                _this.auxFirstCurrCell = false;
                                _this.$refs.paginator.goToPage(_this.paginate.items.page);
                            }
                        }; break;
                        case 2: {
                            if (_this.paginate.items.page < parseInt((_this.list.itinerarios.length - 1) / 10)) {
                                _this.auxFirstCurrCell = true;
                                _this.$refs.paginator.goToPage(_this.paginate.items.page + 2);
                            }
                        }; break;
                    }
                },
                sendRow: async function (item) {
                    let _this = this;

                    // Para evitar volver a solicitar la misma consulta
                    if (appVueVenta.processing)
                        return;

                    if (item.ProgramacionCerrada !== '0') {
                        switch (item.ProgramacionCerrada) {
                            case '1':
                                APP.msg.warning('La ruta está bloqueada para esta fecha.');
                                break;
                            case '2':
                                APP.msg.warning('La ruta está bloqueada desde esta fecha hacia adelante.');
                                break;
                        }

                        return;
                    }

                    var turnos = _this.list.itinerarios.reduce(function (filtered, option) {
                        if (option.CodiDestino === item.CodiDestino) {
                            var someNewValue =
                            {
                                NomServicio: option.NomServicio,
                                HoraPartida: option.HoraPartida,
                                CodiServicio: option.CodiServicio,
                                CodiRuta: option.CodiRuta,
                                CodiOrigen: option.CodiOrigen,
                                CodiDestino: option.CodiDestino,
                                HoraViaje: option.HoraViaje,
                                FechaViaje: option.FechaViaje,
                                CodiEmpresa: option.CodiEmpresa,
                                CodiPuntoVenta: option.CodiPuntoVenta,
                                CodiSucursal: option.CodiSucursal,
                                Color: option.Color,
                                SecondColor: option.SecondColor
                                //PlanoBus: option.PlanoBus,
                                //CodiProgramacion: option.CodiProgramacion,
                                //CodiBus: option.CodiBus,
                                //FechaProgramacion: option.FechaProgramacion,
                                //NroViaje: option.NroViaje,
                            }
                            filtered.push(someNewValue);
                        }
                        return filtered;
                    }, []);

                    await appController.showVentas(item, turnos);

                    _this.$nextTick(() => {
                        setTimeout(function () {
                            // Animación 'ScrollTop'
                            animateScrollTop(800);
                        }, 400);

                        setTimeout(function () {
                            appVueVenta.$refs.refNroAsientoVenta.focus();
                        }, 800);

                        var _topOfBus = $('.img-bus').offset().top;
                        appVueVenta.top = _topOfBus + 'px';
                    });
                }
            },
            computed: {},
            watch: {}
        });

        var appVueVenta = new Vue({
            el: '#appVueVenta',
            data: {
                filtro: {
                    CodiEmpresa: null,
                    CodiSucursal: null,
                    CodiOrigenBus: null,
                    CodiPVOrigenBus: null,
                    CodiDestinoBus: null,
                    CodiServicio: null,
                    CodiDestinoPas: null,
                    Turno: '',
                    Fecha: '',
                    NroViaje: '',
                    CodiProgramacion: ''
                },
                list: {
                    empresas: [],
                    sucursales: [],
                    origenesBus: [],
                    pvOrigenesBus: [],
                    destinosBus: [],
                    servicios: [],
                    destinosPas: [],
                    plano1: [],
                    plano2: [],
                    plano3: [],
                    plano4: [],
                    plano5: [],
                    tiposDoc: [],
                    turnos: [],
                    destinosRuta: [],
                    embarques: [],
                    arribos: [],
                    ventas: [{
                        IdCliente: 0,
                        CodiTipoDoc: null,
                        Documento: '',
                        Nombres: '',
                        ApellidoPaterno: '',
                        ApellidoMaterno: '',
                        FechaNac: '',
                        Edad: '',
                        Sexo: null,
                        Telefono: '',
                        Ruc: '',
                        RazonSocial: '',
                        Direccion: '',
                        Recoger: '',
                        Reintegro: '',
                        Observacion: '',
                        Precio: '',
                        PrecioNormal: '',
                        PrecioMin: '',
                        PrecioMax: '',
                        NroAsiento: '',
                        NivelAsiento: 0,
                        NroVenta: '',
                        NroSolicitud: '',
                        FechaVen: '',
                        Nacionalidad: '',
                        OldNroAsiento: '',
                        FlagVenta: '',
                        ObjAcompaniante: {
                            CodiTipoDoc: '',
                            Documento: '',
                            NombreCompleto: '',
                            FechaNac: '',
                            Edad: '',
                            Sexo: '',
                            Parentesco: ''
                        },
                        CodiGerente: '',
                        CodiSocio: '',
                        Concepto: '',
                        FechaAbierta: false,
                        IdVenta: 0,
                        Info: '',
                        FlagPrecioNormal: false,
                        ValidadorDescuento: false,
                        ObservacionDescuento: '',
                        Area: null,
                        BoletoTipoDir: '1',
                        FechaCita: '',
                        Hospital: null,
                        ValidadorDescuentoControl: false,
                        DescuentoTipoDC: '0',
                        ImporteDescuentoDC: '',
                        ImporteDescontadoDC: '',
                        AutorizadoDC: '',
                        ClaveDC: '',
                        ReadonlyPrecio: false,
                        CheckRegistrarNino: false,
                        DisabledRazonSocial: false,
                        FechaReservacion: '',
                        HoraReservacion: '',
                        ValidadorClienteEspecial: false,
                        CodiEmpresa: 0,

                        Correo: ''
                    }],
                    sexos: [
                        { 'id': 'M', 'label': 'M' },
                        { 'id': 'F', 'label': 'F' }
                    ],
                    tempList: [],
                    panelControl: [],
                    panelControlClave: [],
                    panelControlNivel: [],
                    usuariosClaveAnuRei: [],
                    usuariosClaveControl: []
                },
                objPlano: {
                    CodiBus: '',
                    PlacaBus: '',
                    PlanoBus: '',
                    CodiChofer: '',
                    NombreChofer: '',
                    CodiCopiloto: '',
                    NombreCopiloto: ''
                },
                showVentas: false,
                showPlano: false,
                showTextTurnos: false,
                firstCharge: true,
                indexVenta: 0,
                oldIndexVenta: 0,
                oldPeople: [],
                firstAsiento: true,
                pickedBusVenta: 'V',
                mask: {
                    documento: ''
                },
                objTurno: {
                    FechaProgramacion: '',
                    HoraProgramacion: '',
                    DescServicio: '',
                    X_Estado: '',
                    CantidadMaxBloqAsi: 0,
                    Xcierre: '',
                    TablaBloqueoAsientos: null,
                    SucControlReserva: '',
                    SucControlFechaAbierta: '',
                    SucControlBloqueo: '',
                },
                Correlativo: '',
                auxFocus: {
                    asiento: false,
                    precio: false
                },
                processing: false,
                disabledAsiento: false,
                disabledCampoNroAsiento: false,
                disabledCamposTicket: false,
                disabledCamposTicket_Pase: false,
                disabledDocumentoRaya: false,
                eventTxtNroAsientoVenta: '',
                eventTxtPrecio: '',
                // Crédito
                readonlyPrecio_Credito: false,
                disabledCredito: false,
                objCreditoCliente: {
                    Ruc: '',
                    RazonSocial: '',
                    Direccion: '',
                    idContrato: 0,
                    IdRuc: 0,
                    CntBoletos: 0,
                    SaldoBoletos: 0,
                    IdPrecio: 0,
                    Precio: 0
                },
                // Reserva
                validatorReservaHC: false,
                validatorTiempoReserva: false,
                // Correlativos
                CorrelativoVentaBoleta: '',
                CorrelativoVentaFactura: '',
                CorrelativoPaseBoleta: '',
                CorrelativoPaseFactura: '',
                CorrelativoCredito: '',
                TipoTerminalElectronico: '',
                TipoImpresora: '',
                // ContextMenu
                showContextMenu: false,
                itemSelected: null,
                top: '0px',
                left: '0px'
            },
            mounted: function () {
                this.getEmpresas();
                this.getServicios();
                this.getTiposDoc();
                this.getPVOrigenesBus();
                this.listarPanelesControl();

                this.getSucursalControl();

                this.$validator.extend('formatoNumeroTarjeta', {
                    getMessage(field, val) {
                        return `El campo ${field} debe tener ${val} dígitos.`
                    },
                    validate(value, field) {
                        if (value.length < 19)
                            return false
                        else
                            return true;
                    }
                });

                window.addEventListener('keydown', this.configEventKeyF5);
                window.addEventListener('keydown', this.configEventKeyF3);
            },
            methods: {
                chargeVentas: async function (item, turnos) {
                    this.firstCharge = true;
                    this.list.turnos = turnos;

                    await this.getTurno(item);
                },
                getTurno: async function (item) {
                    var _this = this;
                    _this.processing = true;

                    if (_this.pickedBusVenta !== '1') // Crédito
                        _this.pickedBusVenta = 'V';

                    var input = {};
                    input.CodiEmpresa = item.CodiEmpresa;
                    input.CodiOrigen = item.CodiOrigen;
                    input.CodiDestino = item.CodiDestino;
                    input.CodiSucursal = item.CodiSucursal;
                    input.CodiRuta = item.CodiRuta;
                    input.CodiPuntoVenta = item.CodiPuntoVenta;
                    input.CodiServicio = item.CodiServicio;
                    input.HoraViaje = item.HoraPartida;
                    input.FechaViaje = item.FechaViaje;
                    // ---------------------------------
                    var auxValidator = await _this.getCorrelativo(item.CodiEmpresa, _this.pickedBusVenta);
                    if (!auxValidator) {
                        _this.processing = false;
                        _this.showPlano = false;
                        return;
                    }
                    // ---------------------------------
                    await APP.rq.axios.post(APP.base + '/itinerarios/turnos', input)
                        .then(async function (res) {
                            if (res.data.EsCorrecto) {
                                // --------------------------------------
                                if (!_this.firstCharge) {
                                    if ($("#panelWrapperV").hasClass("in")) {
                                        $('#btnDesplegar').click();
                                        _this.showTextTurnos = true; // DESPLEGAR TURNOS
                                    }
                                }
                                // --------------------------------------------------
                                if (res.data.Valor.ListaAuxDestinosRuta.length > 0)
                                    _this.list.destinosPas = _.cloneDeep(res.data.Valor.ListaAuxDestinosRuta);
                                else
                                    _this.list.destinosPas = _.cloneDeep(rutas);
                                // --------------------------------------------------

                                _this.filtro.CodiEmpresa = _this.list.empresas.find(x => x.id === String(res.data.Valor.CodiEmpresa));
                                _this.filtro.CodiSucursal = _this.list.sucursales.find(x => x.id === String(res.data.Valor.CodiOrigen));
                                _this.filtro.CodiOrigenBus = _this.list.origenesBus.find(x => x.id === String(res.data.Valor.CodiSucursal));
                                _this.filtro.CodiDestinoBus = _this.list.destinosBus.find(x => x.id === String(res.data.Valor.CodiRuta));
                                _this.filtro.CodiServicio = _this.list.servicios.find(x => x.id === String(res.data.Valor.CodiServicio));
                                _this.filtro.CodiDestinoPas = _this.list.destinosPas.find(x => x.id === String(res.data.Valor.CodiDestino));
                                _this.list.pvOrigenesBus = appController.getListPvOrigenesBus(_this.filtro.CodiOrigenBus.id);
                                _this.filtro.CodiPVOrigenBus = _this.list.pvOrigenesBus.find(x => x.id === String(res.data.Valor.CodiPuntoVenta));
                                _this.filtro.Turno = res.data.Valor.HoraPartida;
                                _this.filtro.Fecha = input.FechaViaje;
                                _this.filtro.NroViaje = res.data.Valor.NroViaje;
                                _this.filtro.CodiProgramacion = res.data.Valor.CodiProgramacion;
                                _this.objPlano.CodiBus = res.data.Valor.CodiBus;
                                _this.objPlano.PlacaBus = res.data.Valor.PlacaBus;
                                _this.objPlano.PlanoBus = res.data.Valor.PlanoBus;
                                _this.objPlano.CodiChofer = res.data.Valor.CodiChofer;
                                _this.objPlano.NombreChofer = res.data.Valor.NombreChofer;
                                _this.objPlano.CodiCopiloto = res.data.Valor.CodiCopiloto;
                                _this.objPlano.NombreCopiloto = res.data.Valor.NombreCopiloto;
                                _this.list.destinosRuta = res.data.Valor.ListaDestinosRuta;
                                _this.list.embarques = res.data.Valor.ListaEmbarques;
                                _this.list.arribos = res.data.Valor.ListaArribos;
                                _this.objTurno.FechaProgramacion = res.data.Valor.FechaProgramacion;
                                _this.objTurno.HoraProgramacion = res.data.Valor.HoraProgramacion;
                                _this.objTurno.DescServicio = res.data.Valor.DescServicio;
                                _this.objTurno.X_Estado = res.data.Valor.X_Estado;
                                _this.objTurno.CantidadMaxBloqAsi = res.data.Valor.CantidadMaxBloqAsi;
                                _this.objTurno.Xcierre = res.data.Valor.Activo;

                                _this.objTurno.TablaBloqueoAsientos = res.data.Valor.TablaBloqueoAsientos;

                                _this.list.tempList = _.cloneDeep(res.data.Valor.ListaPlanoBus);
                                // -------------------------------------------------------
                                var auxResponse = await _this.limpiarAsientosBloqueados();
                                if (!auxResponse) {
                                    _this.processing = false;
                                    _this.showPlano = false;
                                    return;
                                }
                                // -------------------------------------------------------
                                _this.list.plano5 = _this.list.tempList.filter(x => x.Indice === Math.ceil(x.Indice / 5) * 5);
                                _this.list.plano4 = _this.list.tempList.filter(x => x.Indice + 1 === Math.ceil(x.Indice / 5) * 5);
                                _this.list.plano3 = _this.list.tempList.filter(x => x.Indice + 2 === Math.ceil(x.Indice / 5) * 5);
                                _this.list.plano2 = _this.list.tempList.filter(x => x.Indice + 3 === Math.ceil(x.Indice / 5) * 5);
                                _this.list.plano1 = _this.list.tempList.filter(x => x.Indice + 4 === Math.ceil(x.Indice / 5) * 5);
                                _this.firstAsiento = true;
                                _this.limpiarVenta();
                                _this.$nextTick(() => {
                                    _this.showPlano = true;
                                });
                            }
                            else {
                                _this.showPlano = false;
                                if (res.data.Estado)
                                    APP.msg.warning(res.data.Mensaje);
                                else
                                    APP.msg.error(res.data.Mensaje);
                            }

                            _this.processing = false;
                        })
                        .catch(APP.rq.axios_handler_error_alert);

                    _this.$nextTick(() => {
                        if (_this.showTextTurnos) {
                            appController.disabledAsientos(false);

                            if (!_this.firstCharge) {
                                setTimeout(function () {
                                    // Animación 'ScrollTop'
                                    animateScrollTop(800);
                                }, 400);

                                setTimeout(function () {
                                    appVueVenta.$refs.refNroAsientoVenta.focus();
                                }, 800);
                            }
                        }
                    });
                },
                getEmpresas: function () {
                    var _this = this;
                    APP.rq.axios2.get(APP.base + '/base/get-empresas')
                        .then(res => {
                            if (res.data.Estado) {
                                _this.list.empresas = _.cloneDeep(res.data.Valor);
                                empresas = _.cloneDeep(res.data.Valor);

                                appVueManifiestoPasajeros.list.empresas = _.cloneDeep(res.data.Valor);
                                appVuePostergacion.list.empresas = _.cloneDeep(res.data.Valor);
                                appVueNotaCredito.list.empresas = _.cloneDeep(res.data.Valor);
                            }
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                getServicios: function () {
                    var _this = this;
                    APP.rq.axios2.get(APP.base + '/base/get-servicios')
                        .then(res => {
                            if (res.data.Estado) {
                                _this.list.servicios = _.cloneDeep(res.data.Valor);

                                appVueManifiestoPasajeros.list.servicios = _.cloneDeep(res.data.Valor);

                                servicios = _.cloneDeep(res.data.Valor);
                            }
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                getTiposDoc: function () {
                    var _this = this;
                    APP.rq.axios2.get(APP.base + '/base/get-tiposDoc')
                        .then(res => {
                            if (res.data.Estado) {
                                tiposDoc = _.cloneDeep(res.data.Valor);
                                var auxListaSinRaya = appController.getTiposDocumentosSinRaya();
                                _this.list.tiposDoc = _.cloneDeep(auxListaSinRaya);

                                appVueRegistrarInfante.list.tipoDoc = _.cloneDeep(auxListaSinRaya);
                                appVueReintegro.list.tipoDoc = _.cloneDeep(auxListaSinRaya);
                                var auxListaNC = appController.getTiposDocumentosNC();
                                appVueNotaCredito.list.tiposDocumentos = _.cloneDeep(auxListaNC);
                            }
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                getPVOrigenesBus: function () {
                    APP.rq.axios2.get(APP.base + '/base/get-puntosventa')
                        .then(res => {
                            if (res.data.Estado)
                                pvOrigenesBus = _.cloneDeep(res.data.Valor);
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                listarPanelesControl: function () {
                    var _this = this;
                    APP.rq.axios2.get(APP.base + '/itinerarios/listarPanelesControl')
                        .then(res => {
                            if (res.data.Estado) {
                                _this.list.panelControl = res.data.Valor.ListarPanelControl;
                                _this.list.panelControlClave = res.data.Valor.ListarPanelControlClave;
                                _this.list.panelControlNivel = res.data.Valor.ListarPanelControlNivel;
                            }
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                getSucursalControl: function (_CodiPuntoVenta) {
                    var _this = this;
                    APP.rq.axios2.get(APP.base + '/itinerarios/getSucursalControl')
                        .then(res => {
                            if (res.data.Estado) {
                                _this.objTurno.SucControlReserva = res.data.Valor.Reserva;
                                _this.objTurno.SucControlFechaAbierta = res.data.Valor.FechaAbierta;
                                _this.objTurno.SucControlBloqueo = res.data.Valor.Bloqueo;
                            }
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                getLabel: function (option) {
                    return `${option.id} - ${option.label}`
                },
                hideVentas: function () {
                    this.showPlano = false;
                    this.firstCharge = false;
                    if (!$("#panelWrapperV").hasClass("in")) {
                        $('#btnDesplegar').click();
                        this.showTextTurnos = false;
                    }
                    appController.hideVentas();

                    appController.refreshItinerarios();

                    this.limpiarAsientosBloqueados();
                },
                cerrarVentas: async function () {
                    await this.limpiarAsientosBloqueados();
                    window.location.href = UrlIndexPrincipal;
                },
                changeTurno: function (item) {
                    var _this = this;
                    _this.showPlano = false;
                    _this.firstCharge = false;

                    _this.filtro.Fecha = document.getElementById('txtFecha_2').value;

                    if (!_this.filtro.Fecha)
                        _this.filtro.Fecha = moment().format('DD/MM/YYYY');

                    if (item.FechaViaje !== _this.filtro.Fecha) {
                        _this.list.turnos.forEach(function (objTurno) {
                            objTurno.FechaViaje = _this.filtro.Fecha;
                        });
                    }

                    if (!_this.processing) {
                        _this.$nextTick(() => {
                            _this.getTurno(item);
                        });
                    }
                },
                labelOfDocumento: function (option) {
                    return option.label.substring(0, 8);
                },
                bloquearAsiento: async function (asientoSel, auxBool_Click_Key, auxDraggable) { // Click: True | Key: False // Dragg: True | False
                    var _this = this;
                    var auxResponse = false;
                    var tmpAsientoSel = _.cloneDeep(asientoSel);
                    var tmpTicketActual = _.cloneDeep(_this.list.ventas[_this.indexVenta]);

                    _this.disabledAsiento = true;

                    // Validar 'liberarAsiento'
                    if (asientoSel.IDS > 0) {
                        _this.liberarAsiento(asientoSel, true);
                        _this.disabledAsiento = false;
                        return auxResponse;
                    }

                    // Validar 'AsientoSel' vendido
                    if (asientoSel.FlagVenta) {
                        _this.disabledAsiento = false;

                        _this.fillDataAsientoVendido(asientoSel);
                        return auxResponse;
                    }

                    // Limpiar si el asiento anterior era solo vista
                    if (_this.list.ventas[_this.indexVenta].FlagVenta)
                        _this.limpiarVenta();

                    // Valida 'Correlativo'
                    if (_this.Correlativo === 'B000-00000000' || _this.Correlativo === 'F000-00000000') {
                        APP.msg.error('No se encontró serie para el boleto.');
                        _this.disabledAsiento = false;
                        return auxResponse;
                    }

                    // Valida 'Precio'
                    if (asientoSel.PrecioNormal === 0) { // === 0
                        APP.msg.warning('No se encontró precio del asiento.');
                        _this.disabledAsiento = false;
                        return auxResponse;
                    }

                    // Valida 'FechaViaje'
                    if (moment(_this.filtro.Fecha, 'DD/MM/YYYY').isBefore(moment(), 'days')) {
                        switch (_this.pickedBusVenta) {
                            case 'FA':
                                {
                                    if (appController.validatePanelClave('25') === '1') {
                                        APP.msg.warning('No se puede procesar datos de fechas pasadas.');
                                        _this.disabledAsiento = false;
                                        return auxResponse;
                                    }
                                };
                                break;
                            default:
                                APP.msg.warning('La fecha de viaje debe ser igual o mayor a la fecha actual.');
                                _this.disabledAsiento = false;
                                return auxResponse;
                        }
                    }

                    // Valida 'TurnoDisponible'
                    if (!IngresoManualPasajes) {
                        if (appController.validatePanel('54') === '1') {

                            var verificaTurnoDisponible = _this.verificaTurnoDisponible();
                            if (!verificaTurnoDisponible) {
                                APP.msg.warning('La hora de viaje ya pasó, verificar.');
                                _this.disabledAsiento = false;
                                return auxResponse;
                            }
                        }
                    }

                    // Valida 'Programación cerrada'
                    if (_this.objTurno.Xcierre === '1') {
                        APP.msg.warning('La programación se encuentra cerrada.');
                        _this.disabledAsiento = false;
                        return auxResponse;
                    }

                    // Valida 'Manifiesto'
                    var resValidaManifiestoProgramacion = await _this.validaManifiestoProgramacion();
                    if (!resValidaManifiestoProgramacion) {
                        _this.disabledAsiento = false;
                        return auxResponse;
                    }

                    // Validar 'AsientoSel' no vendido
                    if (!asientoSel.FlagVenta) {
                        switch (_this.pickedBusVenta) {
                            case '1': // Crédito
                                {
                                    // Iniciamos una variable temporal que se seteará al final del bloqueo de asiento
                                    tmpAsientoSel.FlagPrecioNormal = false;

                                    if (!_this.objCreditoCliente.idContrato) {
                                        APP.msg.warning('No ha seleccionado un Cliente, haga click en la opción Crédito.');
                                        _this.disabledAsiento = false;
                                        return auxResponse;
                                    }

                                    // Consulta 'Contrato'
                                    var resConsultarContrato = await _this.consultarContrato(_this.objCreditoCliente.idContrato, asientoSel.PrecioMaximo);
                                    if (!resConsultarContrato) {
                                        _this.disabledAsiento = false;
                                        return auxResponse;
                                    }

                                    // Valida 'PrecioValor'
                                    var validatorPrecioValor = false;
                                    if (appController.validatePanel('121') === '1')
                                        validatorPrecioValor = true;

                                    if (!validatorPrecioValor) {
                                        // Verifica 'PrecioNormal'
                                        var resObjPrecioNormal = await _this.verificarPrecioNormal(_this.objCreditoCliente.idContrato);

                                        if (resObjPrecioNormal) {
                                            if (resObjPrecioNormal.IdNormal !== -1) {
                                                tmpAsientoSel.PrecioNormal = tmpAsientoSel.PrecioNormal + resObjPrecioNormal.MontoMas - resObjPrecioNormal.MontoMenos;
                                                tmpAsientoSel.FlagPrecioNormal = true;

                                                var auxLength = _this.list.ventas.length;
                                                if (auxLength === 1) {
                                                    if (resObjPrecioNormal.Saldo <= 0) {
                                                        APP.msg.warning("Contrato sin boletos disponibles.");
                                                        _this.disabledAsiento = false;
                                                        return auxResponse;
                                                    }
                                                }
                                                else {
                                                    if (resObjPrecioNormal.Saldo < auxLength) {
                                                        APP.msg.warning("Contrato sin boletos disponibles.");
                                                        _this.disabledAsiento = false;
                                                        return auxResponse;
                                                    }
                                                }
                                            }
                                            else {
                                                var resPrecioFecha = await _this.buscarPrecio(_this.filtro.Fecha, asientoSel.Nivel, _this.filtro.Turno, _this.objCreditoCliente.IdPrecio);

                                                if (_this.objCreditoCliente.SaldoBoletos > 0) {
                                                    if (resPrecioFecha > 0)
                                                        tmpAsientoSel.PrecioNormal = resPrecioFecha;
                                                    else
                                                        tmpAsientoSel.PrecioNormal = _this.objCreditoCliente.Precio;
                                                }
                                                else {
                                                    APP.msg.warning("Contrato sin boletos disponibles.");
                                                    _this.disabledAsiento = false;
                                                    return auxResponse;
                                                }

                                                tmpAsientoSel.FlagPrecioNormal = false;
                                            }
                                        }
                                        else {
                                            _this.disabledAsiento = false;
                                            return auxResponse;
                                        }
                                    }
                                };
                                break;
                            case 'FA':
                                {
                                    if (Usuario.Nivel !== 8 && Usuario.Nivel !== 14 && Usuario.Nivel !== 15) {

                                        if (!_this.filtro.CodiEmpresa) {
                                            APP.msg.warning("Para vender en Fecha Abierta debe tener el plano activo.");
                                            _this.disabledAsiento = false;
                                            return auxResponse;
                                        }
                                    }
                                };
                                break;
                            case 'R':
                                {
                                    if (_this.objTurno.SucControlReserva === '1') {
                                        APP.msg.warning('La oficina no está autorizada para reservar asientos.');
                                        _this.disabledAsiento = false;
                                        return auxResponse;
                                    }

                                    if (appController.validatePanel('189') === '1' && !_this.validatorTiempoReserva) {
                                        await _this.obtenerTiempoReserva();

                                        if (TiempoReserva) {
                                            if (moment(_this.filtro.Fecha, 'DD/MM/YYYY').isBefore(moment(TiempoReserva.FechaReservacion, 'DD/MM/YYYY'))) {

                                                appController.showClaveAutorizacion(ClaveTiempoReserva);

                                                await deferredModal($('#appClaveAutorizacion'), false).done(function () {
                                                    // Continue
                                                });

                                                if (!_this.validatorTiempoReserva) {
                                                    _this.disabledAsiento = false;
                                                    return auxResponse;
                                                }
                                            }
                                            else {

                                                if (_this.filtro.Fecha === TiempoReserva.FechaReservacion) {
                                                    var tmpHoraBase = appController.getHoraBaseReservacion(_this.list.embarques, Usuario.CodiPuntoVenta);

                                                    if (moment(tmpHoraBase, 'hh:mmss').isBefore(TiempoReserva.HoraReservacion, 'minutes')) {

                                                        appController.showClaveAutorizacion(ClaveTiempoReserva);

                                                        await deferredModal($('#appClaveAutorizacion'), false).done(function () {
                                                            // Continue
                                                        });

                                                        if (!_this.validatorTiempoReserva) {
                                                            _this.disabledAsiento = false;
                                                            return auxResponse;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                };
                                break;
                            case 'V':
                                {
                                    if (_this.objTurno.SucControlBloqueo === '1' && _this.list.ventas[0].NroAsiento > 0) {
                                        APP.msg.warning('La oficina no está autorizada para vender más de un asiento a la vez.');
                                        _this.disabledAsiento = false;
                                        return auxResponse;
                                    }
                                };
                                break;
                            case 'PO':
                                {
                                    if (Usuario.Nivel === 8) {
                                        APP.msg.warning('Usuario no autorizado.');
                                        _this.disabledAsiento = false;
                                        return auxResponse;
                                    }
                                };
                                break;
                        }
                    }

                    // Valida la cantidad de asientos bloqueados a la vez
                    if (_this.list.ventas.length >= _this.objTurno.CantidadMaxBloqAsi) {
                        APP.msg.warning('Solo puede bloquear hasta ' + _this.objTurno.CantidadMaxBloqAsi + ' asiento(s) a la vez.');
                        _this.disabledAsiento = false;
                        return auxResponse;
                    }

                    var input = {};
                    input.CodiProgramacion = _this.filtro.CodiProgramacion;
                    input.NroViaje = _this.filtro.NroViaje;
                    input.CodiOrigen = _this.filtro.CodiSucursal.id;
                    input.CodiDestino = _this.filtro.CodiDestinoPas.id;
                    input.NumeAsiento = asientoSel.Tipo;
                    input.FechaProgramacion = _this.filtro.Fecha;
                    input.Precio = asientoSel.PrecioVenta;

                    await APP.rq.axios2.post(APP.base + '/itinerarios/bloquearAsiento', input)
                        .then(async function (res) {
                            if (res.data.EsCorrecto) {
                                // Animación 'ScrollTop'
                                animateScrollTop(800);

                                asientoSel.IDS = res.data.Valor;
                                asientoSel.NumeAsiento = parseInt(asientoSel.Tipo);

                                var nameCookie = 'asientoBloqueado_' + (_this.filtro.CodiProgramacion > 0 ? _this.filtro.CodiProgramacion : _this.filtro.NroViaje) + '_' + _this.filtro.Fecha + '_' + asientoSel.Tipo;
                                APP.util.createCookie(nameCookie, asientoSel.IDS, 7);

                                if (auxBool_Click_Key) {
                                    if (!_this.firstAsiento)
                                        _this.createElementInList();
                                }

                                _this.firstAsiento = false;

                                _this.passSectionVentas(asientoSel.Tipo, asientoSel.PrecioNormal, asientoSel.Nivel, asientoSel.PrecioMinimo, asientoSel.PrecioMaximo);

                                _this.list.ventas[_this.indexVenta].OldNroAsiento = _this.list.ventas[_this.indexVenta].NroAsiento;

                                // Acción según 'pickedBusVenta'
                                switch (_this.pickedBusVenta) {
                                    case '7': // Pase de cortesía
                                        appController.showPaseCortesia();
                                        break;
                                    case 'PO': // Postergarción
                                        {
                                            var objFiltros = {};
                                            objFiltros.Empresa = appController.findEmpresa(tmpTicketActual.CodiEmpresa);
                                            objFiltros.NroVenta = tmpTicketActual.NroVenta;

                                            appController.setFiltrosPostergacion(objFiltros);

                                            if (auxDraggable)
                                                await appController.asignBeneficiarioDrag();
                                            else
                                                appController.showPostergacion();
                                        };
                                        break;
                                    case 'FA': // Fecha Abierta
                                        _this.sendToFechaAbierta(asientoSel);
                                        break;
                                    case '1': // Crédito
                                        appController.showCreditoOpciones(_this.objCreditoCliente.idContrato);
                                        _this.list.ventas[_this.indexVenta].Precio = parseFloat(tmpAsientoSel.PrecioNormal).toFixed(2);
                                        _this.list.ventas[_this.indexVenta].PrecioNormal = parseFloat(tmpAsientoSel.PrecioNormal).toFixed(2);
                                        _this.list.ventas[_this.indexVenta].FlagPrecioNormal = tmpAsientoSel.FlagPrecioNormal;
                                        break;
                                }

                                auxResponse = true;

                                _this.$nextTick(() => {
                                    switch (_this.pickedBusVenta) {
                                        case 'V': // Venta
                                        case 'R': // Reserva
                                            {
                                                setTimeout(function () {
                                                    if (auxBool_Click_Key)
                                                        _this.recorridoSectionVentas();
                                                }, 400);
                                            };
                                            break;
                                    }
                                });

                                // callSignalR_BloquearAsiento
                                callSignalR_BloquearAsiento(_this.filtro.NroViaje, _this.objTurno.FechaProgramacion, asientoSel.Tipo);
                            }
                            else {
                                if (res.data.Estado)
                                    APP.msg.warning(res.data.Mensaje);
                                else
                                    APP.msg.error(res.data.Mensaje);
                            }
                        })
                        .catch(APP.rq.axios_handler_error_alert);

                    _this.disabledAsiento = false;

                    if (_this.pickedBusVenta === 'V' || _this.pickedBusVenta === 'R')
                        _this.indexVenta = 0;

                    return auxResponse;
                },
                obtenerTiempoReserva: async function () {
                    if (TiempoReserva)
                        return;

                    await APP.rq.axios2.get(APP.base + '/itinerarios/obtenerTiempoReserva')
                        .then(res => {
                            if (res.data.Estado)
                                TiempoReserva = res.data.Valor;
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                validaManifiestoProgramacion: async function () {
                    var auxResponse = true;

                    if (!IngresoManualPasajes) {

                        // Obtenemos 'X_Estado'
                        this.objTurno.X_Estado = await this.obtenerManifiestoProgramacion(this.filtro.CodiProgramacion, this.filtro.CodiSucursal.id);

                        // Valida y por dentro setea 'X_Estado'
                        var auxX_Estado = _.cloneDeep(this.objTurno.X_Estado);

                        var resValidaManifiesto = await this.validaManifiesto();
                        if (!resValidaManifiesto) {

                            // Seteo el valor original de 'X_Estado'
                            this.objTurno.X_Estado = _.cloneDeep(auxX_Estado);
                            return auxResponse = false;
                        }
                        if (this.objTurno.X_Estado) {
                            APP.msg.warning('El manifiesto ya fue emitido.');

                            // Seteo el valor original de 'X_Estado'
                            this.objTurno.X_Estado = _.cloneDeep(auxX_Estado);
                            return auxResponse = false;
                        }
                    }

                    return auxResponse;
                },
                obtenerManifiestoProgramacion: async function (_Prog, _Suc) {
                    var auxResponse = '';

                    await APP.rq.axios2.post(APP.base + '/itinerarios/consultaManifiestoProgramacion', {
                        Suc: _Suc,
                        Prog: _Prog
                    })
                        .then(res => {
                            if (res.data.Estado)
                                auxResponse = res.data.Valor;
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);

                    return auxResponse;
                },
                verificaTurnoDisponible: function () {
                    var auxResponse = false;

                    if (this.filtro.Fecha === moment().format('DD/MM/YYYY')) {
                        if (appController.validatePanel('14') === '1') {
                            var auxHours = parseInt(AddTimeTurno.substring(0, 2)) || 0;
                            var auxMinutes = parseInt(AddTimeTurno.substring(3, 5)) || 0;
                            var auxHoraResult = moment(this.filtro.Turno, 'hh:mmA').add(auxHours, 'hours').add(auxMinutes, 'minutes');

                            if (auxHoraResult.isSameOrAfter(moment(), 'minutes'))
                                auxResponse = true;
                        }
                        else {
                            if (moment(this.filtro.Turno, 'hh:mmA').isSameOrAfter(moment(), 'minutes'))
                                auxResponse = true;
                        }
                    }
                    else
                        auxResponse = true;

                    return auxResponse;
                },
                fillDataAsientoVendido: async function (asientoSel) {
                    var _fillData = false;

                    // Before
                    switch (asientoSel.FlagVenta) {
                        case 'V': // Venta
                        case '7': // Pase de cortesía
                        case '1': // Crédito
                            {
                                switch (this.pickedBusVenta) {
                                    case 'FA': // Fecha abierta
                                        {
                                            if (this.objTurno.SucControlFechaAbierta === '1') {
                                                APP.msg.warning('La oficina no está autorizada para mandar el boleto a Fecha abierta.');
                                                return;
                                            }

                                            this.sendToFechaAbierta(asientoSel);
                                            _fillData = true;
                                        };
                                        break;
                                };
                            };
                            break;
                        case 'VI': // Venta intermedia
                            {
                                var auxDestinoPas = this.list.destinosPas.find(x => parseInt(x.id) === asientoSel.CodiOrigen);
                                if (auxDestinoPas) {
                                    if (asientoSel.NumeAsiento !== parseInt(this.list.ventas[this.indexVenta].NroAsiento))
                                        APP.msg.warning('Solo puede vender o reservar hasta ' + auxDestinoPas.label + '.');
                                }
                            };
                            break;
                        case 'AB': // Venta pero como bloqueado (Tb_AsientosBloqueados)
                        case 'X': // Bloqueo solo desde el Cliente/Servidor
                            APP.msg.warning('Asiento no disponible.');
                            return;
                    }

                    if (this.list.ventas.length > 1 || (!this.list.ventas[this.indexVenta].FlagVenta && this.list.ventas[this.indexVenta].NroAsiento)) {
                        _fillData = await APP.msg.confirm(
                            'Confirmar acción',
                            'Se perderán los asientos bloqueados sin vender, ¿Desea continuar?');
                        if (_fillData) {
                            // Limpiar 'AsientosBloqueados'
                            var auxResponse = await this.cancelarBoletos();
                            if (!auxResponse) {
                                APP.msg.error('No se pudo limpiar los asientos bloqueados para realizar la venta.');
                                this.disabledAsiento = false;
                                return;
                            }
                        }
                    }
                    else {
                        if (this.list.ventas[this.indexVenta].FlagVenta) {
                            if (this.list.ventas[this.indexVenta].NroAsiento === String(asientoSel.NumeAsiento).padStart(2, '0'))
                                this.limpiarVenta();
                            else
                                _fillData = true;
                        }
                        else {
                            if (this.list.ventas[this.indexVenta].NroAsiento) {
                                // Limpiar 'AsientosBloqueados'
                                var auxResponse = await this.cancelarBoletos();
                                if (!auxResponse) {
                                    APP.msg.error('No se pudo limpiar los asientos bloqueados para realizar la venta.');
                                    this.disabledAsiento = false;
                                    return;
                                }
                            }

                            _fillData = true;
                        }
                    }

                    // After
                    switch (asientoSel.FlagVenta) {
                        case 'VI': // Venta intermedia
                            {
                                if (asientoSel.IdVenta === '0') {
                                    _fillData = false;
                                    this.limpiarVenta();
                                }
                            };
                            break;
                    }

                    // Solo cuando '_fillData' es 'true':
                    if (_fillData) {
                        // Animación 'ScrollTop'
                        animateScrollTop(800);

                        this.limpiarVenta();

                        this.list.ventas[this.indexVenta].NroAsiento = String(asientoSel.NumeAsiento).padStart(2, '0');
                        this.list.ventas[this.indexVenta].CodiTipoDoc = appController.findTipoDocumento(asientoSel.TipoDocumento);
                        this.list.ventas[this.indexVenta].Documento = asientoSel.NumeroDocumento;
                        this.list.ventas[this.indexVenta].Nombres = asientoSel.Nombres;
                        this.list.ventas[this.indexVenta].ApellidoPaterno = asientoSel.ApellidoPaterno;
                        this.list.ventas[this.indexVenta].ApellidoMaterno = asientoSel.ApellidoMaterno;
                        this.list.ventas[this.indexVenta].FechaNac = asientoSel.FechaNacimiento;
                        this.list.ventas[this.indexVenta].Edad = asientoSel.Edad;
                        this.list.ventas[this.indexVenta].Sexo = appController.findSexo(asientoSel.Sexo);
                        this.list.ventas[this.indexVenta].Telefono = asientoSel.Telefono;
                        this.list.ventas[this.indexVenta].Recoger = asientoSel.RecogeEn;
                        this.list.ventas[this.indexVenta].Ruc = asientoSel.RucContacto;
                        this.list.ventas[this.indexVenta].Nacionalidad = asientoSel.Nacionalidad;
                        this.list.ventas[this.indexVenta].Precio = parseFloat(asientoSel.PrecioVenta).toFixed(2);
                        this.list.ventas[this.indexVenta].FlagVenta = asientoSel.FlagVenta;
                        this.list.ventas[this.indexVenta].RazonSocial = asientoSel.RazonSocial;
                        this.list.ventas[this.indexVenta].Direccion = asientoSel.Direccion;
                        this.list.ventas[this.indexVenta].NroVenta = formatoBoletoCompleto(asientoSel.TipoBoleto, asientoSel.Boleto);
                        this.list.ventas[this.indexVenta].IdVenta = asientoSel.IdVenta;
                        this.list.ventas[this.indexVenta].FechaVen = asientoSel.FechaVenta;
                        this.list.ventas[this.indexVenta].Info = asientoSel.Info;
                        this.list.ventas[this.indexVenta].NroSolicitud = asientoSel.NumeSolicitud;
                        this.list.ventas[this.indexVenta].Reintegro = (asientoSel.CodiEsca ? parseFloat(asientoSel.PrecVentaReintegro).toFixed(2) : '');
                        this.list.ventas[this.indexVenta].ObjAcompaniante = asientoSel.ObjAcompaniante;
                        this.list.ventas[this.indexVenta].FechaReservacion = asientoSel.FechaReservacion;
                        this.list.ventas[this.indexVenta].HoraReservacion = asientoSel.HoraReservacion;
                        this.list.ventas[this.indexVenta].Observacion = asientoSel.Observacion;
                        this.list.ventas[this.indexVenta].ValidadorClienteEspecial = asientoSel.Especial;
                        this.list.ventas[this.indexVenta].CodiEmpresa = asientoSel.CodiEmpresa;
                        this.list.ventas[this.indexVenta].Correo = asientoSel.Correo;

                        // Checked opción 'RegistrarNino'
                        if (asientoSel.ObjAcompaniante.Documento)
                            this.list.ventas[this.indexVenta].CheckRegistrarNino = true;

                        this.$nextTick(() => {
                            this.disabledCampoNroAsiento = true;

                            if (this.pickedBusVenta !== 'V' || this.list.ventas[this.indexVenta].FlagVenta !== 'R') {
                                this.disabledCamposTicket = true;
                                this.disabledCamposTicket_Pase = true;
                            }
                        });
                    }
                },
                createElementInList: function () {
                    this.indexVenta = this.list.ventas.length - 1;
                    this.indexVenta++;
                    this.list.ventas.push({
                        IdCliente: 0,
                        CodiTipoDoc: appController.findTipoDocumento('01'),
                        Documento: '',
                        Nombres: '',
                        ApellidoPaterno: '',
                        ApellidoMaterno: '',
                        FechaNac: '',
                        Edad: '',
                        Sexo: null,
                        Telefono: '',
                        Ruc: '',
                        RazonSocial: '',
                        Direccion: '',
                        Recoger: '',
                        Reintegro: '',
                        Observacion: '',
                        Precio: '',
                        PrecioNormal: '',
                        PrecioMin: '',
                        PrecioMax: '',
                        NroAsiento: '',
                        NivelAsiento: 0,
                        NroVenta: '',
                        NroSolicitud: '',
                        FechaVen: moment(new Date, 'DD/MM/YYYY').format("DD/MM/YYYY"),
                        Nacionalidad: '',
                        OldNroAsiento: '',
                        FlagVenta: '',
                        ObjAcompaniante: {
                            CodiTipoDoc: '',
                            Documento: '',
                            NombreCompleto: '',
                            FechaNac: '',
                            Edad: '',
                            Sexo: '',
                            Parentesco: ''
                        },
                        CodiGerente: '',
                        CodiSocio: '',
                        Concepto: '',
                        FechaAbierta: false,
                        IdVenta: 0,
                        FlagPrecioNormal: false,
                        ValidadorDescuento: false,
                        ObservacionDescuento: '',
                        Area: null,
                        BoletoTipoDir: '1',
                        FechaCita: '',
                        Hospital: null,
                        ValidadorDescuentoControl: false,
                        DescuentoTipoDC: '0',
                        ImporteDescuentoDC: '',
                        ImporteDescontadoDC: '',
                        AutorizadoDC: '',
                        ClaveDC: '',
                        ReadonlyPrecio: false,
                        CheckRegistrarNino: false,
                        DisabledRazonSocial: false,
                        FechaReservacion: '',
                        HoraReservacion: '',
                        ValidadorClienteEspecial: false,
                        CodiEmpresa: 0,

                        Correo: ''
                    });

                    if (this.pickedBusVenta === '1') { // Crédito
                        this.list.ventas[this.indexVenta].Ruc = this.objCreditoCliente.Ruc;
                        this.list.ventas[this.indexVenta].RazonSocial = this.objCreditoCliente.RazonSocial;
                        this.list.ventas[this.indexVenta].Direccion = this.objCreditoCliente.Direccion;
                    }
                },
                liberarAsiento: async function (asientoSel, auxBool_Click_Key) { // Click: True | Key: False
                    var _this = this;
                    var auxResponse = false;

                    await APP.rq.axios2.post(APP.base + '/itinerarios/liberarAsiento', { IDS: asientoSel.IDS })
                        .then(res => {
                            if (res.data.EsCorrecto) {

                                asientoSel.IDS = 0;
                                asientoSel.NumeAsiento = 0;

                                if (_this.list.ventas.length <= 1) {
                                    _this.firstAsiento = true;

                                    if (auxBool_Click_Key)
                                        _this.limpiarVenta();
                                }
                                else {
                                    if (auxBool_Click_Key) {
                                        var auxIndex = appVueVenta.list.ventas.findIndex(x => x.NroAsiento === asientoSel.Tipo)
                                        _this.list.ventas.splice(auxIndex, 1);
                                        _this.indexVenta = auxIndex > 0 ? auxIndex - 1 : 0;
                                    }
                                }

                                var nameCookie = 'asientoBloqueado_' + (_this.filtro.CodiProgramacion > 0 ? _this.filtro.CodiProgramacion : _this.filtro.NroViaje) + '_' + _this.filtro.Fecha + '_' + asientoSel.Tipo;
                                var nameCookie02 = '';

                                var readCookie = APP.util.readCookie(nameCookie);
                                if (readCookie)
                                    APP.util.deleteCookie(nameCookie);
                                else {
                                    // Solo cuando exista 'CodiProgramacion', buscar también por 'NroViaje' para un limpiado completo.
                                    if (_this.filtro.CodiProgramacion > 0) {
                                        nameCookie02 = 'asientoBloqueado_' + _this.filtro.NroViaje + '_' + _this.filtro.Fecha + '_' + asientoSel.Tipo;

                                        var readCookie02 = APP.util.readCookie(nameCookie02);
                                        if (readCookie02)
                                            APP.util.deleteCookie(nameCookie02);
                                    }
                                }

                                auxResponse = true;

                                // callSignalR_LiberarAsiento
                                callSignalR_LiberarAsiento(_this.filtro.NroViaje, _this.objTurno.FechaProgramacion, asientoSel.Tipo);
                            }
                            else {
                                if (!res.data.Estado)
                                    APP.msg.error(res.data.Mensaje);
                            }
                        })
                        .catch(APP.rq.axios_handler_error_alert);

                    return auxResponse;
                },
                limpiarAsientosBloqueados: async function () {
                    var auxResponse = true;

                    var arregloIDS = [];
                    var arregloCookie = [];
                    var arregloTipo = [];

                    var partNameCookie = 'asientoBloqueado_' + (this.filtro.CodiProgramacion > 0 ? this.filtro.CodiProgramacion : this.filtro.NroViaje) + '_' + this.filtro.Fecha + '_';
                    var partNameCookie02 = '';

                    // Solo cuando exista 'CodiProgramacion', buscar también por 'NroViaje' para un limpiado completo.
                    if (this.filtro.CodiProgramacion > 0)
                        partNameCookie02 = 'asientoBloqueado_' + this.filtro.NroViaje + '_' + this.filtro.Fecha + '_';

                    for (var objAsiento of this.list.tempList) {
                        if (!isNaN(objAsiento.Tipo)) {
                            var valueCookie = APP.util.readCookie(partNameCookie + objAsiento.Tipo);
                            if (valueCookie) {
                                arregloIDS.push(valueCookie);
                                arregloCookie.push(partNameCookie + objAsiento.Tipo);
                                arregloTipo.push(objAsiento.Tipo);
                            }
                            else {
                                // Solo cuando exista 'CodiProgramacion', buscar también por 'NroViaje' para un limpiado completo.
                                if (this.filtro.CodiProgramacion > 0) {
                                    var valueCookie02 = APP.util.readCookie(partNameCookie02 + objAsiento.Tipo);
                                    if (valueCookie02) {
                                        arregloIDS.push(valueCookie02);
                                        arregloCookie.push(partNameCookie02 + objAsiento.Tipo);
                                        arregloTipo.push(objAsiento.Tipo);
                                    }
                                }
                            }
                        }
                    }

                    if (arregloIDS.length > 0) {
                        var auxValidate = await this.liberarArregloAsientos(arregloIDS);
                        if (auxValidate) {

                            arregloCookie.forEach(function (cookie) {
                                APP.util.deleteCookie(cookie);
                            });

                            //callSignalR_LiberarArregloAsientos
                            callSignalR_LiberarArregloAsientos(this.filtro.NroViaje, this.objTurno.FechaProgramacion, arregloTipo);

                            auxResponse = true;
                        }
                    }

                    return auxResponse;
                },
                liberarArregloAsientos: async function (_arregloIDS) {
                    auxResponse = false;

                    await APP.rq.axios2.post(APP.base + '/itinerarios/liberarArregloAsientos', _arregloIDS)
                        .then(res => {
                            if (res.data.EsCorrecto)
                                auxResponse = true;
                            else {
                                if (res.data.Estado)
                                    APP.msg.warning(res.data.Mensaje);
                                else
                                    APP.msg.error(res.data.Mensaje);
                            }
                        })
                        .catch(APP.rq.axios_handler_error_alert);

                    return auxResponse;
                },
                recorridoSectionFilter: function () {
                    if (!this.filtro.CodiEmpresa)
                        $('#cboEmpresa input[type=search]').focus();
                    else if (!this.filtro.CodiSucursal)
                        $('#cboSucursal input[type=search]').focus();
                    else if (!this.filtro.CodiOrigenBus)
                        $('#cboOrigenBus input[type=search]').focus();
                    else if (!this.filtro.CodiPVOrigenBus)
                        $('#cboPVOrigenBus input[type=search]').focus();
                    else if (!this.filtro.CodiDestinoBus)
                        $('#cboDestinoBus_2 input[type=search]').focus();
                    else if (!this.filtro.Turno)
                        document.getElementById('txtTurno').focus();
                    else if (!this.filtro.CodiServicio)
                        $('#cboServicio input[type=search]').focus();
                    else if (!this.filtro.CodiDestinoPas)
                        $('#cboDestinoPas_2 input[type=search]').focus();
                    else if (!this.filtro.Fecha)
                        document.getElementById('txtFecha_2').focus();
                    else
                        appController.chargeTurnos();
                },
                recorridoVselectTipoDoc: function () {
                    this.$nextTick(function () {
                        if (this.list.ventas[this.indexVenta].CodiTipoDoc.id === '00')
                            this.recorridoSectionVentas();
                        else
                            document.getElementById('txtDocumento').focus();
                    });
                },
                recorridoSectionVentas: function (anulaValidacion) {
                    if (!this.list.ventas[this.indexVenta].CodiTipoDoc) {
                        $('#cboTipoDoc input[type=search]').focus();
                        return;
                    }
                    if (!this.list.ventas[this.indexVenta].Documento) {
                        document.getElementById('txtDocumento').focus();
                        return;
                    }
                    if (!appController.validateTipoDocumento(this.list.ventas[this.indexVenta].CodiTipoDoc.id, this.list.ventas[this.indexVenta].Documento, true)) {
                        document.getElementById('txtDocumento').focus();
                        return;
                    }
                    if (anulaValidacion === 'searchUser')
                        return true;
                    if (!this.list.ventas[this.indexVenta].Nombres) {
                        document.getElementById('txtNombres').focus();
                        return;
                    }
                    if (!this.list.ventas[this.indexVenta].ApellidoPaterno) {
                        document.getElementById('txtApellidoPaterno').focus();
                        return;
                    }
                    if (!this.list.ventas[this.indexVenta].ApellidoMaterno) {
                        document.getElementById('txtApellidoMaterno').focus();
                        return;
                    }
                    if (!this.list.ventas[this.indexVenta].FechaNac) {
                        document.getElementById('txtFechaNac').focus();
                        return;
                    }

                    this.recorridoTxtFechaNac();
                },
                recorridoTxtFechaNac: function (anulaValidacion) {
                    if (!this.list.ventas[this.indexVenta].Sexo) {
                        $('#cboSexo input[type=search]').focus();
                        return;
                    }

                    // Aquí termina el primer flujo, ahora comienza el segundo flujo.

                    if (!this.list.ventas[this.indexVenta].Telefono && anulaValidacion !== 'txtTelefono') {
                        document.getElementById('txtTelefono').focus();
                        return;
                    }
                    if (this.pickedBusVenta !== 'R' && appController.validatePanel('217') === '1'
                        && this.list.ventas[this.indexVenta].Telefono.length < 7) {
                        document.getElementById('txtTelefono').focus();
                        APP.msg.warning('Ingrese teléfono de 7 dígitos como mínimo.');
                        return;
                    }
                    if (!this.list.ventas[this.indexVenta].Correo) {
                        document.getElementById('txtCorreo').focus();
                        return;
                    }
                    if (!this.$formatEmail(this.list.ventas[this.indexVenta].Correo)) {
                        document.getElementById('txtCorreo').focus();
                        APP.msg.warning('Ingrese correo con formato válido: ' + this.$viewEmail());
                        return;
                    }

                    this.recorridoTxtCorreo();
                },
                recorridoTxtCorreo: function () {
                    if (this.list.ventas[this.indexVenta].Correo && !this.$formatEmail(this.list.ventas[this.indexVenta].Correo)) {
                        document.getElementById('txtCorreo').focus();
                        APP.msg.warning('Ingrese correo con formato válido: ' + this.$viewEmail());
                        return;
                    }
                    if (!this.list.ventas[this.indexVenta].Recoger) {
                        document.getElementById('txtRecoger').focus();
                        return;
                    }

                    this.recorridoTxtRecoger();
                },
                recorridoTxtRecoger: function () {
                    if (this.pickedBusVenta === '1' && !this.list.ventas[this.indexVenta].NroSolicitud) {
                        document.getElementById('txtNroSolicitud').focus();
                        return;
                    }
                    if (!this.list.ventas[this.indexVenta].Ruc) {
                        document.getElementById('txtRuc').focus();
                        return;
                    }

                    this.recorridoTxtRuc();
                },
                recorridoTxtRuc: function (anulaValidacion) {
                    if (this.list.ventas[this.indexVenta].Ruc) {
                        if (this.list.ventas[this.indexVenta].Ruc.length !== 11) {
                            document.getElementById('txtRuc').focus();
                            APP.msg.warning('Ingrese RUC de 11 dígitos.');
                            return;
                        }
                        if (!appController.validateAlgoritmoRuc(this.list.ventas[this.indexVenta].Ruc)) {
                            document.getElementById('txtRuc').focus();
                            APP.msg.warning('Ingrese un número de RUC válido.');
                            return;
                        }
                        if (anulaValidacion === 'searchEmpresa')
                            return true;
                        if (!this.list.ventas[this.indexVenta].RazonSocial) {
                            document.getElementById('txtRazonSocial').focus();
                            return;
                        }
                        if (this.list.ventas[this.indexVenta].RazonSocial.length < 3) {
                            document.getElementById('txtRazonSocial').focus();
                            APP.msg.warning('Ingrese una razón social de 3 caracteres como mínimo.');
                            return;
                        }
                        if (!this.list.ventas[this.indexVenta].Direccion) {
                            document.getElementById('txtDireccion').focus();
                            return;
                        }
                    }
                    if (!this.list.ventas[this.indexVenta].Nacionalidad) {
                        document.getElementById('txtNacionalidad').focus();
                        return;
                    }

                    if (this.pickedBusVenta === 'R' && !this.list.ventas[this.indexVenta].FechaReservacion) {
                        document.getElementById('txtFechaReservacion').focus();
                        return;
                    }
                    if (this.pickedBusVenta === 'R' && !this.list.ventas[this.indexVenta].HoraReservacion) {
                        document.getElementById('txtHoraReservacion').focus();
                        return;
                    }

                    if (!this.list.ventas[this.indexVenta].ObjAcompaniante.CodiTipoDoc
                        && !this.list.ventas[this.indexVenta].ObjAcompaniante.Documento) {
                        document.getElementById('chckRegistrarNino').focus();
                        return;
                    }

                    this.recorridoChckRegistrarNino();
                },
                recorridoChckRegistrarNino: function () {
                    if (!this.list.ventas[this.indexVenta].NroAsiento) {
                        document.getElementById('txtNroAsientoVenta').focus();
                        return;
                    }

                    document.getElementById('txtPrecio').focus();
                },
                recorridoTxtPrecio: function () {
                    if (this.list.ventas.length > 0 && this.indexVenta === (this.list.ventas.length - 1))
                        document.getElementById('btnTipoPago').focus();
                    else
                        this.rightSlider();
                },
                navButtonsBottomTicketsVenta: function (_index) {
                    this.indexVenta = _index;
                    this.recorridoSectionVentas();
                },
                recorrerFechaNac: function () {
                    var _this = this;

                    document.getElementById('txtFechaNac').blur();

                    _this.$nextTick(() => {
                        _this.recorridoTxtFechaNac();
                    });
                },
                setDateAndCalcYears: function () {
                    this.list.ventas[this.indexVenta].FechaNac = this.$getValueDateTimePicker(event, false);

                    if (this.list.ventas[this.indexVenta].FechaNac)
                        this.list.ventas[this.indexVenta].Edad = appController.calculaEdad(this.list.ventas[this.indexVenta].FechaNac);
                    else
                        this.list.ventas[this.indexVenta].Edad = '';
                },
                searchUser: async function () {
                    var _this = this;

                    // Validaciones
                    var axuValidate = _this.recorridoSectionVentas('searchUser');
                    if (!axuValidate)
                        return;

                    // Valida 'Raya'
                    if (_this.list.ventas[_this.indexVenta].CodiTipoDoc.id === '00') {
                        _this.$nextTick(() => {
                            _this.recorridoSectionVentas();
                        });
                        return;
                    }

                    // Valida 'DocumentoRepetido'
                    if (_this.pickedBusVenta !== 'R' && _this.pickedBusVenta !== 'FA' && appController.validatePanel('107') === '1') {
                        var resValidaDocumentoRepetido = _this.validaDocumentoRepetido(_this.list.ventas[_this.indexVenta].CodiTipoDoc.id, _this.list.ventas[_this.indexVenta].Documento, _this.list.ventas[_this.indexVenta].NroAsiento);
                        if (!resValidaDocumentoRepetido)
                            return;
                    }

                    await APP.rq.axios.get(APP.base + '/itinerarios/consultar-usuario' + APP.util.getQueryParamByObject({
                        tipoDoc: _this.list.ventas[_this.indexVenta].CodiTipoDoc.id,
                        numeroDoc: _this.list.ventas[_this.indexVenta].Documento
                    }), { timeout: 5000 })
                        .then(res => {
                            if (res.data.Estado) {

                                // Valida 'SetRuc'
                                var validatorSetRuc = false;
                                if (appController.validatePanel('13') === '1')
                                    validatorSetRuc = true;

                                // Valida editar 'RazonSocial'
                                if (appController.validatePanel('63') === '1' && res.data.Valor.RazonSocial)
                                    _this.list.ventas[_this.indexVenta].DisabledRazonSocial = true;
                                else
                                    _this.list.ventas[_this.indexVenta].DisabledRazonSocial = false;

                                switch (_this.pickedBusVenta) {
                                    case '7': // Pase de cortesía
                                        {
                                            if (res.data.Valor.IdCliente > 0) {
                                                _this.list.ventas[_this.indexVenta].IdCliente = res.data.Valor.IdCliente;
                                                _this.list.ventas[_this.indexVenta].FechaNac = res.data.Valor.FechaNacimiento;
                                                _this.list.ventas[_this.indexVenta].Edad = appController.calculaEdad(_this.list.ventas[_this.indexVenta].FechaNac);
                                                _this.list.ventas[_this.indexVenta].Telefono = res.data.Valor.Telefono;
                                                _this.list.ventas[_this.indexVenta].ValidadorClienteEspecial = (res.data.Valor.Especial === '1' ? true : false);

                                                _this.list.ventas[_this.indexVenta].Correo = res.data.Valor.Correo;

                                                if (validatorSetRuc) {
                                                    _this.list.ventas[_this.indexVenta].Ruc = res.data.Valor.RucContacto;
                                                    _this.list.ventas[_this.indexVenta].RazonSocial = res.data.Valor.RazonSocial;
                                                    _this.list.ventas[_this.indexVenta].Direccion = res.data.Valor.Direccion;
                                                }
                                            }
                                        };
                                        break;
                                    default:
                                        {
                                            if (res.data.Valor.IdCliente > 0) {
                                                _this.list.ventas[_this.indexVenta].IdCliente = res.data.Valor.IdCliente;
                                                _this.list.ventas[_this.indexVenta].Nombres = res.data.Valor.NombreCliente;
                                                _this.list.ventas[_this.indexVenta].ApellidoPaterno = res.data.Valor.ApellidoPaterno;
                                                _this.list.ventas[_this.indexVenta].ApellidoMaterno = res.data.Valor.ApellidoMaterno;
                                                _this.list.ventas[_this.indexVenta].FechaNac = res.data.Valor.FechaNacimiento;
                                                _this.list.ventas[_this.indexVenta].Edad = appController.calculaEdad(_this.list.ventas[_this.indexVenta].FechaNac);
                                                _this.list.ventas[_this.indexVenta].Sexo = _this.list.sexos.find(x => x.id === res.data.Valor.Sexo);
                                                _this.list.ventas[_this.indexVenta].Telefono = res.data.Valor.Telefono;
                                                _this.list.ventas[_this.indexVenta].ValidadorClienteEspecial = (res.data.Valor.Especial === '1' ? true : false);

                                                _this.list.ventas[_this.indexVenta].Correo = res.data.Valor.Correo;

                                                if (_this.pickedBusVenta !== '1') {
                                                    if (validatorSetRuc) {
                                                        _this.list.ventas[_this.indexVenta].Ruc = res.data.Valor.RucContacto;
                                                        _this.list.ventas[_this.indexVenta].RazonSocial = res.data.Valor.RazonSocial;
                                                        _this.list.ventas[_this.indexVenta].Direccion = res.data.Valor.Direccion;
                                                    }
                                                }
                                            }
                                            else {
                                                if (res.data.Valor.NombreCliente || res.data.Valor.ApellidoPaterno || res.data.Valor.ApellidoPaterno) {
                                                    _this.list.ventas[_this.indexVenta].Nombres = res.data.Valor.NombreCliente;
                                                    _this.list.ventas[_this.indexVenta].ApellidoPaterno = res.data.Valor.ApellidoPaterno;
                                                    _this.list.ventas[_this.indexVenta].ApellidoMaterno = res.data.Valor.ApellidoMaterno;
                                                }
                                                else {
                                                    _this.list.ventas[_this.indexVenta].Nombres = '';
                                                    _this.list.ventas[_this.indexVenta].ApellidoPaterno = '';
                                                    _this.list.ventas[_this.indexVenta].ApellidoMaterno = '';
                                                }

                                                _this.list.ventas[_this.indexVenta].IdCliente = 0;
                                                _this.list.ventas[_this.indexVenta].FechaNac = '';
                                                _this.list.ventas[_this.indexVenta].Edad = '';
                                                _this.list.ventas[_this.indexVenta].Sexo = null;
                                                _this.list.ventas[_this.indexVenta].Telefono = '';
                                                _this.list.ventas[_this.indexVenta].ValidadorClienteEspecial = false;

                                                _this.list.ventas[_this.indexVenta].Correo = '';

                                                if (_this.pickedBusVenta !== '1') {
                                                    _this.list.ventas[_this.indexVenta].Ruc = '';
                                                    _this.list.ventas[_this.indexVenta].RazonSocial = '';
                                                    _this.list.ventas[_this.indexVenta].Direccion = '';
                                                }
                                            }
                                        };
                                }

                                if (!res.data.EsCorrecto)
                                    APP.msg.warning(res.data.Mensaje);
                            }
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(err => {
                            if (err.code === "ECONNABORTED") {
                                APP.msg.warning('No se pudo cargar los datos del pasajero.');
                                _this.$refs.refNombres.focus();
                            }
                            else
                                APP.rq.axios_handler_error_alert;
                        });

                    _this.$nextTick(() => {
                        _this.recorridoSectionVentas();
                    });
                },
                validaDocumentoRepetido: function (_TipoDocumento, _NumeroDocumento, _NroAsiento) {
                    var auxResponse = true;

                    for (var objAsiento of this.list.tempList) {
                        if (!isNaN(objAsiento.Tipo) && objAsiento.FlagVenta !== 'R') {
                            if (objAsiento.TipoDocumento === _TipoDocumento && objAsiento.NumeroDocumento === _NumeroDocumento) {
                                APP.msg.warning('Documento usado en el asiento ' + objAsiento.Tipo + ', ingrese otro.');
                                auxResponse = false;
                                return auxResponse;
                            }
                        }
                    }

                    for (var objAsiento of this.list.ventas) {
                        if (objAsiento.NroAsiento !== _NroAsiento) {
                            if (objAsiento.CodiTipoDoc.id === _TipoDocumento && objAsiento.Documento === _NumeroDocumento) {
                                APP.msg.warning('Documento usado en el asiento ' + objAsiento.NroAsiento + ', ingrese otro.');
                                auxResponse = false;
                                return auxResponse;
                            }
                        }
                    }

                    return auxResponse;
                },
                searchEmpresa: async function () {
                    var _this = this;

                    if (_this.list.ventas[_this.indexVenta].Ruc) {
                        // Validaciones
                        var auxValidate = _this.recorridoTxtRuc('searchEmpresa');
                        if (!auxValidate)
                            return;

                        await APP.rq.axios.get(APP.base + '/itinerarios/consultar-empresa' + APP.util.getQueryParamByObject({
                            rucContacto: _this.list.ventas[_this.indexVenta].Ruc
                        }), { timeout: 5000 })
                            .then(res => {
                                if (res.data.Estado) {

                                    // Valida editar 'RazonSocial'
                                    if (appController.validatePanel('63') === '1' && res.data.Valor.RazonSocial)
                                        _this.list.ventas[_this.indexVenta].DisabledRazonSocial = true;
                                    else
                                        _this.list.ventas[_this.indexVenta].DisabledRazonSocial = false;

                                    _this.list.ventas[_this.indexVenta].RazonSocial = res.data.Valor.RazonSocial;
                                    _this.list.ventas[_this.indexVenta].Direccion = res.data.Valor.Direccion;

                                    if (!res.data.EsCorrecto)
                                        APP.msg.warning(res.data.Mensaje);
                                }
                                else
                                    APP.msg.error(res.data.Mensaje);
                            })
                            .catch(err => {
                                if (err.code === "ECONNABORTED") {
                                    APP.msg.warning('No se pudo cargar los datos de la empresa.');
                                    if (_this.pickedBusVenta !== '1') // Crédito
                                        _this.$refs.refRazonSocial.focus();
                                    else
                                        _this.$refs.refDireccion.focus();
                                }
                                else
                                    APP.rq.axios_handler_error_alert;
                            });
                    }

                    _this.$nextTick(() => {
                        _this.recorridoTxtRuc();
                    });
                },
                validateAlgoritmoRuc: function (_Ruc) {
                    var auxValidate = false;
                    var tmpRuc = _.cloneDeep(_Ruc);

                    if (_Ruc.substring(0, 2) === '10' || _Ruc.substring(0, 2) === '20' ||
                        _Ruc.substring(0, 2) === '15' || _Ruc.substring(0, 2) === '16' || _Ruc.substring(0, 2) === '17') {

                        for (var suma = -(_Ruc % 10 < 2), i = 0; i < 11; i++ , _Ruc = _Ruc / 10 | 0) {
                            suma += (_Ruc % 10) * (i % 7 + (i / 7 | 0) + 1);
                        }

                        if (suma % 11 === 0)
                            auxValidate = true;
                        else {
                            if (tmpRuc.charAt(10) === '1') {
                                var auxResto = suma % 11;
                                var auxComplemento = 11 - auxResto;
                                if (String(auxComplemento) === tmpRuc.charAt(10))
                                    auxValidate = true;
                            }
                        }
                    }

                    return auxValidate;
                },
                consultaReniec: function () {
                    var _this = this;

                    // Validaciones
                    if (!_this.list.ventas[_this.indexVenta].CodiTipoDoc) {
                        $('#cboTipoDoc input[type=search]').focus();
                        APP.msg.warning('Seleccione tipo de documento.');
                        return;
                    }
                    else if (_this.list.ventas[_this.indexVenta].CodiTipoDoc.id !== '01') {
                        $('#cboTipoDoc input[type=search]').focus();
                        APP.msg.warning('Seleccione la opción DNI.');
                        return;
                    }
                    else if (_this.list.ventas[_this.indexVenta].Documento.length < 8) {
                        document.getElementById('txtDocumento').focus();
                        APP.msg.warning('Ingrese DNI de 8 caracteres como mínimo.');
                        return;
                    }

                    APP.rq.axios.get(APP.base + '/itinerarios/consulta-reniec' + APP.util.getQueryParamByObject({
                        numeroDoc: _this.list.ventas[_this.indexVenta].Documento
                    }), { timeout: 5000 })
                        .then(res => {
                            if (res.data.EsCorrecto) {
                                _this.list.ventas[_this.indexVenta].Nombres = res.data.Valor.Nombres;
                                _this.list.ventas[_this.indexVenta].ApellidoPaterno = res.data.Valor.ApellidoPaterno;
                                _this.list.ventas[_this.indexVenta].ApellidoMaterno = res.data.Valor.ApellidoMaterno;
                            }
                            else {
                                if (res.data.Estado)
                                    APP.msg.warning(res.data.Mensaje);
                                else
                                    APP.msg.error(res.data.Mensaje);
                            }
                        })
                        .catch(err => {
                            if (err.code === "ECONNABORTED")
                                APP.msg.warning('No se pudo consultar a la RENIEC.');
                            else
                                APP.rq.axios_handler_error_alert;
                        });
                },
                consultaSunat: function () {
                    var _this = this;

                    // Validaciones
                    var auxValidate = _this.recorridoTxtRuc('searchEmpresa');
                    if (!auxValidate)
                        return;

                    APP.rq.axios.get(APP.base + '/itinerarios/consulta-sunat' + APP.util.getQueryParamByObject({
                        rucContacto: _this.list.ventas[_this.indexVenta].Ruc
                    }), { timeout: 5000 })
                        .then(res => {
                            if (res.data.EsCorrecto) {

                                // Valida editar 'RazonSocial'
                                if (appController.validatePanel('63') === '1' && res.data.Valor.RazonSocial)
                                    _this.list.ventas[_this.indexVenta].DisabledRazonSocial = true;
                                else
                                    _this.list.ventas[_this.indexVenta].DisabledRazonSocial = false;

                                if (!_this.list.ventas[_this.indexVenta].DisabledRazonSocial)
                                    _this.list.ventas[_this.indexVenta].RazonSocial = res.data.Valor.RazonSocial;

                                _this.list.ventas[_this.indexVenta].Direccion = res.data.Valor.Direccion;
                            }
                            else {
                                if (res.data.Estado)
                                    APP.msg.warning(res.data.Mensaje);
                                else
                                    APP.msg.error(res.data.Mensaje);
                            }
                        })
                        .catch(err => {
                            if (err.code === "ECONNABORTED")
                                APP.msg.warning('No se pudo consultar a la SUNAT.');
                            else
                                APP.rq.axios_handler_error_alert;
                        });
                },
                passSectionVentas: function (_nroAsiento, _precioNormal, _nivelAsiento, _precioMin, _precioMax) {
                    this.list.ventas[this.indexVenta].Precio = parseFloat(_precioNormal).toFixed(2);
                    this.list.ventas[this.indexVenta].PrecioNormal = _precioNormal;
                    this.list.ventas[this.indexVenta].PrecioMin = _precioMin;
                    this.list.ventas[this.indexVenta].PrecioMax = _precioMax;
                    this.list.ventas[this.indexVenta].NroAsiento = _nroAsiento;
                    this.list.ventas[this.indexVenta].NivelAsiento = _nivelAsiento;
                    this.list.ventas[this.indexVenta].NroVenta = this.Correlativo;
                },
                getCorrelativo: async function (_CodiEmpresa, _PickedBusVenta) {
                    var auxValidator = false;

                    var input = {};
                    input.CodiEmpresa = _CodiEmpresa;
                    input.FlagVenta = _PickedBusVenta;
                    await APP.rq.axios2.post(APP.base + '/itinerarios/busca-correlativo', input)
                        .then(res => {
                            if (res.data.Estado) {
                                auxValidator = res.data.Estado;
                                this.TipoTerminalElectronico = res.data.Valor.TipoTerminalElectronico;
                                this.TipoImpresora = res.data.Valor.TipoImpresora;

                                switch (_PickedBusVenta) {
                                    case '7':
                                        {
                                            this.CorrelativoPaseBoleta = res.data.Valor.CorrelativoPaseBoleta;
                                            this.CorrelativoPaseFactura = res.data.Valor.CorrelativoPaseFactura;

                                            switch (this.TipoTerminalElectronico) {
                                                case 'M':
                                                    {
                                                        if (this.CorrelativoPaseBoleta === '0000-00000000')
                                                            this.Correlativo = _.cloneDeep(this.CorrelativoVentaBoleta);
                                                        else
                                                            this.Correlativo = _.cloneDeep(this.CorrelativoPaseBoleta);
                                                    }
                                                    break;
                                                case 'E':
                                                    this.Correlativo = _.cloneDeep(this.CorrelativoPaseBoleta);
                                                    break;
                                            }
                                        };
                                        break;
                                    default:
                                        this.CorrelativoVentaBoleta = res.data.Valor.CorrelativoVentaBoleta;
                                        this.CorrelativoVentaFactura = res.data.Valor.CorrelativoVentaFactura;
                                        this.CorrelativoCredito = res.data.Valor.CorrelativoCredito;

                                        this.Correlativo = _.cloneDeep(this.CorrelativoVentaBoleta);
                                }

                                if (!res.data.EsCorrecto)
                                    APP.msg.warning(res.data.Mensaje);
                            }
                            else {
                                this.CorrelativoVentaBoleta = '';
                                this.CorrelativoVentaFactura = '';
                                this.CorrelativoPaseBoleta = '';
                                this.CorrelativoPaseFactura = '';
                                this.CorrelativoCredito = '';
                                this.TipoTerminalElectronico = '';
                                this.TipoImpresora = '';

                                APP.msg.warning(res.data.Mensaje);
                            }
                        })
                        .catch(APP.rq.axios_handler_error_alert);

                    return auxValidator;
                },
                saveUser: function () {
                    var _this = this;
                    var listado = [];

                    for (const objVenta of _this.list.ventas) {
                        if (objVenta.CodiTipoDoc.id !== '00') { // Valida 'Raya'
                            var input = {};
                            input.IdCliente = objVenta.IdCliente;
                            input.TipoDoc = objVenta.CodiTipoDoc.id;
                            input.NumeroDoc = objVenta.Documento;
                            input.NombreCliente = objVenta.Nombres;
                            input.ApellidoPaterno = objVenta.ApellidoPaterno;
                            input.ApellidoMaterno = objVenta.ApellidoMaterno;
                            input.FechaNacimiento = objVenta.FechaNac;
                            input.Edad = objVenta.Edad;
                            input.Telefono = objVenta.Telefono;
                            input.Sexo = objVenta.Sexo.id;
                            input.RucContacto = objVenta.Ruc;
                            input.RazonSocial = objVenta.RazonSocial;
                            input.Direccion = objVenta.Direccion;

                            input.Correo = objVenta.Correo;

                            listado.push(input);
                        }
                    };

                    if (listado.length <= 0)
                        return;

                    APP.rq.axios2.post(APP.base + '/itinerarios/grabar-pasajero', listado)
                        .then(res => {
                            if (!res.data.Estado)
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                bgcVentaBus: function (FechaVenta, Color, NumeAsiento, IDS, FlagVenta) {
                    if (FechaVenta) {
                        switch (FlagVenta) {
                            case 'R':
                                return { 'background-color': `${APP.ventas.colorReserva}` };
                            case '7':
                                return { 'background-color': `${APP.ventas.colorPaseCortesia}` };
                            default:
                                return { 'background-color': `${Color}` };
                        }
                    }
                    else {
                        if (NumeAsiento > 0) {
                            if (IDS === 0)
                                return { 'background-color': `${APP.ventas.colorBloqueoExterno}` };
                            else
                                return { 'background-color': `${APP.ventas.colorBloqueoInterno}` };
                        }
                        else
                            return { 'background-color': `${Color}` };
                    }
                },
                iconVentaBus: function (Sexo, Edad) {
                    if (Edad < 18)
                        return Sexo === 'F' ? ImagePath + '/wwwroot/plugins/images/users/MUJER.png' : ImagePath + '/wwwroot/plugins/images/users/NINO.png';
                    else
                        return Sexo === 'F' ? ImagePath + '/wwwroot/plugins/images/users/MUJER.png' : ImagePath + '/wwwroot/plugins/images/users/HOMBRE.png';
                },
                showNombrePasajero: function (FechaVenta, Nombres, ApellidoPaterno, ApellidoMaterno) {
                    if (FechaVenta)
                        return `${Nombres} ${ApellidoPaterno} ${ApellidoMaterno}`;
                },
                nextStep: async function (code) {
                    var _this = this;
                    _this.showPlano = false;

                    if (!$("#panelWrapperV").hasClass("in")) {
                        $('#btnDesplegar').click();
                        _this.showTextTurnos = false;
                    }

                    switch (code) {
                        case 1:
                            $('#cboSucursal input[type=search]').focus();
                            break;
                        case 2:
                            $('#cboOrigenBus input[type=search]').focus();
                            break;
                        case 3:
                            {
                                _this.$nextTick(() => {
                                    $('#cboPVOrigenBus input[type=search]').focus();
                                });
                            };
                            break;
                        case 4:
                            $('#cboDestinoBus_2 input[type=search]').focus();
                            break;
                        case 5:
                            document.getElementById('txtTurno').focus();
                            break;
                        case 6:
                            {
                                document.getElementById('txtTurno').blur();

                                _this.$nextTick(() => {
                                    $('#cboServicio input[type=search]').focus();
                                });
                            };
                            break;
                        case 7:
                            {
                                // Actualizamos 'lista.destinosPas'
                                await _this.obtenerNewListaDestinosPas(
                                    _this.filtro.CodiEmpresa.id, _this.filtro.CodiSucursal.id, _this.filtro.CodiOrigenBus.id, _this.filtro.CodiPVOrigenBus.id,
                                    _this.filtro.CodiDestinoBus.id, _this.filtro.Turno, _this.filtro.CodiServicio.id, _this.filtro.NroViaje
                                );

                                _this.$nextTick(() => {
                                    $('#cboDestinoPas_2 input[type=search]').focus();
                                });
                            };
                            break;
                        case 8:
                            document.getElementById('txtFecha_2').focus();
                            break;
                        case 9:
                            {
                                document.getElementById('txtFecha_2').blur();

                                if (!_this.processing) {
                                    _this.$nextTick(() => {
                                        _this.recorridoSectionFilter();
                                    });
                                }
                            };
                            break;
                        default:
                            {
                                document.getElementById('btnActualizar').blur();

                                // Seteo el 'Destino Pasajero' por el valor del 'Destino Bus'
                                _this.filtro.CodiDestinoPas = _.cloneDeep(_this.filtro.CodiDestinoBus);

                                if (!_this.processing)
                                    _this.recorridoSectionFilter();
                            };
                    }
                },
                obtenerNewListaDestinosPas: async function (_CodiEmpresa, _CodiOrigenPas, _CodiOrigenBus, _CodiPuntoVentaBus, _CodiDestinoBus, _Turno, _CodiServicio, _NroViaje) {
                    var listaDestinosRuta = [];

                    var resGetNewListaDestinosPas = await this.getNewListaDestinosPas(_CodiEmpresa, _CodiOrigenPas, _CodiOrigenBus, _CodiPuntoVentaBus, _CodiDestinoBus, _Turno, _CodiServicio, _NroViaje);
                    if (resGetNewListaDestinosPas) {
                        if (resGetNewListaDestinosPas.EsCorrecto)
                            listaDestinosRuta = resGetNewListaDestinosPas.Valor;
                        else {
                            if (resGetNewListaDestinosPas.Estado) {
                                var tmpObjFiltro = {};
                                tmpObjFiltro.CodiEmpresa = _CodiEmpresa;
                                tmpObjFiltro.CodiOrigenPas = _CodiOrigenPas;
                                tmpObjFiltro.CodiOrigenBus = _CodiOrigenBus;
                                tmpObjFiltro.CodiPuntoVentaBus = _CodiPuntoVentaBus;
                                tmpObjFiltro.CodiDestinoBus = _CodiDestinoBus;
                                tmpObjFiltro.Turno = _Turno;
                                tmpObjFiltro.CodiServicio = _CodiServicio;
                                await APP.msg.infoNuevoNRoViaje(
                                    ''
                                    , 'No hay horario disponible para este destino, según ruta: '
                                    , tmpObjFiltro);
                            }
                        }
                    }

                    if (listaDestinosRuta.length <= 0)
                        this.filtro.CodiDestinoPas = null;

                    this.list.destinosPas = _.cloneDeep(listaDestinosRuta);
                },
                getNewListaDestinosPas: async function (_CodiEmpresa, _CodiOrigenPas, _CodiOrigenBus, _CodiPuntoVentaBus, _CodiDestinoBus, _Turno, _CodiServicio, _NroViaje) {
                    var auxResponse = null;

                    await APP.rq.axios2.post(APP.base + '/itinerarios/getNewListaDestinosPas', {
                        CodiEmpresa: _CodiEmpresa,
                        CodiOrigenPas: _CodiOrigenPas,
                        CodiOrigenBus: _CodiOrigenBus,
                        CodiPuntoVentaBus: _CodiPuntoVentaBus,
                        CodiDestinoBus: _CodiDestinoBus,
                        Turno: _Turno,
                        CodiServicio: _CodiServicio,
                        NroViaje: _NroViaje
                    })
                        .then(res => {
                            if (res.data.Estado)
                                auxResponse = res.data;
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);

                    return auxResponse;
                },
                showTipoPago: async function () {
                    // Copiar datos del último Ticket para todos los demás.
                    switch (this.pickedBusVenta) {
                        case 'R':
                            {
                                if (appController.validatePanel('104') === '1' && appController.validatePanelNivel(1, Usuario.Nivel) === '1') {
                                    var auxLength = this.list.ventas.length;
                                    var validatorDocumento = _.findIndex(this.list.ventas, o => { return o.Documento.length >= 8; });

                                    if (auxLength > 1 && validatorDocumento === (auxLength - 1)) {
                                        if (await APP.msg.confirm(
                                            'Copiar datos',
                                            '¿Desea copiar los datos de este ticket para todos los demás?')) {

                                            for (var i = auxLength - 2; i >= 0; i--) {
                                                this.list.ventas[i].ApellidoMaterno = _.cloneDeep(this.list.ventas[auxLength - 1].ApellidoMaterno);
                                                this.list.ventas[i].ApellidoPaterno = _.cloneDeep(this.list.ventas[auxLength - 1].ApellidoPaterno);
                                                this.list.ventas[i].CodiTipoDoc = _.cloneDeep(this.list.ventas[auxLength - 1].CodiTipoDoc);
                                                this.list.ventas[i].Direccion = _.cloneDeep(this.list.ventas[auxLength - 1].Direccion);
                                                this.list.ventas[i].Documento = _.cloneDeep(this.list.ventas[auxLength - 1].Documento);
                                                this.list.ventas[i].Edad = _.cloneDeep(this.list.ventas[auxLength - 1].Edad);
                                                this.list.ventas[i].FechaNac = _.cloneDeep(this.list.ventas[auxLength - 1].FechaNac);
                                                this.list.ventas[i].IdCliente = _.cloneDeep(this.list.ventas[auxLength - 1].IdCliente);
                                                this.list.ventas[i].Nacionalidad = _.cloneDeep(this.list.ventas[auxLength - 1].Nacionalidad);
                                                this.list.ventas[i].Nombres = _.cloneDeep(this.list.ventas[auxLength - 1].Nombres);
                                                this.list.ventas[i].RazonSocial = _.cloneDeep(this.list.ventas[auxLength - 1].RazonSocial);
                                                this.list.ventas[i].Recoger = _.cloneDeep(this.list.ventas[auxLength - 1].Recoger);
                                                this.list.ventas[i].Ruc = _.cloneDeep(this.list.ventas[auxLength - 1].Ruc);
                                                this.list.ventas[i].Sexo = _.cloneDeep(this.list.ventas[auxLength - 1].Sexo);
                                                this.list.ventas[i].Telefono = _.cloneDeep(this.list.ventas[auxLength - 1].Telefono);
                                                this.list.ventas[i].Precio = _.cloneDeep(this.list.ventas[auxLength - 1].Precio);
                                                this.list.ventas[i].FechaReservacion = _.cloneDeep(this.list.ventas[auxLength - 1].FechaReservacion);
                                                this.list.ventas[i].HoraReservacion = _.cloneDeep(this.list.ventas[auxLength - 1].HoraReservacion);
                                                this.list.ventas[i].ValidadorClienteEspecial = _.cloneDeep(this.list.ventas[auxLength - 1].ValidadorClienteEspecial);

                                                this.list.ventas[i].Correo = _.cloneDeep(this.list.ventas[auxLength - 1].Correo);
                                            }
                                        }
                                    }
                                }
                            };
                            break;
                    }

                    if (!this.errorsInTicketsVenta())
                        return;

                    document.getElementById('btnTipoPago').disabled = true;

                    if (this.pickedBusVenta !== '1')
                        this.saveUser();

                    var input = {};
                    input.CodiEmpresa = this.filtro.CodiEmpresa.id;
                    input.CodiOrigen = this.filtro.CodiSucursal.id;
                    input.CodiDestino = this.filtro.CodiDestinoPas.id;
                    input.CodiProgramacion = this.filtro.CodiProgramacion;
                    input.FlagVenta = this.pickedBusVenta;
                    input.FechaViaje = this.filtro.Fecha;
                    input.HoraViaje = this.filtro.Turno;
                    input.CodiServicio = this.filtro.CodiServicio.id;
                    input.NomDestino = this.filtro.CodiDestinoPas.label;
                    input.NomServicio = this.filtro.CodiServicio.label;
                    input.NomOrigen = this.filtro.CodiSucursal.label;
                    input.NroViaje = this.filtro.NroViaje;
                    input.FechaProgramacion = this.objTurno.FechaProgramacion;
                    input.HoraProgramacion = this.objTurno.HoraProgramacion;
                    input.CodiBus = this.objPlano.CodiBus;
                    input.CodiSucursal = this.filtro.CodiOrigenBus.id;
                    input.CodiRuta = this.filtro.CodiDestinoBus.id;
                    input.IdContrato = this.objCreditoCliente.idContrato;
                    input.IdPrecio = this.objCreditoCliente.IdPrecio;
                    input.IdRuc = this.objCreditoCliente.IdRuc;
                    input.NomEmpresa = this.filtro.CodiEmpresa.label;
                    input.RucEmpresa = this.filtro.CodiEmpresa.Ruc;
                    input.DireccionEmpresa = this.filtro.CodiEmpresa.Direccion;
                    input.ElectronicoEmpresa = this.filtro.CodiEmpresa.Electronico;
                    input.TipoTerminalElectronico = this.TipoTerminalElectronico;
                    input.TipoImpresora = this.TipoImpresora;

                    appController.showTipoPago(this.list.embarques, this.list.arribos, input, this.list.ventas);
                },
                errorsInTicketsVenta: function () {
                    var auxValidate = true;

                    for (i = 0; i < this.list.ventas.length; i++) {

                        if (!this.list.ventas[i].NroAsiento) {
                            this.indexVenta = i;
                            APP.msg.warning('Ingrese número de asiento.');

                            this.$nextTick(() => {
                                document.getElementById('txtNroAsientoVenta').focus();
                            });
                            return auxValidate = false;
                        }

                        if (!this.list.ventas[i].CodiTipoDoc) {
                            this.indexVenta = i;
                            APP.msg.warning('Seleccione tipo de documento.');

                            this.$nextTick(() => {
                                $('#cboTipoDoc input[type=search]').focus();
                            });
                            return auxValidate = false;
                        }

                        if (!appController.validateTipoDocumento(this.list.ventas[i].CodiTipoDoc.id, this.list.ventas[i].Documento, true)) {
                            this.indexVenta = i;

                            this.$nextTick(() => {
                                document.getElementById('txtDocumento').focus();
                            });
                            return auxValidate = false;
                        }

                        if (!this.list.ventas[i].Nombres) {
                            this.indexVenta = i;
                            APP.msg.warning('Ingrese nombres.');

                            this.$nextTick(() => {
                                document.getElementById('txtNombres').focus();
                            });
                            return auxValidate = false;
                        }

                        if (!this.list.ventas[i].ApellidoPaterno) {
                            this.indexVenta = i;
                            APP.msg.warning('Ingrese apellido paterno.');

                            this.$nextTick(() => {
                                document.getElementById('txtApellidoPaterno').focus();
                            });
                            return auxValidate = false;
                        }

                        if (!this.list.ventas[i].ApellidoMaterno) {
                            this.indexVenta = i;
                            APP.msg.warning('Ingrese apellido materno.');

                            this.$nextTick(() => {
                                document.getElementById('txtApellidoMaterno').focus();
                            });
                            return auxValidate = false;
                        }

                        if (!this.list.ventas[i].FechaNac || !this.list.ventas[i].Edad || this.list.ventas[i].Edad == '0') {
                            this.list.ventas[i].FechaNac = moment().format('DD/MM/YYYY');
                            this.list.ventas[i].Edad = appController.calculaEdad(this.list.ventas[i].FechaNac);
                        }

                        if (!this.list.ventas[i].Sexo) {
                            this.indexVenta = i;
                            APP.msg.warning('Seleccione sexo.');

                            this.$nextTick(() => {
                                $('#cboSexo input[type=search]').focus();
                            });
                            return auxValidate = false;
                        }

                        if (this.pickedBusVenta !== 'R' && appController.validatePanel('217') === '1' && this.list.ventas[i].Telefono.length < 7) {
                            this.indexVenta = i;
                            APP.msg.warning('Ingrese teléfono de 7 dígitos como mínimo.');

                            this.$nextTick(() => {
                                document.getElementById('txtTelefono').focus();
                            });
                            return auxValidate = false;
                        }

                        if (this.list.ventas[i].Correo && !this.$formatEmail(this.list.ventas[i].Correo)) {
                            this.indexVenta = i;
                            APP.msg.warning('Ingrese correo con formato válido: ' + this.$viewEmail());

                            this.$nextTick(() => {
                                document.getElementById('txtCorreo').focus();
                            });
                            return auxValidate = false;
                        }

                        if (this.pickedBusVenta === '1' && !this.list.ventas[i].NroSolicitud) {
                            APP.msg.warning('Ingrese número de solicitud.');
                            this.indexVenta = i;

                            this.$nextTick(() => {
                                document.getElementById('txtNroSolicitud').focus();
                            });
                            return auxValidate = false;
                        }

                        if (this.list.ventas[i].Ruc) {
                            if (this.list.ventas[i].Ruc.length !== 11) {
                                this.indexVenta = i;
                                APP.msg.warning('Ingrese RUC de 11 dígitos.');

                                this.$nextTick(() => {
                                    document.getElementById('txtRuc').focus();
                                });
                                return auxValidate = false;
                            }

                            if (!appController.validateAlgoritmoRuc(this.list.ventas[i].Ruc)) {
                                this.indexVenta = i;
                                APP.msg.warning('Ingrese un número de RUC válido.');

                                this.$nextTick(() => {
                                    document.getElementById('txtRuc').focus();
                                });
                                return auxValidate = false;
                            }

                            if (this.list.ventas[i].RazonSocial.length < 3) {
                                this.indexVenta = i;
                                APP.msg.warning('Ingrese una razón social de 3 caracteres como mínimo.');

                                this.$nextTick(() => {
                                    document.getElementById('txtRazonSocial').focus();
                                });
                                return auxValidate = false;
                            }

                            if (!this.list.ventas[i].Direccion) {
                                this.indexVenta = i;
                                APP.msg.warning('Ingrese dirección fiscal.');

                                this.$nextTick(() => {
                                    document.getElementById('txtDireccion').focus();
                                });
                                return auxValidate = false;
                            }
                        }

                        if (!this.list.ventas[i].Nacionalidad) {
                            this.indexVenta = i;
                            APP.msg.warning('Ingrese nacionalidad.');

                            this.$nextTick(() => {
                                document.getElementById('txtNacionalidad').focus();
                            });
                            return auxValidate = false;
                        }

                        if (this.pickedBusVenta === 'R') {
                            if (!this.list.ventas[i].FechaReservacion) {
                                this.indexVenta = i;
                                APP.msg.warning('Ingrese fecha de confirmación.');

                                this.$nextTick(() => {
                                    document.getElementById('txtFechaReservacion').focus();
                                });
                                return auxValidate = false;
                            }

                            if (!this.list.ventas[i].HoraReservacion) {
                                this.indexVenta = i;
                                APP.msg.warning('Ingrese hora de confirmación.');

                                this.$nextTick(() => {
                                    document.getElementById('txtHoraReservacion').focus();
                                });
                                return auxValidate = false;
                            }

                            if (moment(this.list.ventas[i].FechaReservacion, 'DD/MM/YYYY').isAfter(moment(this.filtro.Fecha, 'DD/MM/YYYY'))) {
                                this.indexVenta = i;
                                APP.msg.warning('La fecha de confirmación debe ser menor o igual a la fecha de viaje.');

                                this.$nextTick(() => {
                                    document.getElementById('txtFechaReservacion').focus();
                                });
                                return auxValidate = false;
                            }

                            if (moment(this.list.ventas[i].FechaReservacion, 'DD/MM/YYYY').isBefore(moment(), 'days')) {
                                this.indexVenta = i;
                                APP.msg.warning('La fecha de confirmación debe ser igual o mayor a la fecha actual.');

                                this.$nextTick(() => {
                                    document.getElementById('txtFechaReservacion').focus();
                                });
                                return auxValidate = false;
                            }

                            var tmpHoraBase = appController.getHoraBaseReservacion(this.list.embarques, Usuario.CodiPuntoVenta);

                            if (this.list.ventas[i].FechaReservacion === moment().format('DD/MM/YYYY')) {

                                if (this.list.ventas[i].ValidadorClienteEspecial) {
                                    if (moment(this.list.ventas[i].HoraReservacion, 'hh:mmA').isBefore(moment(), 'minutes')) {
                                        this.indexVenta = i;
                                        APP.msg.warning('La hora de confirmación debe ser igual o mayor a la hora actual.');

                                        this.$nextTick(() => {
                                            document.getElementById('txtHoraReservacion').focus();
                                        });
                                        return auxValidate = false;
                                    }
                                }
                                else {
                                    if (moment(this.list.ventas[i].HoraReservacion, 'hh:mmA').isSameOrBefore(moment(), 'minutes')) {
                                        this.indexVenta = i;
                                        APP.msg.warning('La hora de confirmación debe ser mayor a la hora actual.');

                                        this.$nextTick(() => {
                                            document.getElementById('txtHoraReservacion').focus();
                                        });
                                        return auxValidate = false;
                                    }
                                }
                            }

                            if (this.list.ventas[i].FechaReservacion === this.filtro.Fecha) {

                                if (moment(this.list.ventas[i].HoraReservacion, 'hh:mmA').isAfter(moment(tmpHoraBase, 'hh:mmA'), 'minutes')) {
                                    this.indexVenta = i;
                                    APP.msg.warning('La hora de confirmación debe ser menor o igual a la hora de embarque (' + tmpHoraBase + ').');

                                    this.$nextTick(() => {
                                        document.getElementById('txtHoraReservacion').focus();
                                    });
                                    return auxValidate = false;
                                }

                                if (VerificaHoraConfirmacion !== '0') {

                                    var HoraReal = moment(tmpHoraBase, 'hh:mmA').add(VerificaHoraConfirmacion, 'minutes');

                                    if (moment(this.list.ventas[i].HoraReservacion, 'hh:mmA').isAfter(HoraReal, 'minutes')) {

                                        if (!this.list.ventas[i].ValidadorClienteEspecial && !this.validatorReservaHC) {

                                            this.indexVenta = i;
                                            APP.msg.warning('La hora de confirmación debe ser menor a la hora permitida por administración (' + HoraReal.format('hh:mmA') + ').');

                                            this.$nextTick(() => {
                                                document.getElementById('txtHoraReservacion').focus();
                                            });
                                            return auxValidate = false;
                                        }
                                    }
                                }
                            }
                        }
                    }

                    if (this.pickedBusVenta !== 'R' && this.pickedBusVenta !== 'FA' && appController.validatePanel('107') === '1') {

                        for (ii = this.list.ventas.length - 1; ii >= 0; ii--) {

                            var resValidaDocumentoRepetido = this.validaDocumentoRepetido(
                                this.list.ventas[ii].CodiTipoDoc.id,
                                this.list.ventas[ii].Documento,
                                this.list.ventas[ii].NroAsiento);

                            if (!resValidaDocumentoRepetido) {
                                this.indexVenta = ii;

                                this.$nextTick(() => {
                                    document.getElementById('txtDocumento').focus();
                                });
                                return auxValidate = false;
                            }
                        }
                    }

                    return auxValidate;
                },
                clearUser: function () {
                    this.list.ventas[this.indexVenta].IdCliente = 0;
                    this.list.ventas[this.indexVenta].Nombres = '';
                    this.list.ventas[this.indexVenta].ApellidoPaterno = '';
                    this.list.ventas[this.indexVenta].ApellidoMaterno = '';
                    this.list.ventas[this.indexVenta].FechaNac = '';
                    this.list.ventas[this.indexVenta].Edad = '';
                    this.list.ventas[this.indexVenta].Sexo = null;
                    this.list.ventas[this.indexVenta].Telefono = '';
                    this.list.ventas[this.indexVenta].ValidadorClienteEspecial = false;

                    this.list.ventas[this.indexVenta].Correo = '';

                    if (this.pickedBusVenta !== '1') {
                        this.list.ventas[this.indexVenta].Ruc = '';
                        this.list.ventas[this.indexVenta].RazonSocial = '';
                        this.list.ventas[this.indexVenta].Direccion = '';
                    }
                },
                clearRazSoc: function () {
                    this.list.ventas[this.indexVenta].RazonSocial = '';
                    this.list.ventas[this.indexVenta].Direccion = '';
                },
                showRegistrarAcompaniante: function () {
                    appController.showRegistrarInfante(this.list.ventas[this.indexVenta].ObjAcompaniante);
                },
                leftSlider: function () {
                    if (this.indexVenta > 0)
                        this.indexVenta--;
                    $('#bannerVentas').removeClass().addClass('col-md-10 slideOutLeft animated').one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function () {
                        $(this).removeClass().addClass('col-md-10');
                    });

                    this.recorridoSectionVentas();
                },
                rightSlider: function () {
                    if (this.indexVenta < this.list.ventas.length - 1)
                        this.indexVenta++;
                    $('#bannerVentas').removeClass().addClass('col-md-10 slideOutRight animated').one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function () {
                        $(this).removeClass().addClass('col-md-10');
                    });

                    this.recorridoSectionVentas();
                },
                limpiarVenta: function () {
                    this.indexVenta = 0;
                    this.list.ventas.length = 1;
                    this.list.ventas[this.indexVenta].IdCliente = 0;
                    this.list.ventas[this.indexVenta].CodiTipoDoc = appController.findTipoDocumento('01');
                    this.list.ventas[this.indexVenta].Documento = '';
                    this.list.ventas[this.indexVenta].Nombres = '';
                    this.list.ventas[this.indexVenta].ApellidoPaterno = '';
                    this.list.ventas[this.indexVenta].ApellidoMaterno = '';
                    this.list.ventas[this.indexVenta].FechaNac = '';
                    this.list.ventas[this.indexVenta].Edad = '';
                    this.list.ventas[this.indexVenta].Sexo = null;
                    this.list.ventas[this.indexVenta].Telefono = '';
                    this.list.ventas[this.indexVenta].Recoger = '';
                    this.list.ventas[this.indexVenta].Reintegro = '';
                    this.list.ventas[this.indexVenta].Observacion = '';
                    this.list.ventas[this.indexVenta].Precio = '';
                    this.list.ventas[this.indexVenta].PrecioNormal = '';
                    this.list.ventas[this.indexVenta].PrecioMin = '';
                    this.list.ventas[this.indexVenta].PrecioMax = '';
                    this.list.ventas[this.indexVenta].NroAsiento = '';
                    this.list.ventas[this.indexVenta].NivelAsiento = 0;
                    this.list.ventas[this.indexVenta].NroVenta = '';
                    this.list.ventas[this.indexVenta].NroSolicitud = '';
                    this.list.ventas[this.indexVenta].FechaVen = moment().format("DD/MM/YYYY");
                    this.list.ventas[this.indexVenta].OldNroAsiento = '';
                    this.list.ventas[this.indexVenta].FlagVenta = '';
                    this.list.ventas[this.indexVenta].ObjAcompaniante = {
                        CodiTipoDoc: '',
                        Documento: '',
                        NombreCompleto: '',
                        FechaNac: '',
                        Edad: '',
                        Sexo: '',
                        Parentesco: ''
                    };
                    this.list.ventas[this.indexVenta].CodiGerente = '';
                    this.list.ventas[this.indexVenta].CodiSocio = '';
                    this.list.ventas[this.indexVenta].Concepto = '';
                    this.list.ventas[this.indexVenta].FechaAbierta = false;
                    this.list.ventas[this.indexVenta].IdVenta = 0;
                    this.list.ventas[this.indexVenta].Info = '';
                    this.list.ventas[this.indexVenta].FlagPrecioNormal = false;
                    this.list.ventas[this.indexVenta].ValidadorDescuento = false;
                    this.list.ventas[this.indexVenta].ObservacionDescuento = '';
                    this.list.ventas[this.indexVenta].Area = null;
                    this.list.ventas[this.indexVenta].BoletoTipoDir = '1';
                    this.list.ventas[this.indexVenta].FechaCita = '';
                    this.list.ventas[this.indexVenta].Hospital = null;
                    this.list.ventas[this.indexVenta].ValidadorDescuentoControl = false;
                    this.list.ventas[this.indexVenta].DescuentoTipoDC = '0';
                    this.list.ventas[this.indexVenta].ImporteDescuentoDC = '';
                    this.list.ventas[this.indexVenta].ImporteDescontadoDC = '';
                    this.list.ventas[this.indexVenta].AutorizadoDC = '';
                    this.list.ventas[this.indexVenta].ClaveDC = '';
                    this.list.ventas[this.indexVenta].ReadonlyPrecio = false;
                    this.list.ventas[this.indexVenta].CheckRegistrarNino = false;
                    this.list.ventas[this.indexVenta].DisabledRazonSocial = false;
                    this.list.ventas[this.indexVenta].FechaReservacion = '';
                    this.list.ventas[this.indexVenta].HoraReservacion = '';
                    this.list.ventas[this.indexVenta].ValidadorClienteEspecial = false;
                    this.list.ventas[this.indexVenta].CodiEmpresa = 0;
                    this.list.ventas[this.indexVenta].Correo = '';

                    this.disabledCampoNroAsiento = false;
                    this.disabledCamposTicket = false;
                    this.disabledCamposTicket_Pase = false;
                    this.validatorReservaHC = false;
                    this.validatorTiempoReserva = false;

                    this.disabledDocumentoRaya = false;

                    switch (this.pickedBusVenta) {
                        case '1': // 'Crédito'
                            {
                                if (!this.list.ventas[this.indexVenta].IdVenta) {
                                    this.list.ventas[this.indexVenta].Ruc = this.objCreditoCliente.Ruc;
                                    this.list.ventas[this.indexVenta].RazonSocial = this.objCreditoCliente.RazonSocial;
                                    this.list.ventas[this.indexVenta].Direccion = this.objCreditoCliente.Direccion;
                                }
                            };
                            break;
                        default:
                            this.list.ventas[this.indexVenta].Ruc = '';
                            this.list.ventas[this.indexVenta].RazonSocial = '';
                            this.list.ventas[this.indexVenta].Direccion = '';
                            this.readonlyPrecio_Credito = false;
                            this.disabledCredito = false;
                            this.objCreditoCliente.Ruc = '';
                            this.objCreditoCliente.RazonSocial = '';
                            this.objCreditoCliente.Direccion = '';
                            this.objCreditoCliente.idContrato = 0;
                            this.objCreditoCliente.CntBoletos = 0;
                            this.objCreditoCliente.IdRuc = 0;
                            this.objCreditoCliente.SaldoBoletos = 0;
                            this.objCreditoCliente.IdPrecio = 0;
                            this.objCreditoCliente.Precio = 0;
                    }
                    appVueRegistrarInfante.limpiarCampos();
                    appVueRegistrarInfante.enableSaveWithClaveAutorizacion = false;
                },
                focusPrecio: function (event) {
                    this.$nextTick(() => {
                        event.target.select();
                        this.auxFocus.precio = true;
                    });
                },
                keyTxtPrecio: function (e) {
                    this.eventTxtPrecio = e;
                    this.$refs.refPrecio.blur();
                },
                validateRangePrice: function (event) {
                    if (this.eventTxtPrecio)
                        event = this.eventTxtPrecio;

                    var actual = parseFloat(this.list.ventas[this.indexVenta].Precio || '0') || 0;
                    var normal = parseFloat(this.list.ventas[this.indexVenta].PrecioNormal || '0') || 0;
                    var max = parseFloat(this.list.ventas[this.indexVenta].PrecioMax || '0') || 0;
                    var min = parseFloat(this.list.ventas[this.indexVenta].PrecioMin || '0') || 0;

                    if (!actual && !this.list.ventas[this.indexVenta].NroAsiento)
                        this.list.ventas[this.indexVenta].Precio = '';
                    else {
                        if (normal && max && min) {

                            switch (event.keyCode) {
                                case 112:
                                    {
                                        if (!this.list.ventas[this.indexVenta].ValidadorDescuento)
                                            appController.showDescuentoControl(this.list.ventas[this.indexVenta].PrecioNormal);
                                        else {
                                            APP.msg.warning('Ya se realizó un descuento.');
                                            document.getElementById('txtPrecio').focus();
                                        }
                                    };

                                    this.eventTxtPrecio = '';
                                    return;
                            }

                            if (this.pickedBusVenta !== 'R' && !this.readonlyPrecio_Credito) {

                                if (appController.getDescServicio() === '1' && this.pickedBusVenta !== 'FA') {

                                    if (!this.list.ventas[this.indexVenta].ValidadorDescuento) {

                                        if (actual < normal) {
                                            switch (this.pickedBusVenta) {
                                                case '99': // Retorno
                                                    break;
                                                default:
                                                    {
                                                        var indexValidadorDescuento = appController.existValidadorDescuento();
                                                        if (indexValidadorDescuento !== -1) {
                                                            this.list.ventas[this.indexVenta].ValidadorDescuento = this.list.ventas[indexValidadorDescuento].ValidadorDescuento;
                                                            this.list.ventas[this.indexVenta].ObservacionDescuento = this.list.ventas[indexValidadorDescuento].ObservacionDescuento;

                                                            var auxPrecio = parseFloat(this.list.ventas[this.indexVenta].Precio || '0') || 0;
                                                            this.list.ventas[this.indexVenta].Precio = auxPrecio.toFixed(2);

                                                            this.list.ventas[this.indexVenta].ReadonlyPrecio = true;

                                                            this.$nextTick(() => {
                                                                this.recorridoTxtPrecio();
                                                            });
                                                        }
                                                        else
                                                            appController.showClaveAutorizacion(ClaveDescuentoDePasajes);
                                                    };
                                                    this.eventTxtPrecio = '';
                                                    return;
                                            }
                                        }
                                    }
                                }
                                else if (!this.list.ventas[this.indexVenta].ValidadorDescuentoControl) {
                                    if (actual > max) {
                                        APP.msg.warning('El precio no puede ser mayor a ' + max.toFixed(2) + '.');
                                        this.list.ventas[this.indexVenta].Precio = normal.toFixed(2);
                                        this.focusPrecio(event);

                                        this.eventTxtPrecio = '';
                                        return;
                                    }
                                    else if (actual < min) {
                                        APP.msg.warning('El precio no puede ser menor a ' + min.toFixed(2) + '.');
                                        this.list.ventas[this.indexVenta].Precio = normal.toFixed(2);
                                        this.focusPrecio(event);

                                        this.eventTxtPrecio = '';
                                        return;
                                    }
                                }
                            }
                        }

                        this.list.ventas[this.indexVenta].Precio = actual.toFixed(2);
                    }

                    this.auxFocus.precio = false;

                    this.eventTxtPrecio = '';

                    if (event.keyCode === 13)
                        this.recorridoTxtPrecio();
                },
                focusAsiento: function (event) {
                    event.target.select();
                    this.auxFocus.asiento = true;
                },
                enterTxtNroAsientoVenta: function (e) {
                    this.eventTxtNroAsientoVenta = e;
                    this.$refs.refNroAsientoVenta.blur();
                },
                validateTxtNroAsientoVenta: async function (e) {
                    if (this.eventTxtNroAsientoVenta)
                        e = this.eventTxtNroAsientoVenta;

                    if (this.list.ventas[this.indexVenta].NroAsiento && !this.list.ventas[this.indexVenta].NroVenta) {
                        this.list.ventas[this.indexVenta].NroAsiento = this.list.ventas[this.indexVenta].NroAsiento.padStart(2, '0');

                        var auxObj = this.findObjectAsiento(this.list.ventas[this.indexVenta].NroAsiento);
                        if (!auxObj) {
                            this.list.ventas[this.indexVenta].NroAsiento = '';
                            this.$refs.refNroAsientoVenta.focus();
                            APP.msg.warning('Asiento no encontrado.');

                            this.eventTxtNroAsientoVenta = '';
                            return;
                        }

                        if (!auxObj.FechaVenta && auxObj.NumeAsiento === 0) {
                            this.auxFocus.asiento = false;
                            var auxResponse = await this.bloquearAsiento(auxObj, true);
                            if (!auxResponse) {
                                this.list.ventas[this.indexVenta].NroAsiento = '';
                                this.$refs.refNroAsientoVenta.focus();
                            }
                        }
                        else {
                            this.list.ventas[this.indexVenta].NroAsiento = '';
                            this.$refs.refNroAsientoVenta.focus();
                            APP.msg.warning('Asiento no disponible.');
                        }
                    }
                    else if (this.list.ventas[this.indexVenta].NroVenta) {
                        this.list.ventas[this.indexVenta].NroAsiento = this.list.ventas[this.indexVenta].NroAsiento.padStart(2, '0');

                        if (this.list.ventas[this.indexVenta].NroAsiento !== this.list.ventas[this.indexVenta].OldNroAsiento) {

                            var auxObj = this.findObjectAsiento(this.list.ventas[this.indexVenta].NroAsiento);
                            if (!auxObj) {
                                this.list.ventas[this.indexVenta].NroAsiento = this.list.ventas[this.indexVenta].OldNroAsiento;
                                this.eventTxtNroAsientoVenta = '';
                                return;
                            }

                            if (!auxObj.FechaVenta && auxObj.NumeAsiento === 0) {
                                var auxObjOld = this.findObjectAsiento(this.list.ventas[this.indexVenta].OldNroAsiento);
                                await this.liberarAsiento(auxObjOld, false);

                                var auxResponse = await this.bloquearAsiento(auxObj, false);
                                if (!auxResponse)
                                    await this.bloquearAsiento(auxObjOld, false);
                                else {
                                    this.auxFocus.asiento = false;
                                    if (e && e.keyCode === 13)
                                        this.recorridoSectionVentas();
                                }
                            }
                            else {
                                if (this.list.ventas[this.indexVenta].OldNroAsiento) {
                                    this.list.ventas[this.indexVenta].NroAsiento = this.list.ventas[this.indexVenta].OldNroAsiento;

                                    this.recorridoSectionVentas();
                                }
                            }
                        }
                        else {
                            this.auxFocus.asiento = false;
                            if (e && e.keyCode === 13)
                                this.recorridoSectionVentas();
                        }
                    }
                    else {
                        if (e && e.keyCode !== 13)
                            this.auxFocus.asiento = false;
                        else {
                            this.$refs.refNroAsientoVenta.focus();
                            if (!appVueTipoPago.processing)
                                APP.msg.warning('Ingrese número de asiento.');
                        }
                    }

                    this.eventTxtNroAsientoVenta = '';
                },
                findObjectAsiento: function (_NroAsiento) {
                    var auxObj = {};

                    var auxTipo = String(_NroAsiento).padStart(2, '0');

                    auxObj = _.find(this.list.plano1, { 'Tipo': auxTipo });
                    if (!auxObj) {
                        auxObj = _.find(this.list.plano2, { 'Tipo': auxTipo });
                        if (!auxObj) {
                            auxObj = _.find(this.list.plano3, { 'Tipo': auxTipo });
                            if (!auxObj) {
                                auxObj = _.find(this.list.plano4, { 'Tipo': auxTipo });
                                if (!auxObj) {
                                    auxObj = _.find(this.list.plano5, { 'Tipo': auxTipo });
                                    if (!auxObj) {
                                        return null;
                                    }
                                }
                            }
                        }
                    }

                    return auxObj;
                },
                passSinceRegistrarNino: function () {
                    if (this.list.ventas[this.indexVenta].NroAsiento) {
                        if (this.disabledPrecio)
                            this.recorridoSectionVentas();
                        else
                            this.$refs.refPrecio.focus();
                    }
                    else
                        this.$refs.refNroAsientoVenta.focus();
                },
                cancelarBoletos: async function () {
                    var auxResponse = true;
                    this.disabledAsiento = true;

                    var arregloIDS = [];
                    var arregloCookie = [];
                    var arregloTipo = [];

                    if (this.list.ventas.length <= 1 && (!this.list.ventas[0].NroAsiento || this.list.ventas[0].FlagVenta))
                        this.limpiarVenta();
                    else {
                        var partNameCookie = 'asientoBloqueado_' + (this.filtro.CodiProgramacion > 0 ? this.filtro.CodiProgramacion : this.filtro.NroViaje) + '_' + this.filtro.Fecha + '_';
                        var partNameCookie02 = '';

                        // Solo cuando exista 'CodiProgramacion', buscar también por 'NroViaje' para un limpiado completo.
                        if (this.filtro.CodiProgramacion > 0)
                            partNameCookie02 = 'asientoBloqueado_' + this.filtro.NroViaje + '_' + this.filtro.Fecha + '_';

                        for (i = 0; i < this.list.ventas.length; i++) {
                            if (this.list.ventas[i].NroAsiento && !this.list.ventas[i].FlagVenta) {

                                var valueCookie = APP.util.readCookie(partNameCookie + this.list.ventas[i].NroAsiento.padStart(2, '0'));
                                if (valueCookie) {
                                    arregloIDS.push(valueCookie);
                                    arregloCookie.push(partNameCookie + this.list.ventas[i].NroAsiento.padStart(2, '0'));
                                    arregloTipo.push(this.list.ventas[i].NroAsiento.padStart(2, '0'));
                                }
                                else {
                                    // Solo cuando exista 'CodiProgramacion', buscar también por 'NroViaje' para un limpiado completo.
                                    if (this.filtro.CodiProgramacion > 0) {
                                        var valueCookie02 = APP.util.readCookie(partNameCookie02 + this.list.ventas[i].NroAsiento.padStart(2, '0'));
                                        if (valueCookie02) {
                                            arregloIDS.push(valueCookie02);
                                            arregloCookie.push(partNameCookie02 + this.list.ventas[i].NroAsiento.padStart(2, '0'));
                                            arregloTipo.push(this.list.ventas[i].NroAsiento.padStart(2, '0'));
                                        }
                                    }
                                }
                            }
                        }

                        if (arregloIDS.length > 0) {
                            var auxValidate = await this.liberarArregloAsientos(arregloIDS);
                            if (auxValidate) {

                                this.list.ventas.splice(1);
                                this.indexVenta = 0;
                                this.firstAsiento = true;
                                this.limpiarVenta();

                                arregloCookie.forEach(function (cookie) {
                                    APP.util.deleteCookie(cookie);
                                });

                                //callSignalR_LiberarArregloAsientos
                                callSignalR_LiberarArregloAsientos(this.filtro.NroViaje, this.objTurno.FechaProgramacion, arregloTipo);

                                auxResponse = true;
                            }
                        }
                    }

                    this.$nextTick(() => {
                        this.disabledAsiento = false;
                        this.$refs.refNroAsientoVenta.focus();
                    });

                    return auxResponse;
                },
                cancelarReserva: async function (_asientoSel) {
                    var _this = this;

                    this.disabledAsiento = true;

                    if (!(await this.validateCancelarReserva(_asientoSel))) {
                        this.disabledAsiento = false;
                        return;
                    }

                    this.disabledAsiento = false;

                    if (await APP.msg.confirm(
                        'Cancelar Reserva',
                        'La reserva N° ' + this.$options.filters.formatNroVenta('0' + _asientoSel.Boleto) + ' será cancelada, ¿Desea continuar?')) {

                        var request = {};
                        request.IdVenta = _asientoSel.IdVenta;
                        request.Boleto = _asientoSel.Boleto;
                        request.NumeAsiento = _asientoSel.NumeAsiento;
                        request.NomPasajero = _asientoSel.Nombres + ',' + _asientoSel.ApellidoPaterno + ',' + _asientoSel.ApellidoMaterno;
                        request.FechaViaje = this.filtro.Fecha;
                        request.HoraViaje = this.filtro.Turno;
                        request.NomDestinoPas = _asientoSel.NomDestino;
                        request.PrecioVenta = _asientoSel.PrecioVenta;

                        await APP.rq.axios2.post(APP.base + '/itinerarios/cancelar-reserva', request)
                            .then(async function (res) {
                                await appController.chargeTurnos();

                                if (res.data.Estado) {
                                    _this.$nextTick(() => {
                                        if (res.data.EsCorrecto)
                                            APP.msg.info(res.data.Mensaje);
                                        else
                                            APP.msg.warning(res.data.Mensaje);
                                    });

                                    // callSignalR_LiberarAsiento
                                    callSignalR_LiberarAsiento(_this.filtro.NroViaje, _this.objTurno.FechaProgramacion, _asientoSel.Tipo);
                                }
                                else {
                                    _this.$nextTick(() => {
                                        APP.msg.error(res.data.Mensaje);
                                    });
                                }
                            })
                            .catch(APP.rq.axios_handler_error_alert);
                    }
                    else
                        this.limpiarVenta();
                },
                validateCancelarReserva: async function (_asientoSel) {
                    var auxValidate = true;

                    if (moment(this.filtro.Fecha, 'DD/MM/YYYY').isBefore(moment(), 'days')) {
                        APP.msg.warning('Solicitud cancelada, los datos enviados son de fechas pasadas.');
                        return auxValidate = false;
                    }

                    if (appController.validatePanel('148') === '1') {
                        if (_asientoSel.CodiPuntoVenta !== Usuario.CodiPuntoVenta || _asientoSel.CodiSucursal !== Usuario.CodiSucursal) {

                            ClaveCancelarReserva = await this.verificaClaveTbClaveRe(Usuario.CodiUsuario);

                            if (ClaveCancelarReserva) {
                                var resConfirmClaveAutorizacion = await APP.msg.confirmClaveAutorizacion(
                                    'Cancelar reserva'
                                    , 'Necesita permiso para realizar esta acción, ingrese la clave de autorización.'
                                    , 'CanRes_148');

                                ClaveCancelarReserva = '';

                                if (resConfirmClaveAutorizacion)
                                    return auxValidate;
                                else
                                    return auxValidate = false;
                            }
                        }
                    }

                    if (appController.validatePanel('58') === '0') {
                        if (_asientoSel.CodiPuntoVenta !== Usuario.CodiPuntoVenta) {
                            APP.msg.warning('Solo puede anular esta reserva el punto de venta ' + _asientoSel.NomPuntoVenta + '.');
                            return auxValidate = false;
                        }
                        else
                            return auxValidate;
                    }

                    if (appController.validatePanel('77') === '0' && _asientoSel.CodiSucursal !== Usuario.CodiSucursal) {
                        APP.msg.warning('Solo puede anular esta reserva la sucursal ' + this.$options.filters.rutas(_asientoSel.CodiSucursal) + '.');
                        return auxValidate = false;
                    }

                    return auxValidate;
                },
                verificaClaveTbClaveRe: async function (_CodiUsuario, _password) {
                    var auxResponse = '';

                    await APP.rq.axios2.post(APP.base + '/itinerarios/verificaClaveTbClaveRe', {
                        CodiUsr: _CodiUsuario,
                        Password: _password
                    })
                        .then(res => {
                            if (res.data.Estado)
                                auxResponse = res.data.Valor;
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);

                    return auxResponse;
                },
                changePickedBusVenta: async function (value) {
                    // Si es el mismo valor, retornar
                    if (this.pickedBusVenta !== '1') {
                        if (this.pickedBusVenta === value)
                            return;
                    }

                    // Valida si se limpiará los 'AsientosBloqueados' del Picked anterior
                    switch (value) {
                        case 'V': // Venta
                        case '7': // Pase de cortesía
                        case 'R': // Reserva
                        case 'FA': // Fecha abierta
                        case 'PO': // Postergación
                        case '1': // Crédito
                            {
                                if (this.list.ventas.length > 1) {
                                    if (await APP.msg.confirm(
                                        'Confirmar acción',
                                        'Se perderán los asientos bloqueados sin vender, ¿Desea continuar?')) {

                                        // Limpiar 'AsientosBloqueados'
                                        var auxResponse = await this.cancelarBoletos();
                                        if (!auxResponse) {
                                            APP.msg.error('No se pudo limpiar los asientos bloqueados para realizar la venta.');
                                            this.disabledAsiento = false;
                                            return;
                                        }

                                        this.pickedBusVenta = value;
                                        this.limpiarVenta();
                                    }
                                    else {
                                        this.$nextTick(() => {
                                            this.recorridoSectionVentas();
                                        });
                                    }
                                }
                                else if (this.list.ventas[this.indexVenta].NroAsiento) {
                                    if (this.list.ventas[this.indexVenta].FlagVenta) {
                                        this.pickedBusVenta = value;
                                        this.limpiarVenta();
                                    }
                                    else {
                                        if (await APP.msg.confirm(
                                            'Confirmar acción',
                                            'Se perderán los asientos bloqueados sin vender, ¿Desea continuar?')) {

                                            // Limpiar 'AsientosBloqueados'
                                            var auxResponse = await this.cancelarBoletos();
                                            if (!auxResponse) {
                                                APP.msg.error('No se pudo limpiar los asientos bloqueados para realizar la venta.');
                                                this.disabledAsiento = false;
                                                return;
                                            }

                                            this.pickedBusVenta = value;
                                            this.limpiarVenta();
                                        }
                                        else {
                                            this.$nextTick(() => {
                                                this.recorridoSectionVentas();
                                            });
                                        }
                                    }
                                }
                                else {
                                    this.pickedBusVenta = value;
                                    this.limpiarVenta();
                                }
                            };
                            break;
                    }

                    // Muestra 'Modal'
                    switch (value) {
                        case '1': // Crédito

                            // Animación 'ScrollTop'
                            animateScrollTop(800);

                            var dataVenta = {};
                            dataVenta.FechaViaje = this.filtro.Fecha;
                            dataVenta.CodiOficina = this.filtro.CodiSucursal;
                            dataVenta.CodiRuta = this.filtro.CodiDestinoPas;
                            dataVenta.CodiServicio = this.filtro.CodiServicio;
                            dataVenta.CodiBus = this.objPlano.CodiBus;
                            dataVenta.HoraViaje = this.filtro.Turno;
                            appController.showCreditoClientes(dataVenta);
                            break;
                        case 'R':
                            {
                                if (VerificaHoraConfirmacion === '0')
                                    VerificaHoraConfirmacion = await this.verificaHoraConfirmacion(this.filtro.CodiSucursal.id, this.filtro.CodiDestinoPas.id);
                            };
                            break;
                    }

                    // Valida si ya se cargó el respectivo 'Correlativo'
                    switch (this.pickedBusVenta) {
                        case '7':
                            {
                                if (this.CorrelativoPaseFactura && this.CorrelativoPaseBoleta) {
                                    switch (this.TipoTerminalElectronico) {
                                        case 'M':
                                            {
                                                if (this.CorrelativoPaseBoleta === '0000-00000000')
                                                    this.Correlativo = _.cloneDeep(this.CorrelativoVentaBoleta);
                                                else
                                                    this.Correlativo = _.cloneDeep(this.CorrelativoPaseBoleta);
                                            }
                                            break;
                                        case 'E':
                                            {
                                                this.Correlativo = _.cloneDeep(this.CorrelativoPaseBoleta);

                                                if (this.Correlativo === 'B000-00000000')
                                                    APP.msg.error('No se encontró serie para el boleto.');
                                            };
                                            break;
                                    }
                                    return;
                                }
                            };
                            break;
                        default:
                            this.Correlativo = _.cloneDeep(this.CorrelativoVentaBoleta);
                            return;
                    }

                    // Carga 'Correlativo'
                    this.getCorrelativo(this.filtro.CodiEmpresa.id, this.pickedBusVenta);
                },
                setPaseCortesia: async function (_beneficiario) {
                    var nomBen = (_beneficiario.NombreBeneficiario) ? _beneficiario.NombreBeneficiario.split(',') : [''];

                    // Valida Split
                    if (nomBen.length !== 3)
                        nomBen = ['', '', ''];
                    // ------------

                    this.list.ventas[this.indexVenta].CodiTipoDoc = appController.findTipoDocumento(_beneficiario.TipoDocumento);
                    this.list.ventas[this.indexVenta].Documento = _beneficiario.NumeroDocumento;
                    this.list.ventas[this.indexVenta].Nombres = nomBen[2];
                    this.list.ventas[this.indexVenta].ApellidoPaterno = nomBen[0];
                    this.list.ventas[this.indexVenta].ApellidoMaterno = nomBen[1];
                    this.list.ventas[this.indexVenta].Sexo = appController.findSexo(_beneficiario.Sexo);
                    this.list.ventas[this.indexVenta].CodiGerente = appVuePaseCortesia.gerente ? appVuePaseCortesia.gerente.id : '';
                    this.list.ventas[this.indexVenta].CodiSocio = appVuePaseCortesia.solicitante ? appVuePaseCortesia.solicitante.id : '';
                    this.list.ventas[this.indexVenta].Concepto = appVuePaseCortesia.concepto;
                    this.list.ventas[this.indexVenta].FechaAbierta = appVuePaseCortesia.fechaAbierta;

                    this.searchUser();

                    this.disabledCampoNroAsiento = true;
                    this.disabledCamposTicket_Pase = true;
                },
                sendToFechaAbierta: async function (asientoSel) {
                    var _this = this;

                    // En un caso específico, el SignalR limpia 'asientoSel', por eso:
                    var tmpAsientoSel = _.cloneDeep(asientoSel);

                    if (parseInt(tmpAsientoSel.IdVenta)) {
                        _this.disabledAsiento = true;

                        var auxBoletoCompleto = formatoBoletoCompleto(tmpAsientoSel.TipoBoleto, tmpAsientoSel.Boleto);

                        // Valida 'Manifiesto'
                        var resValidaManifiestoProgramacion = await _this.validaManifiestoProgramacion();
                        if (!resValidaManifiestoProgramacion) {
                            _this.disabledAsiento = false;
                            return;
                        }

                        // Validación Pre 'FechaAbierta'
                        var validatePreFechaAbierta = await _this.validatePreFechaAbierta(tmpAsientoSel);
                        if (!validatePreFechaAbierta) {
                            _this.disabledAsiento = false;
                            return;
                        }

                        var resConfirm = await APP.msg.confirm(
                            'Enviar a Fecha Abierta'
                            , 'El boleto N° ' + this.$options.filters.formatNroVenta(auxBoletoCompleto) + ' será enviado a Fecha Abierta, ¿Desea continuar?'
                            , false
                            , false
                            , false
                            , true
                        )

                        if (resConfirm) {
                            // Valida 'FechaAbierta'
                            var validateFechaAbierta = await _this.validateFechaAbierta(tmpAsientoSel);
                            if (!validateFechaAbierta) {
                                _this.disabledAsiento = false;
                                return;
                            }

                            await APP.rq.axios.post(APP.base + '/itinerarios/modificar-venta-a-fecha-abierta' + APP.util.getQueryParamByObject({
                                IdVenta: tmpAsientoSel.IdVenta,
                                CodiServicio: _this.filtro.CodiServicio.id,
                                CodiRuta: _this.filtro.CodiDestinoBus.id,

                                BoletoCompleto: tmpAsientoSel.Boleto,
                                NumeAsiento: tmpAsientoSel.NumeAsiento,
                                Pasajero: tmpAsientoSel.Nombres + ' ' + tmpAsientoSel.ApellidoPaterno + ' ' + tmpAsientoSel.ApellidoMaterno,
                                FechaViaje: _this.filtro.Fecha,
                                HoraViaje: _this.filtro.Turno,
                                NomDestino: tmpAsientoSel.NomDestino,
                                PrecioVenta: tmpAsientoSel.PrecioVenta,

                                CodiEsca: tmpAsientoSel.CodiEsca ? tmpAsientoSel.CodiEsca.substr(1) : '',
                                CodiOrigen: tmpAsientoSel.CodiOrigen,
                                CodiProgramacion: _this.filtro.CodiProgramacion
                            }))
                                .then(async function (res) {
                                    await appController.chargeTurnos();

                                    if (res.data.Estado) {
                                        _this.$nextTick(() => {
                                            if (res.data.EsCorrecto)
                                                APP.msg.info(res.data.Mensaje);
                                            else
                                                APP.msg.warning(res.data.Mensaje);
                                        });

                                        // callSignalR_LiberarAsiento
                                        callSignalR_LiberarAsiento(_this.filtro.NroViaje, _this.objTurno.FechaProgramacion, tmpAsientoSel.Tipo);
                                    }
                                    else {
                                        _this.$nextTick(() => {
                                            APP.msg.error(res.data.Mensaje);
                                        });
                                    }
                                })
                                .catch(APP.rq.axios_handler_error_alert);
                        }
                        else {
                            _this.limpiarVenta();
                            _this.disabledAsiento = false;
                        }

                    }
                    else
                        appController.showFechaAbierta(asientoSel);
                },
                validatePreFechaAbierta: async function (_tmpAsientoSel) {
                    var auxValidate = true;

                    if (_tmpAsientoSel.CodiOrigen != this.filtro.CodiSucursal.id) {
                        APP.msg.warning('El turno del asiento (' + _tmpAsientoSel.NomOrigen + ') no pertenece al turno actual, seleccione el correcto.');
                        return auxValidate = false;
                    }

                    if (appController.validatePanelClave('167') === '1') {
                        if (Usuario.Nivel !== 1 && Usuario.Nivel !== 11) {
                            APP.msg.warning('Usuario no autorizado. Solo los administradores puede enviar a fecha abierta.');
                            return auxValidate = false;
                        }
                    }

                    var verificaNC = await this.verificaNC(_tmpAsientoSel.IdVenta);
                    if (verificaNC !== 0)
                        return auxValidate = false;

                    var verificaLiquidacionComiDet = await this.verificaLiquidacionComiDet(_tmpAsientoSel.IdVenta);
                    if (verificaLiquidacionComiDet !== 0) {
                        APP.msg.warning('El boleto se encuentra liquidado, revise liquidación avanzada.');
                        return auxValidate = false;
                    }

                    var verificaLiquidacionComi = await this.verificaLiquidacionComi(this.filtro.CodiProgramacion, _tmpAsientoSel.CodiPuntoVenta);
                    if (verificaLiquidacionComi === "1") {
                        APP.msg.warning('El boleto se encuentra liquidado.');
                        return auxValidate = false;
                    }

                    return auxValidate;
                },
                validateFechaAbierta: async function (_tmpAsientoSel) {
                    var auxValidate = true;

                    if (moment(this.filtro.Fecha, 'DD/MM/YYYY').isBefore(moment(), 'days')) {

                        var resConfirmClaveAutorizacion = await APP.msg.confirmClaveAutorizacion(
                            `${_.padStart(ClavePostergacionesBoleto, 3, '0')} - Enviar boleto a Fecha Abierta`
                            , 'Boleto de fecha pasada, necesita permiso para realizar esta acción, ingrese la clave de autorización.'
                            , ClavePostergacionesBoleto);

                        if (!resConfirmClaveAutorizacion)
                            return auxValidate = false;

                        if (!(Usuario.Nivel === 11 || Usuario.Nivel === 1 || Usuario.Nivel === 2
                            || Usuario.Nivel === 4 || Usuario.Nivel === 3 || Usuario.Nivel === 50)) {

                            if (_tmpAsientoSel.ImpManifiesto === 'X') {
                                APP.msg.warning('No se puede enviar a Fecha Abierta el boleto porque tienen manifiesto impreso.');
                                return auxValidate = false;
                            }
                        }

                        var consultaVentaIdaV = await this.consultaVentaIdaV(_tmpAsientoSel.IdVenta);
                        if (consultaVentaIdaV) {
                            var tmpObjAsiento = {};
                            var auxBoletoCompleto = formatoBoletoCompleto(_tmpAsientoSel.TipoBoleto, _tmpAsientoSel.Boleto);
                            tmpObjAsiento.NroBoleto = this.$options.filters.formatNroVenta(auxBoletoCompleto);
                            tmpObjAsiento.OrigenBoleto = _tmpAsientoSel.NomOrigen;
                            tmpObjAsiento.DestinoBoleto = _tmpAsientoSel.NomDestino;
                            tmpObjAsiento.NroAsiento = String(_tmpAsientoSel.NumeAsiento).padStart(2, '0');

                            await APP.msg.infoBoletoPromocionadoConDescuento(
                                ''
                                , 'El boleto que intenta enviar a Fecha Abierta es un boleto ida y vuelta promocionado con descuento, para proceder primero debe anular el boleto: '
                                , tmpObjAsiento);

                            return auxValidate = false;
                        }

                        var resConsultaPos = await this.consultaPos('79', '02');
                        var resConsultaSumaBoletosPostergados = await this.consultaSumaBoletosPostergados(_tmpAsientoSel.TipoBoleto, _tmpAsientoSel.Boleto, _tmpAsientoSel.CodiEmpresa);

                        if (resConsultaPos !== '0') {
                            if (resConsultaSumaBoletosPostergados <= parseInt(resConsultaPos)) {

                                var resConfirmClaveAutorizacion02 = true;

                                if (appController.validatePanelClave('28') === '1') {
                                    resConfirmClaveAutorizacion02 = await APP.msg.confirmClaveAutorizacion(
                                        `${_.padStart(ClavePostergacionesBoleto, 3, '0')} - Enviar boleto a Fecha Abierta`
                                        , 'Ha llegado al tope de fecha abierta para este boleto, ingrese la clave de autorización.'
                                        , ClavePostergacionesBoleto);

                                    if (!resConfirmClaveAutorizacion02)
                                        return auxValidate = false;
                                }
                            }
                        }

                        if (appController.validatePanel('151') === '1') {
                            if (_tmpAsientoSel.FlagVenta === '9') {

                                var resConfirmClaveAutorizacion03 = await APP.msg.confirmClaveAutorizacion(
                                    `${_.padStart(ClaveFlag9, 3, '0')} - Enviar boleto a Fecha Abierta`
                                    , 'Necesita permiso para realizar esta acción, ingrese la clave de autorización.'
                                    , ClaveFlag9);

                                if (!resConfirmClaveAutorizacion03)
                                    return auxValidate = false;
                            }
                        }

                        if (appController.validatePanelClave('25') === '1') {

                            var resConfirmClaveAutorizacion = await APP.msg.confirmClaveAutorizacion(
                                `${_.padStart(ClaveFechaAbiertaABolPasados, 3, '0')} - Confirmar Fecha Abierta`
                                , 'Este boleto es de fecha pasada, ingrese la clave de autorización.'
                                , ClaveFechaAbiertaABolPasados);

                            if (!resConfirmClaveAutorizacion) {
                                APP.msg.warning('No se puede procesar datos de fechas pasadas');
                                return auxValidate = false;
                            }
                        }
                    }

                    if (moment(this.filtro.Fecha, 'DD/MM/YYYY').isSameOrBefore(moment(), 'days')) {

                        if (appController.validatePanel('123') === '1') {

                            var controlTiempo = await this.controlTiempo("01");
                            if (controlTiempo > 0) {

                                var auxDiffMinutes = moment(this.filtro.Turno, 'hh:mmA').diff(moment(), 'minutes');
                                if ((auxDiffMinutes / 60) < controlTiempo) {

                                    var resConfirmClaveAutorizacion = await APP.msg.confirmClaveAutorizacion(
                                        `${_.padStart(ClaveMoverVentaFueraDeHora, 3, '0')} - Anular boleto fuera de hora`
                                        , 'Necesita permiso para realizar esta acción, ingrese la clave de autorización.'
                                        , ClaveMoverVentaFueraDeHora);
                                    if (!resConfirmClaveAutorizacion) {
                                        APP.msg.warning('Usuario no autorizado.');
                                        return auxValidate = false;
                                    }
                                }
                            }
                        }
                    }

                    if (appController.validatePanel('128') === '1') {
                        if (_tmpAsientoSel.CodiPuntoVenta !== Usuario.CodiPuntoVenta) {
                            APP.msg.warning('No puede enviar a fecha abierta boletos con otro punto de venta.');
                            return auxValidate = false;
                        }
                    }

                    return auxValidate;
                },
                consultaPos: async function (_CodTab, _CodEmp) {
                    var auxResponse = '0';

                    await APP.rq.axios2.post(APP.base + '/itinerarios/consultaPos', {
                        CodTab: _CodTab,
                        CodEmp: _CodEmp
                    })
                        .then(res => {
                            if (res.data.Estado)
                                auxResponse = res.data.Valor;
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);

                    return auxResponse;
                },
                consultaSumaBoletosPostergados: async function (_Tipo, _Numero, _Emp) {
                    var auxResponse = 0;

                    await APP.rq.axios2.post(APP.base + '/itinerarios/consultaSumaBoletosPostergados', {
                        Tipo: _Tipo,
                        Numero: _Numero,
                        Emp: _Emp
                    })
                        .then(res => {
                            if (res.data.Estado)
                                auxResponse = res.data.Valor;
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);

                    return auxResponse;
                },
                sendToAnularVenta: async function (asientoSel) {
                    var _this = this;
                    // En un caso específico, el SignalR limpia 'asientoSel', por eso:
                    var tmpAsientoSel = _.cloneDeep(asientoSel);

                    _this.disabledAsiento = true;

                    // Valida 'FechaViaje'
                    if (moment(_this.filtro.Fecha, 'DD/MM/YYYY').isBefore(moment(), 'days')) {
                        APP.msg.warning('La fecha de viaje debe ser igual o mayor a la fecha actual.');
                        _this.disabledAsiento = false;
                        return;
                    }

                    // Valida 'TurnoDisponible'
                    if (!IngresoManualPasajes) {
                        if (appController.validatePanel('54') === '1') {

                            var verificaTurnoDisponible = _this.verificaTurnoDisponible();
                            if (!verificaTurnoDisponible) {
                                APP.msg.warning('La hora de viaje ya pasó, verificar.');
                                _this.disabledAsiento = false;
                                return;
                            }
                        }
                    }

                    // Valida 'Programación cerrada'
                    if (_this.objTurno.Xcierre === '1') {
                        APP.msg.warning('La programación se encuentra cerrada.');
                        _this.disabledAsiento = false;
                        return;
                    }

                    // Valida 'Manifiesto'
                    var resValidaManifiestoProgramacion = await _this.validaManifiestoProgramacion();
                    if (!resValidaManifiestoProgramacion) {
                        _this.disabledAsiento = false;
                        return;
                    }

                    // Obtenemos '_StAnulacion'
                    var _StAnulacion = await _this.obtenerStAnulacion("09", Usuario.CodiPuntoVenta, moment().format('DD/MM/YYYY'));

                    var auxValidate = await _this.validaAnulacion(tmpAsientoSel, _StAnulacion);
                    if (!auxValidate) {
                        _this.disabledAsiento = false;
                        return;
                    }

                    await APP.rq.axios.post(APP.base + '/itinerarios/anular-venta' + APP.util.getQueryParamByObject({
                        IdVenta: tmpAsientoSel.IdVenta,
                        Tipo: tmpAsientoSel.TipoBoleto,
                        FlagVenta: tmpAsientoSel.FlagVenta,
                        PrecioVenta: tmpAsientoSel.PrecioVenta,
                        FechaViaje: tmpAsientoSel.FechaViaje,
                        FechaVenta: tmpAsientoSel.FechaVenta,
                        TipoPago: tmpAsientoSel.TipoPago,
                        ValeRemoto: tmpAsientoSel.ValeRemoto,
                        CodiUsuarioBoleto: tmpAsientoSel.CodiUsuario,
                        NumeAsiento: tmpAsientoSel.NumeAsiento,
                        NomPasajero: tmpAsientoSel.Nombres + ' ' + tmpAsientoSel.ApellidoPaterno + ' ' + tmpAsientoSel.ApellidoMaterno,
                        HoraViaje: _this.filtro.Turno,
                        NomDestinoPas: tmpAsientoSel.NomDestino,
                        CodiEsca: tmpAsientoSel.CodiEsca,
                        CodiDestinoPas: tmpAsientoSel.CodiDestino,
                        IngresoManualPasajes: IngresoManualPasajes,
                        NomOrigenPas: tmpAsientoSel.NomOrigen,

                        RucEmpresa: appController.findEmpresa(tmpAsientoSel.CodiEmpresa).Ruc,
                        ElectronicoEmpresa: appController.findEmpresa(tmpAsientoSel.CodiEmpresa).Electronico
                    }))
                        .then(async function (res) {
                            await appController.chargeTurnos();

                            if (res.data.Estado) {
                                _this.$nextTick(() => {
                                    if (res.data.EsCorrecto)
                                        APP.msg.info(res.data.Mensaje);
                                    else
                                        APP.msg.warning(res.data.Mensaje);
                                });

                                // callSignalR_LiberarAsiento
                                callSignalR_LiberarAsiento(_this.filtro.NroViaje, _this.objTurno.FechaProgramacion, tmpAsientoSel.Tipo);
                            }
                            else {
                                _this.$nextTick(() => {
                                    APP.msg.error(res.data.Mensaje);
                                });
                            }
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                obtenerStAnulacion: async function (_CodTab, _Pv, _F) {
                    var auxResponse = false;

                    await APP.rq.axios2.post(APP.base + '/itinerarios/obtenerStAnulacion', {
                        CodTab: _CodTab,
                        Pv: _Pv,
                        F: _F
                    })
                        .then(res => {
                            if (res.data.Estado)
                                auxResponse = res.data.Valor;
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);

                    return auxResponse;
                },
                validaAnulacion: async function (_tmpAsientoSel, _StAnulacion) {
                    var auxResponse = false;

                    var valPanelAnularFechaPasada = _.cloneDeep(appController.validatePanel('59')); // dd_an
                    var valPanelAnularOtroPVenta = appController.validatePanel('60'); // An_Venta
                    var valPanelAnular125 = appController.validatePanel('125'); // An_Venta_Suc

                    var verificaNC = await this.verificaNC(_tmpAsientoSel.IdVenta);
                    if (verificaNC !== 0)
                        return auxResponse;

                    if (!_StAnulacion && _tmpAsientoSel.FlagVenta != "AB") {
                        APP.msg.warning('Se ha superado la cantidad máxima de boletos para anular.');
                        return auxResponse;
                    }

                    if (!IngresoManualPasajes) {
                        if (moment(this.filtro.Fecha, 'DD/MM/YYYY').isBefore(moment(), 'days')) { // Por ahora: Fecha del sistema -> FechaEmisión

                            if (valPanelAnularFechaPasada === '1') {

                                if (appController.validatePanelClave('23') === '1') {

                                    var resConfirmClaveAutorizacion = await APP.msg.confirmClaveAutorizacion(
                                        `${_.padStart(ClaveAnularFechaPasada, 3, '0')} - Anular boleto de fecha pasada`
                                        , 'Necesita permiso para realizar esta acción, ingrese la clave de autorización.'
                                        , ClaveAnularFechaPasada);

                                    if (resConfirmClaveAutorizacion) {
                                        valPanelAnularFechaPasada = '2';
                                        var validaControlTiempo = await this.validaControlTiempo(_tmpAsientoSel, valPanelAnularFechaPasada, valPanelAnular125, valPanelAnularOtroPVenta);
                                        if (validaControlTiempo)
                                            return auxResponse = true;
                                        else
                                            return auxResponse;
                                    }
                                    else {
                                        APP.msg.warning('Usuario no autorizado.');
                                        return auxResponse;
                                    }
                                }

                                APP.msg.warning('No se puede anular boletos de fechas pasadas.');
                                return auxResponse;
                            }
                        }

                        var resValidaManifiesto = await this.validaManifiesto();
                        if (!resValidaManifiesto)
                            return auxResponse;
                    }

                    var validaControlTiempo = await this.validaControlTiempo(_tmpAsientoSel, valPanelAnularFechaPasada, valPanelAnular125, valPanelAnularOtroPVenta);
                    if (validaControlTiempo)
                        return auxResponse = true;

                    return auxResponse;
                },
                verificaNC: async function (_IdVenta) {
                    var auxResponse = 0;

                    await APP.rq.axios2.post(APP.base + '/itinerarios/verificaNC', {
                        IdVenta: _IdVenta
                    })
                        .then(res => {
                            if (res.data.Estado) {
                                auxResponse = res.data.Valor;
                                if (res.data.Valor > 0)
                                    APP.msg.warning(res.data.Mensaje);
                            }
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);

                    return auxResponse;
                },
                validaControlTiempo: async function (_tmpAsientoSel, _valPanelAnularFechaPasada, _valPanelAnular125, _valPanelAnularOtroPVenta) {
                    var auxValidate = true;

                    if (moment(this.filtro.Fecha, 'DD/MM/YYYY').isSameOrBefore(moment(), 'days')) {

                        if (appController.validatePanel('123') === '1') {

                            var controlTiempo = await this.controlTiempo("02");
                            if (controlTiempo > 0) {

                                if (moment(this.filtro.Turno, 'hh:mmA').isAfter(moment(), 'minutes')) {

                                    var auxDiffMinutes = moment(this.filtro.Turno, 'hh:mmA').diff(moment(), 'minutes');
                                    if ((auxDiffMinutes / 60) < controlTiempo) {

                                        var resConfirmClaveAutorizacion = await APP.msg.confirmClaveAutorizacion(
                                            `${_.padStart(ClaveMoverVentaFueraDeHora, 3, '0')} - Anular boleto fuera de hora`
                                            , 'Necesita permiso para realizar esta acción, ingrese la clave de autorización.'
                                            , ClaveMoverVentaFueraDeHora);
                                        if (!resConfirmClaveAutorizacion) {
                                            APP.msg.warning('Usuario no autorizado.');
                                            return auxValidate = false;
                                        }
                                    }
                                }
                            }
                        }
                    }

                    if (Usuario.Nivel === 14 || Usuario.Nivel === 15 || Usuario.Nivel === 16)
                        return auxValidate = false;

                    if (this.objTurno.Xcierre === '1') {
                        APP.msg.warning('La programación se encuentra cerrada.');
                        return auxValidate = false;
                    }

                    if (!(Usuario.Nivel === 11 || Usuario.Nivel === 1 || Usuario.Nivel === 2 || Usuario.Nivel === 4 || Usuario.Nivel === 3 || Usuario.Nivel === 50)) {
                        if (_tmpAsientoSel.ImpManifiesto === 'X') {
                            APP.msg.warning('No se puede anular boleto porque tienen manifiesto impreso.');
                            return auxValidate = false;
                        }
                    }

                    var verificaLiquidacionComiDet = await this.verificaLiquidacionComiDet(_tmpAsientoSel.IdVenta);
                    if (verificaLiquidacionComiDet !== 0) {
                        APP.msg.warning('El boleto se encuentra liquidado, revise liquidación avanzada.');
                        return auxValidate = false;
                    }

                    var verificaLiquidacionComi = await this.verificaLiquidacionComi(this.filtro.CodiProgramacion, _tmpAsientoSel.CodiPuntoVenta);
                    if (verificaLiquidacionComi === "1") {
                        APP.msg.warning('El boleto se encuentra liquidado.');
                        return auxValidate = false;
                    }

                    var resValidateNumDias = await appController.validateNumDias(_tmpAsientoSel.FechaVenta, '81');
                    if (resValidateNumDias && resValidateNumDias.Valor) {
                        var auxParseString = (resValidateNumDias.Valor === 1 ? 'el día disponible' : 'los ' + resValidateNumDias.Valor + ' días disponibles');
                        APP.msg.warning('Se superó ' + auxParseString + ' para la anulación de la venta.');
                        return auxValidate = false;
                    }

                    var tmpSwIndica = "0";

                    if (appController.validatePanel('163') === '1' && _valPanelAnularFechaPasada !== '2') {

                        if (appController.validatePanelNivel(5, Usuario.Nivel) === '1') {

                            if (moment(_tmpAsientoSel.FechaVenta, 'DD/MM/YYYY').isBefore(moment())
                                && moment(this.filtro.Fecha, 'DD/MM/YYYY').isBefore(moment())) {

                                APP.msg.warning('No se puede anular, el boleto fue emitido el ' + _tmpAsientoSel.FechaVenta + '.');
                                return auxValidate = false;
                            }

                            tmpSwIndica = "1";
                        }
                        else {
                            APP.msg.warning('Solo los administradores pueden anular comprobantes.');
                            return auxValidate = false;
                        }
                    }
                    if (Usuario.CodiSucursal !== _tmpAsientoSel.CodiSucursal && _valPanelAnular125 === '1') {

                        var validaPorFlagVenta = await this.validaPorFlagVenta(_tmpAsientoSel, _valPanelAnularFechaPasada);
                        if (validaPorFlagVenta)
                            return auxValidate;
                        else
                            return auxValidate = false;
                    }
                    else if (Usuario.CodiSucursal !== _tmpAsientoSel.CodiSucursal && _valPanelAnular125 === '0') {
                        APP.msg.warning('Solo puede anular este boleto la sucursal ' + this.$options.filters.rutas(_tmpAsientoSel.CodiSucursal) + '.');
                        return auxValidate = false;
                    }
                    else if (Usuario.CodiPuntoVenta !== _tmpAsientoSel.CodiPuntoVenta && _valPanelAnularOtroPVenta === '0') {
                        APP.msg.warning('Solo puede anular este boleto el punto de venta ' + _tmpAsientoSel.NomPuntoVenta + '.');
                        return auxValidate = false;
                    }
                    else if (_tmpAsientoSel.CodiUsuario !== Usuario.CodiUsuario) {

                        if (tmpSwIndica === '0') {
                            if (appController.validatePanel('40') === '1') {
                                await APP.msg.infoMessage(
                                    ''
                                    , 'Solo puede anular este boleto el usuario que lo vendió.'
                                );
                            }
                            else {
                                var validaPorFlagVenta = await this.validaPorFlagVenta(_tmpAsientoSel, _valPanelAnularFechaPasada);
                                if (validaPorFlagVenta)
                                    return auxValidate;
                                else
                                    return auxValidate = false;
                            }
                        }
                        else {
                            var validaPorFlagVenta = await this.validaPorFlagVenta(_tmpAsientoSel, _valPanelAnularFechaPasada);
                            if (validaPorFlagVenta)
                                return auxValidate;
                            else
                                return auxValidate = false;
                        }
                    }
                    else if (_tmpAsientoSel.FlagVenta === 'R') {
                        await this.cancelarReserva(_tmpAsientoSel);
                        return auxValidate = false;
                    }
                    else {
                        var consultaVentaIdaV = await this.consultaVentaIdaV(_tmpAsientoSel.IdVenta);
                        if (consultaVentaIdaV) {
                            var tmpObjAsiento = {};
                            var auxBoletoCompleto = formatoBoletoCompleto(_tmpAsientoSel.TipoBoleto, _tmpAsientoSel.Boleto);
                            tmpObjAsiento.NroBoleto = this.$options.filters.formatNroVenta(auxBoletoCompleto);
                            tmpObjAsiento.OrigenBoleto = _tmpAsientoSel.NomOrigen;
                            tmpObjAsiento.DestinoBoleto = _tmpAsientoSel.NomDestino;
                            tmpObjAsiento.NroAsiento = String(_tmpAsientoSel.NumeAsiento).padStart(2, '0');

                            await APP.msg.infoBoletoPromocionadoConDescuento(
                                ''
                                , 'El boleto que intenta anular es un boleto ida y vuelta promocionado con descuento, para proceder primero debe anular el boleto: '
                                , tmpObjAsiento);

                            return auxValidate = false;
                        }

                        if (_tmpAsientoSel.FlagVenta === '5') {
                            APP.msg.warning('El boleto está emitido como delegación, no se puede anular.');
                            return auxValidate = false;
                        }

                        var validaPorFlagVenta = await this.validaPorFlagVenta(_tmpAsientoSel, _valPanelAnularFechaPasada);
                        if (validaPorFlagVenta)
                            return auxValidate;
                        else
                            return auxValidate = false;
                    }

                    return auxValidate;
                },
                validaPorFlagVenta: async function (_tmpAsientoSel, _valPanelAnularFechaPasada) {
                    var auxValidate = true;

                    if (_tmpAsientoSel.FlagVenta === '7') {
                        if (!(Usuario.Nivel === 1 || Usuario.Nivel === 5 || Usuario.Nivel === 11)) {
                            APP.msg.warning('Los boletos de tipo Pase solo pueden ser anulados por usuarios con nivel de pases.');
                            return auxValidate = false;
                        }
                    }

                    if (_tmpAsientoSel.FlagVenta === 'Y') {
                        if (appController.validatePanel('32') !== '1') {
                            APP.msg.warning('No se puede anular un Vale remoto.');
                            return auxValidate = false;
                        }
                    }

                    //if (x === 2)
                    //    return; // Goto100
                    // x = 2;

                    if (_tmpAsientoSel.PrecVentaReintegro > 0) {
                        if (await APP.msg.confirm(
                            ''
                            , 'El asiento cuenta con reintegro, para anular el reintegro dar click derecho en el asiento y elegir la opción Reintegro, ' +
                            'caso contrario se anulará el boleto original más el reintegro, ¿Desea continuar? ')) {
                            if (appController.validatePanel('231') === '1') {

                                var resConfirmClaveFechaActualCodiUsuario = await APP.msg.confirmClaveFechaActualCodiUsuario(
                                    'Anular boleto'
                                    , 'Necesita permiso para realizar esta acción, ingrese la clave de autorización.'
                                    , Usuario.CodiUsuario);
                                if (!resConfirmClaveFechaActualCodiUsuario)
                                    return auxValidate = false;
                            }
                        }
                        else
                            return auxValidate = false;
                    }

                    var auxBoletoCompleto = formatoBoletoCompleto(_tmpAsientoSel.TipoBoleto, _tmpAsientoSel.Boleto);

                    if (await APP.msg.confirm(
                        'Anular Venta'
                        , 'El boleto N° ' + this.$options.filters.formatNroVenta(auxBoletoCompleto) + ' será anulado, ¿Desea continuar?')) {

                        if (appController.validatePanel('221') === '1') {
                            if (_tmpAsientoSel.TipoPago === '03') {

                                var resConfirmClaveAutorizacion = await APP.msg.confirmClaveAutorizacion(
                                    `${_.padStart(ClaveAnulacionTarjetaCredito, 3, '0')} - Anular boleto (T.P. Crédito)`
                                    , 'Necesita permiso para realizar esta acción, ingrese la clave de autorización.'
                                    , ClaveAnulacionTarjetaCredito);
                                if (!resConfirmClaveAutorizacion)
                                    return auxValidate = false;
                            }
                        }

                        if (_tmpAsientoSel.Boleto.substring(0, 3) === '000' && _tmpAsientoSel.FlagVenta === 'T') {
                            APP.msg.warning('No se puede anular, primero confirme el asiento.');
                            return auxValidate = false;
                        }

                        if (_tmpAsientoSel.FlagVenta !== 'R') {

                            if (appController.validatePanel('234') === '1') {

                                var checkClaveAutorizacion = false;

                                appController.showClaveAutorizacion(ClaveAnulacionPanel234);

                                await deferredModal($('#appClaveAutorizacion'), true).done(function () {
                                    appClaveAutorizacion.$nextTick(() => {
                                        appClaveAutorizacion.auditoria.TipoMovimiento = 'AUTORIZACION_ANU';
                                        appClaveAutorizacion.auditoria.Boleto = _tmpAsientoSel.Boleto;
                                    });
                                });

                                await deferredModal($('#appClaveAutorizacion'), false).done(function () {
                                    appClaveAutorizacion.$nextTick(() => {
                                        checkClaveAutorizacion = appClaveAutorizacion.trustedPassword;
                                    });
                                });

                                if (!checkClaveAutorizacion)
                                    return auxValidate = false;
                            }
                            else {
                                if (_valPanelAnularFechaPasada !== '2') {

                                    if (appController.validatePanelClave('36') === '1') {

                                        var checkClaveAutorizacion = false;

                                        appController.showClaveAutorizacion(ClaveAnulacionPanel36);

                                        await deferredModal($('#appClaveAutorizacion'), true).done(function () {
                                            appClaveAutorizacion.$nextTick(() => {
                                                appClaveAutorizacion.idVenta = _tmpAsientoSel.IdVenta;
                                            });
                                        });

                                        await deferredModal($('#appClaveAutorizacion'), false).done(function () {
                                            appClaveAutorizacion.$nextTick(() => {
                                                checkClaveAutorizacion = appClaveAutorizacion.trustedPassword;
                                            });
                                        });

                                        if (!checkClaveAutorizacion)
                                            return auxValidate = false;
                                    }
                                }
                                else {
                                    if (appController.validatePanelClave('23') === '1') {

                                        var resConfirmClaveAutorizacion = await APP.msg.confirmClaveAutorizacion(
                                            `${_.padStart(ClaveAnularFechaPasada, 3, '0')} - Anular boleto de fecha pasada`
                                            , 'Necesita permiso para realizar esta acción, ingrese la clave de autorización.'
                                            , ClaveAnularFechaPasada);
                                        if (!resConfirmClaveAutorizacion) {
                                            APP.msg.warning('No se puede anular el boleto.');
                                            return auxValidate = false;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else {
                        this.limpiarVenta();
                        return auxValidate = false;
                    }

                    return auxValidate;
                },
                controlTiempo: async function (_tipo) {
                    var auxResponse = 0;

                    await APP.rq.axios2.post(APP.base + '/itinerarios/consultaControlTiempo', {
                        tipo: _tipo
                    })
                        .then(res => {
                            if (res.data.Estado)
                                auxResponse = res.data.Valor;
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);

                    return auxResponse;
                },
                verificaLiquidacionComiDet: async function (_IdVenta) {
                    var auxResponse = 0;

                    await APP.rq.axios2.post(APP.base + '/itinerarios/verificaLiquidacionComiDet', {
                        IdVenta: _IdVenta
                    })
                        .then(res => {
                            if (res.data.Estado)
                                auxResponse = res.data.Valor;
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);

                    return auxResponse;
                },
                verificaLiquidacionComi: async function (_CodiProgramacion, _CodiPuntoVenta) {
                    var auxResponse = "0";

                    await APP.rq.axios2.post(APP.base + '/itinerarios/verificaLiquidacionComi', {
                        CodiProgramacion: _CodiProgramacion,
                        Pvta: _CodiPuntoVenta
                    })
                        .then(res => {
                            if (res.data.Estado)
                                auxResponse = res.data.Valor;
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);

                    return auxResponse;
                },
                consultaVentaIdaV: async function (_IdVenta) {
                    var auxResponse = false;

                    await APP.rq.axios2.post(APP.base + '/itinerarios/consultaVentaIdaV', {
                        IdVenta: _IdVenta
                    })
                        .then(res => {
                            if (res.data.Estado)
                                auxResponse = res.data.Valor;
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);

                    return auxResponse;
                },
                consultaClaveAnuRei: async function (_CodiUsuario, _Clave) {
                    var auxResponse = false;

                    await APP.rq.axios2.post(APP.base + '/itinerarios/consultaClaveAnuRei', {
                        CodiUsuario: _CodiUsuario,
                        Clave: _Clave
                    })
                        .then(res => {
                            if (res.data.Estado)
                                auxResponse = res.data.Valor;
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);

                    return auxResponse;
                },
                grabarAuditoria: async function (_objAuditoria) {
                    var auxResponse = false;

                    await APP.rq.axios2.post(APP.base + '/itinerarios/grabarAuditoria', {
                        request: _objAuditoria
                    })
                        .then(res => {
                            if (res.data.Estado)
                                auxResponse = res.data.Valor;
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);

                    return auxResponse;
                },
                insertarUsuarioPorVenta: async function (_Usuario, _Accion, _IdVenta, _Motivo) {
                    var auxResponse = false;

                    await APP.rq.axios2.post(APP.base + '/itinerarios/insertarUsuarioPorVenta', {
                        Usuario: _Usuario,
                        Accion: _Accion,
                        IdVenta: _IdVenta,
                        Motivo: _Motivo
                    })
                        .then(res => {
                            if (res.data.Estado)
                                auxResponse = res.data.Valor;
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);

                    return auxResponse;
                },
                setCreditoCliente: async function (_auxItem) {
                    // Valida 'readonlyPrecio_Credito'
                    if (appController.validatePanel('121') === '0')
                        this.readonlyPrecio_Credito = true;

                    this.objCreditoCliente.Ruc = _auxItem.RucCliente;
                    this.objCreditoCliente.RazonSocial = _auxItem.RazonSocial;

                    this.objCreditoCliente.idContrato = _auxItem.IdContrato;
                    this.objCreditoCliente.IdRuc = _auxItem.IdRuc;

                    this.objCreditoCliente.CntBoletos = _auxItem.CntBoletos;
                    this.objCreditoCliente.SaldoBoletos = _auxItem.SaldoBoletos;
                    this.objCreditoCliente.IdPrecio = _auxItem.IdPrecio;
                    this.objCreditoCliente.Precio = _auxItem.Precio;

                    this.disabledCredito = true;
                    this.list.ventas[this.indexVenta].Ruc = _auxItem.RucCliente;
                    this.list.ventas[this.indexVenta].RazonSocial = _auxItem.RazonSocial;

                    await appVueVenta.searchEmpresa();
                    this.objCreditoCliente.Direccion = _.cloneDeep(this.list.ventas[this.indexVenta].Direccion);
                },
                setCreditoOpciones: async function (_request) {
                    this.list.ventas[this.indexVenta].Area = _request.area;
                    this.list.ventas[this.indexVenta].BoletoTipoDir = _request.boletoTipoDir;
                    this.list.ventas[this.indexVenta].FechaCita = _request.fechaCita;
                    this.list.ventas[this.indexVenta].Hospital = _request.hospital;
                    this.list.ventas[this.indexVenta].FechaAbierta = _request.fechaAbierta;

                    this.recorridoSectionVentas();
                },
                consultarContrato: async function (_idContrato, _PrecioMaximo) {
                    var _this = this;
                    var auxResponse = false;

                    await APP.rq.axios2.post(APP.base + '/itinerarios/consultarContrato', {
                        idContrato: _idContrato
                    })
                        .then(res => {
                            if (res.data.Estado) {
                                if (res.data.EsCorrecto) {
                                    if (res.data.Valor.Marcador === '1') {
                                        var auxLength = _this.list.ventas.length;
                                        if (auxLength === 1) {
                                            if (res.data.Valor.Saldo >= _PrecioMaximo)
                                                auxResponse = true;
                                        }
                                        else {
                                            var auxSaldoTotal = _.sumBy(_this.list.ventas, function (objVenta) { return objVenta.PrecioMaximo; });

                                            if (res.data.Valor.Saldo >= auxSaldoTotal)
                                                auxResponse = true;
                                        }
                                    }
                                    else
                                        auxResponse = true;

                                    if (!auxResponse)
                                        APP.msg.warning("Cliente con saldo insuficiente.");
                                }
                                else
                                    APP.msg.warning(res.data.Mensaje);
                            }
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);

                    return auxResponse;
                },
                verificarPrecioNormal: async function (_idContrato) {
                    var resObjPrecioNormal = null;

                    await APP.rq.axios2.post(APP.base + '/itinerarios/verificarPrecioNormal', {
                        idContrato: _idContrato
                    })
                        .then(res => {
                            if (res.data.Estado)
                                resObjPrecioNormal = res.data.Valor;
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);

                    return resObjPrecioNormal;
                },
                buscarPrecio: async function (_Fecha, _Nivel, _Turno, _IdPrecio) {
                    var resPrecioFecha = 0;

                    await APP.rq.axios2.post(APP.base + '/itinerarios/buscarPrecio', {
                        fechaViaje: _Fecha,
                        nivel: _Nivel,
                        hora: _Turno,
                        idPrecio: _IdPrecio
                    })
                        .then(res => {
                            if (res.data.Estado)
                                resPrecioFecha = res.data.Valor;
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);

                    return resPrecioFecha;
                },
                showBuscaClientePasaje: function (e) {
                    if (e.keyCode === 112) { // F1
                        if (this.list.ventas[this.indexVenta].CodiTipoDoc && this.list.ventas[this.indexVenta].CodiTipoDoc !== '00') // Valida 'Raya'
                            appController.showBuscaClientePasaje(this.list.ventas[this.indexVenta].CodiTipoDoc.id);
                    }
                },
                sendBuscaClientePasaje: async function (_item) {
                    this.list.ventas[this.indexVenta].Documento = _item.NumeroDoc;
                    await this.searchUser();
                },
                sendClaveAutorizacion: function (_data, _observacion) {
                    if (_data.EsCorrecto) {
                        $('#appClaveAutorizacion').modal('hide');
                        this.list.ventas[this.indexVenta].ValidadorDescuento = _data.EsCorrecto;
                        this.list.ventas[this.indexVenta].ObservacionDescuento = _observacion;

                        var auxPrecio = parseFloat(this.list.ventas[this.indexVenta].Precio || '0') || 0;
                        this.list.ventas[this.indexVenta].Precio = auxPrecio.toFixed(2);

                        this.list.ventas[this.indexVenta].ReadonlyPrecio = true;

                        APP.msg.info(_data.Mensaje);
                    }
                    else {
                        document.getElementById('txtContraseniaCA').focus();
                        if (_data.Estado)
                            APP.msg.warning(_data.Mensaje);
                        else
                            APP.msg.error(_data.Mensaje);
                    }
                },
                sendClaveAutorizacionDC: function (_data, _objValues) {
                    if (_data.EsCorrecto) {
                        this.list.ventas[this.indexVenta].ValidadorDescuentoControl = _data.Estado;
                        this.list.ventas[this.indexVenta].DescuentoTipoDC = _objValues.DescuentoTipoDC;
                        this.list.ventas[this.indexVenta].ImporteDescuentoDC = _objValues.ImporteDescuentoDC;
                        this.list.ventas[this.indexVenta].ImporteDescontadoDC = _objValues.ImporteDescontadoDC;
                        this.list.ventas[this.indexVenta].AutorizadoDC = _objValues.AutorizadoDC;
                        this.list.ventas[this.indexVenta].ClaveDC = _objValues.ClaveDC;

                        this.list.ventas[this.indexVenta].Precio = _.cloneDeep(_objValues.ImporteDescontadoDC);
                        this.list.ventas[this.indexVenta].ReadonlyPrecio = true;

                        $('#appVueDescuentoControl').modal('hide');
                        APP.msg.info(_data.Mensaje);
                    }
                    else {
                        document.getElementById('txtClaveAutorizacionDC').focus();
                        if (_data.Estado)
                            APP.msg.warning(_data.Mensaje);
                        else
                            APP.msg.error(_data.Mensaje);
                    }
                },
                validaManifiesto: async function () {
                    var auxResponse = true;

                    if ((Usuario.Nivel === 1 || Usuario.Nivel === 11) || this.objTurno.X_Estado) {
                        if (appController.validatePanel('131') === '1') {
                            var auxVerificaManifiestoPorPVenta = await this.verificaManifiestoPorPVenta(this.filtro.CodiProgramacion, Usuario.CodiPuntoVenta)
                            if (auxVerificaManifiestoPorPVenta === '0') {
                                this.objTurno.X_Estado = '';
                                return auxResponse;
                            }
                        }

                        if (appController.validatePanel('14') === '1') {

                            var resValidaHoraProgramada = await this.validaHoraProgramada(this.filtro.CodiEmpresa.id, this.filtro.CodiSucursal.id, this.filtro.CodiPVOrigenBus.id);
                            if (resValidaHoraProgramada === '0') {
                                var auxValidate = moment(this.filtro.Turno, 'hh:mmA').isSameOrAfter(moment(), 'minutes');
                                if (auxValidate) {
                                    this.objTurno.X_Estado = '';
                                    return auxResponse;
                                }
                            }
                            var auxHours = parseInt(resValidaHoraProgramada.substring(0, 2)) || 0;
                            var auxMinutes = parseInt(resValidaHoraProgramada.substring(3, 5)) || 0;
                            var auxHoraResult = moment(this.filtro.Turno, 'hh:mmA').add(auxHours, 'hours').add(auxMinutes, 'minutes');
                            var auxValidate = auxHoraResult.isSameOrAfter(moment(), 'minutes');
                            if (auxValidate) {
                                this.objTurno.X_Estado = '';
                                return auxResponse;
                            }
                        }
                        else {
                            var auxValidate = moment(this.filtro.Turno, 'hh:mmA').isSameOrAfter(moment(), 'minutes');
                            if (auxValidate) {
                                this.objTurno.X_Estado = '';
                                return auxResponse;
                            }
                        }

                        if ((Usuario.Nivel === 1 || Usuario.Nivel === 11) && this.objTurno.X_Estado) {
                            var resVerificaManifiesto = await this.verificaManifiesto();
                            if (!resVerificaManifiesto)
                                auxResponse = false;
                        }

                        if (this.objTurno.X_Estado) {
                            APP.msg.warning('El manifiesto ya fue emitido.');
                            auxResponse = false;
                        }
                    }

                    return auxResponse;
                },
                verificaManifiestoPorPVenta: async function (_CodiProgramacion, _CodiPuntoVenta) {
                    var auxResponse = '0';

                    await APP.rq.axios2.post(APP.base + '/itinerarios/verificaManifiestoPorPVenta', {
                        CodiProgramacion: _CodiProgramacion,
                        Pvta: _CodiPuntoVenta
                    })
                        .then(res => {
                            if (res.data.Estado)
                                auxResponse = res.data.Valor;
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);

                    return auxResponse;
                },
                validaHoraProgramada: async function (_CodiEmpresa, _CodiSucursal, _CodiPVOrigenBus) {
                    var auxResponse = '0';

                    await APP.rq.axios2.post(APP.base + '/itinerarios/consultaConfigManifiestoPorHora', {
                        CodiEmpresa: _CodiEmpresa,
                        CodiSucursal: _CodiSucursal,
                        CodiPuntoVenta: _CodiPVOrigenBus
                    })
                        .then(res => {
                            if (res.data.Estado)
                                auxResponse = res.data.Valor;
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);

                    return auxResponse;
                },
                verificaManifiesto: async function () {
                    var auxResponse = true;

                    // SweetAlert para 'Manifiesto'
                    if (await APP.msg.confirm(
                        'Manifiesto ya fue impreso'
                        , '¿Desea aperturar de nuevo la programación?')) {
                        if (this.filtro.CodiSucursal.id !== String(Usuario.CodiSucursal)) {
                            App.msg.warning('Operación no permitida por estar en una oficina diferente.');
                            auxResponse = false;
                        }
                        else {
                            var resConfirmClaveAutorizacion = await APP.msg.confirmClaveAutorizacion(
                                `${_.padStart(ClaveProgramacion, 3, '0')} - Autorización`
                                , 'Necesita permiso para realizar esta acción, ingrese la clave de autorización.'
                                , ClaveProgramacion);
                            if (resConfirmClaveAutorizacion) {
                                var resConfirmAperturaProgramacion = await APP.msg.confirmAperturaProgramacion(
                                    'Aperturar programación'
                                    , '');

                                if (resConfirmAperturaProgramacion) {
                                    var tmpTipoApertura = false;
                                    if (resConfirmAperturaProgramacion === 'true')
                                        tmpTipoApertura = true;

                                    await this.actualizarProgramacionManifiesto(tmpTipoApertura);

                                    this.objTurno.X_Estado = '';
                                }

                                auxResponse = true;
                            }
                            else
                                auxResponse = false;
                        }
                    }
                    else
                        auxResponse = false;

                    return auxResponse;
                },
                actualizarProgramacionManifiesto: async function (_tmpTipoApertura) {
                    var objRequest = {};
                    objRequest.CodiEmpresa = this.filtro.CodiEmpresa.id;
                    objRequest.CodiProgramacion = this.filtro.CodiProgramacion;
                    objRequest.TipoApertura = _tmpTipoApertura;
                    objRequest.CodiSucursalBus = this.filtro.CodiOrigenBus.id;
                    objRequest.NumBoleto = this.filtro.CodiProgramacion;

                    await APP.rq.axios2.post(APP.base + '/itinerarios/actualizarProgramacionManifiesto', objRequest)
                        .then(res => {
                            if (!res.data.Estado)
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                setAcompanianteVenta: async function (_ObjAcompaniante) {
                    if (this.list.ventas[this.indexVenta].IdVenta) {

                        this.disabledAsiento = true;

                        // Valida 'FechaViaje'
                        if (moment(this.filtro.Fecha, 'DD/MM/YYYY').isBefore(moment(), 'days')) {
                            APP.msg.warning('La fecha de viaje debe ser igual o mayor a la fecha actual.');
                            this.disabledAsiento = false;
                            return;
                        }

                        // Valida 'TurnoDisponible'
                        if (!IngresoManualPasajes) {
                            if (appController.validatePanel('54') === '1') {

                                var verificaTurnoDisponible = this.verificaTurnoDisponible();
                                if (!verificaTurnoDisponible) {
                                    APP.msg.warning('La hora de viaje ya pasó, verificar.');
                                    this.disabledAsiento = false;
                                    return;
                                }
                            }
                        }

                        // Valida 'Programación cerrada'
                        if (this.objTurno.Xcierre === '1') {
                            APP.msg.warning('La programación se encuentra cerrada.');
                            this.disabledAsiento = false;
                            return;
                        }

                        // Valida 'Manifiesto'
                        var resValidaManifiestoProgramacion = await this.validaManifiestoProgramacion();
                        if (!resValidaManifiestoProgramacion) {
                            this.disabledAsiento = false;
                            return;
                        }

                        var _ActionType = 0; // 1: Insert, 2: Update

                        if (this.list.ventas[this.indexVenta].ObjAcompaniante.Documento)
                            _ActionType = 2;
                        else
                            _ActionType = 1;

                        await this.acompanianteVentaCRUD(this.list.ventas[this.indexVenta].IdVenta, _ObjAcompaniante, _ActionType);

                        this.disabledAsiento = false;
                    }
                    else
                        this.list.ventas[this.indexVenta].ObjAcompaniante = _ObjAcompaniante;
                },
                acompanianteVentaCRUD: async function (_IdVenta, _ObjAcompaniante, _ActionType) {
                    var _this = this;

                    var objRequest = {};
                    objRequest.IdVenta = parseInt(_IdVenta);
                    objRequest.Acompaniante = _ObjAcompaniante;
                    objRequest.ActionType = _ActionType;

                    await APP.rq.axios.post(APP.base + '/itinerarios/acompanianteVentaCRUD', objRequest)
                        .then(async function (res) {
                            await appController.chargeTurnos();

                            _this.$nextTick(() => {
                                if (res.data.Estado) {
                                    document.getElementById('chckRegistrarNino').blur();
                                    APP.msg.info(res.data.Mensaje);
                                }
                                else
                                    APP.msg.error(res.data.Mensaje);
                            });
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                verificaHoraConfirmacion: async function (_Origen, _Destino) {
                    var auxResponse = '0';

                    await APP.rq.axios2.post(APP.base + '/itinerarios/verificaHoraConfirmacion', {
                        Origen: _Origen,
                        Destino: _Destino
                    })
                        .then(res => {
                            if (res.data.Estado)
                                auxResponse = res.data.Valor;
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);

                    return auxResponse;
                },
                validateFechaReservacion: function () {
                    this.list.ventas[this.indexVenta].FechaReservacion = this.$getValueDateTimePicker(event); // 'event' toma valor por defecto.

                    if (moment(this.list.ventas[this.indexVenta].FechaReservacion, 'DD/MM/YYYY').isAfter(moment(this.filtro.Fecha, 'DD/MM/YYYY'))) {
                        APP.msg.warning('La fecha de confirmación debe ser menor o igual a la fecha de viaje.');
                        return false; // Respuesta para el método del 'keyBinds'
                    }

                    if (moment(this.list.ventas[this.indexVenta].FechaReservacion, 'DD/MM/YYYY').isBefore(moment(), 'days')) {
                        APP.msg.warning('La fecha de confirmación debe ser igual o mayor a la fecha actual.');
                        return false; // Respuesta para el método del 'keyBinds'
                    }

                    this.recorridoTxtRuc();
                },
                validateHoraReservacion: async function () {
                    this.list.ventas[this.indexVenta].HoraReservacion = this.$getValueDateTimePicker_Hours(event);

                    var tmpHoraBase = appController.getHoraBaseReservacion(this.list.embarques, Usuario.CodiPuntoVenta);

                    if (this.list.ventas[this.indexVenta].FechaReservacion === moment().format('DD/MM/YYYY')) {

                        if (this.list.ventas[this.indexVenta].ValidadorClienteEspecial) {
                            if (moment(this.list.ventas[this.indexVenta].HoraReservacion, 'hh:mmA').isBefore(moment(), 'minutes')) {
                                APP.msg.warning('La hora de confirmación debe ser igual o mayor a la hora actual.');
                                return false;
                            }
                        }
                        else {
                            if (moment(this.list.ventas[this.indexVenta].HoraReservacion, 'hh:mmA').isSameOrBefore(moment(), 'minutes')) {
                                APP.msg.warning('La hora de confirmación debe ser mayor a la hora actual.');
                                return false;
                            }
                        }
                    }

                    if (this.list.ventas[this.indexVenta].FechaReservacion === this.filtro.Fecha) {
                        if (moment(this.list.ventas[this.indexVenta].HoraReservacion, 'hh:mmA').isAfter(moment(tmpHoraBase, 'hh:mmA'), 'minutes')) {
                            APP.msg.warning('La hora de confirmación debe ser menor o igual a la hora de embarque (' + tmpHoraBase + ').');
                            return false;
                        }

                        if (VerificaHoraConfirmacion !== '0') {

                            var HoraReal = moment(tmpHoraBase, 'hh:mmA').add(VerificaHoraConfirmacion, 'minutes');

                            if (moment(this.list.ventas[this.indexVenta].HoraReservacion, 'hh:mmA').isAfter(HoraReal, 'minutes')) {

                                if (!this.list.ventas[this.indexVenta].ValidadorClienteEspecial && !this.validatorReservaHC) {

                                    appClaveAutorizacion.horaReal = HoraReal.format('hh:mmA');
                                    appController.showClaveAutorizacion(ClaveHoraConfirmacion);

                                    await deferredModal($('#appClaveAutorizacion'), false).done(function () {
                                        appClaveAutorizacion.horaReal = '';
                                    });

                                    if (!this.validatorReservaHC) {
                                        document.getElementById('txtHoraReservacion').focus();
                                        return false;
                                    }
                                }
                            }
                        }

                        this.recorridoTxtRuc();
                    }
                },
                sendClaveAutorizacionReserva: async function (_CodiUsuario, _password) {
                    var auxResponse = false;

                    await APP.rq.axios2.post(APP.base + '/itinerarios/verificaClaveReserva', {
                        CodiUsr: _CodiUsuario,
                        Password: _password
                    })
                        .then(res => {
                            if (res.data.Estado) {
                                if (res.data.EsCorrecto) {
                                    APP.msg.info(res.data.Mensaje);
                                    auxResponse = true;
                                }
                                else
                                    APP.msg.warning(res.data.Mensaje);
                            }
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);

                    return auxResponse;
                },
                bgcMiniTicket: function (_NroAsiento) {
                    if (this.list.ventas[this.indexVenta].NroAsiento === _NroAsiento)
                        return { 'background-color': 'var(--emp-color)', 'border-color': 'var(--emp-color)' };
                    else
                        return { 'background-color': '#1e4672', 'border-color': '#1e4672' };
                },
                bgcEnlaceTurnos: function (_HoraPartida, _NomServicio) {
                    if (this.filtro.CodiServicio) {
                        if (this.filtro.Turno === _HoraPartida && this.filtro.CodiServicio.label === _NomServicio)
                            return { 'background-color': 'var(--emp-color)', 'color': 'white' };
                        else
                            return { 'color': 'var(--emp-color)' };
                    }
                },
                configEventKeyF5: function (e) {
                    if (e.keyCode === 116 && !e.ctrlKey) {
                        if (this.showVentas) {
                            e.preventDefault();
                            this.nextStep(10);
                        }
                    }
                },
                configEventKeyF3: function (e) {
                    if (e.keyCode === 114) {
                        if (this.showVentas && this.filtro.CodiProgramacion !== 0) {
                            e.preventDefault();

                            var objRequest = {};
                            objRequest.CodiEmpresa = this.filtro.CodiEmpresa;
                            objRequest.CodiOrigenBus = this.filtro.CodiOrigenBus;
                            objRequest.CodiPVOrigenBus = this.filtro.CodiPVOrigenBus;
                            objRequest.CodiDestinoBus = this.filtro.CodiDestinoBus;
                            objRequest.CodiServicio = this.filtro.CodiServicio;
                            objRequest.Fecha = this.filtro.Fecha;
                            objRequest.Turno = this.filtro.Turno;

                            appController.showManifiestoPasajeros(objRequest);
                        }
                    }
                },
                anularAsientosBloqueadosTb: async function (_asientoSel) {
                    this.disabledAsiento = true;

                    if (Usuario.Nivel === 1 || Usuario.Nivel === 2 || Usuario.Nivel === 4 || Usuario.Nivel === 11 || Usuario.Nivel === 50) {
                        if (await APP.msg.confirm(
                            'Desbloquear asiento',
                            '¿Desea desbloquear el asiento ' + _asientoSel.Tipo + '?')) {

                            var request = {};
                            request.CodiProgramacion = this.filtro.CodiProgramacion;
                            request.CodiOrigen = _asientoSel.CodiOrigen;
                            request.CodiDestino = _asientoSel.CodiDestino;
                            request.AsientosOcupados = this.getCadenaAsientosTbBloqueoAsientos(_asientoSel.Tipo, this.objTurno.TablaBloqueoAsientos.AsientosOcupados);
                            request.AsientosLiberados = this.objTurno.TablaBloqueoAsientos.AsientosLiberados + '' + _asientoSel.Tipo;
                            request.Fecha = this.objTurno.FechaProgramacion;

                            request.NroViaje = this.filtro.NroViaje;

                            await this.actualizarAsiOcuTbBloqueoAsientos(request);
                        }
                    }
                    else
                        APP.msg.warning('Nivel de usuario no autorizado para desbloquear asientos.');
                },
                getCadenaAsientosTbBloqueoAsientos: function (_NumeAsiento, _Asientos) {
                    var auxCadena = '';

                    for (var i = 0; i < _Asientos.length; i += 2) {
                        if (_NumeAsiento !== _Asientos.substr(i, 2))
                            auxCadena = auxCadena + _Asientos.substr(i, 2);
                    }

                    return auxCadena;
                },
                actualizarAsiOcuTbBloqueoAsientos: async function (_request) {
                    var _this = this;

                    await APP.rq.axios2.post(APP.base + '/itinerarios/actualizarAsiOcuTbBloqueoAsientos', _request)
                        .then(async function (res) {
                            await appController.chargeTurnos();

                            _this.$nextTick(() => {
                                if (res.data.Estado)
                                    APP.msg.info(res.data.Mensaje);
                                else
                                    APP.msg.error(res.data.Mensaje);
                            });
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                showContextMenuBloquearAsiento: function () {
                    var auxValidate = false;

                    var tmpAsientosLiberados = this.objTurno.TablaBloqueoAsientos.AsientosLiberados;

                    for (var i = 0; i < tmpAsientosLiberados.length; i += 2) {
                        if (this.itemSelected.Tipo === tmpAsientosLiberados.substr(i, 2)) {
                            auxValidate = true;
                            break;
                        }
                    }

                    return auxValidate;
                },
                showContextMenuReimprimir: function () {
                    var auxValidate = false;

                    if (
                        (this.itemSelected.FlagVenta === 'V' || this.itemSelected.FlagVenta === '7' || this.itemSelected.FlagVenta === '1')
                    )
                        auxValidate = true;

                    return auxValidate;
                },
                validateReimprimir: async function (_itemSelected) {
                    var auxValidate = {};
                    auxValidate.ValReimprimir = true;
                    auxValidate.ValCaja = false;

                    if (appController.validatePanel('235') === '1') {
                        var resConfirmCaja = await APP.msg.confirm(
                            'Ingreso de caja'
                            , '¿Desea generar la reimpresión con ingreso de caja?')

                        if (resConfirmCaja)
                            auxValidate.ValCaja = true;
                    }

                    if (appController.validatePanel('232') === '1') {

                        if (appController.validatePanel('226') === '1') {

                            var checkClaveAutorizacion = false;

                            appController.showClaveAutorizacion(ClaveReimpresionPanel226);

                            await deferredModal($('#appClaveAutorizacion'), true).done(function () {
                                appClaveAutorizacion.$nextTick(() => {
                                    appClaveAutorizacion.auditoria.TipoMovimiento = 'AUTORIZACION_REI';
                                    appClaveAutorizacion.auditoria.Boleto = _itemSelected.Boleto;
                                });
                            });

                            await deferredModal($('#appClaveAutorizacion'), false).done(function () {
                                appClaveAutorizacion.$nextTick(() => {
                                    checkClaveAutorizacion = appClaveAutorizacion.trustedPassword;
                                });
                            });

                            if (!checkClaveAutorizacion)
                                auxValidate.ValReimprimir = false;
                        }
                        else {
                            var resConfirmClaveAutorizacion = await APP.msg.confirmClaveAutorizacion(
                                ''
                                , 'Necesita permiso para realizar esta acción, ingrese la clave de autorización.'
                                , 'Rei_226');

                            if (!resConfirmClaveAutorizacion)
                                auxValidate.ValReimprimir = false;
                        }
                    }

                    return auxValidate;
                },
                openMenu: function (e, _item) {
                    // Animación 'ScrollTop'
                    animateScrollTop(800);

                    //Lo usamos para 'fillDataAsientoVendido'
                    if (_item.IdVenta && _item.Tipo !== this.list.ventas[this.indexVenta].NroAsiento)
                        this.bloquearAsiento(_item, true);

                    this.showContextMenu = true;
                    this.itemSelected = _item;

                    var varScrollTop = $(window).scrollTop();

                    Vue.nextTick(function () {
                        this.$refs.right.focus();
                        this.setMenu(e.y, e.x, varScrollTop);
                    }.bind(this));

                    e.preventDefault();
                },
                setMenu: function (top, left, varScrollTop) {
                    if (varScrollTop)
                        this.top = (top + varScrollTop - 105) + 'px';
                    else
                        this.top = (top + varScrollTop - 105) + 'px';

                    this.left = (left - 25) + 'px';
                },
                closeMenu: function () {
                    this.showContextMenu = false;
                    this.itemSelected = null;
                },
                contextMenuReimprimir: async function (_itemSelected) {
                    var auxBoletoCompleto = formatoBoletoCompleto(_itemSelected.TipoBoleto, _itemSelected.Boleto);

                    var resConfirmReimprimir = await APP.msg.confirm(
                        'Reimprimir boleto'
                        , 'El boleto N° ' + this.$options.filters.formatNroVenta(auxBoletoCompleto) + ' será reimpreso, ¿Desea continuar?')

                    if (resConfirmReimprimir) {
                        var resValidateReimprimir = await this.validateReimprimir(_itemSelected);
                        if (resValidateReimprimir.ValReimprimir) {
                            if (_itemSelected) {
                                var ListaVentasRealizadas = [];

                                var objVentaRealizada = {};
                                objVentaRealizada.IdVenta = _itemSelected.IdVenta;
                                objVentaRealizada.NumeAsiento = _itemSelected.NumeAsiento;
                                objVentaRealizada.BoletoTipo = _itemSelected.TipoBoleto;
                                objVentaRealizada.BoletoSerie = _itemSelected.Boleto.substring(0, 3);
                                objVentaRealizada.BoletoNum = _itemSelected.Boleto.substring(4);
                                objVentaRealizada.CodDocumento = _itemSelected.RucContacto ? '01' : '03';
                                objVentaRealizada.EmisionFecha = _itemSelected.FechaVenta;
                                objVentaRealizada.EmisionHora = _itemSelected.HoraVenta;
                                objVentaRealizada.CajeroCod = _itemSelected.CodiUsuario;
                                objVentaRealizada.CajeroNom = _itemSelected.NomUsuario;
                                objVentaRealizada.PasNombreCom = _itemSelected.Nombres + " " + _itemSelected.ApellidoPaterno + " " + _itemSelected.ApellidoMaterno;
                                objVentaRealizada.PasRuc = _itemSelected.RucContacto;
                                objVentaRealizada.PasRazSocial = _itemSelected.RazonSocial;
                                objVentaRealizada.PasDireccion = _itemSelected.Direccion;
                                objVentaRealizada.NomOriPas = _itemSelected.NomOrigen;
                                objVentaRealizada.NomDesPas = _itemSelected.NomDestino;
                                objVentaRealizada.DocTipo = _itemSelected.TipoDocumento;
                                objVentaRealizada.DocNumero = _itemSelected.NumeroDocumento;
                                objVentaRealizada.PrecioCan = _itemSelected.PrecioVenta;
                                objVentaRealizada.NomServicio = this.filtro.CodiServicio.label;
                                objVentaRealizada.FechaViaje = _itemSelected.FechaViaje;
                                objVentaRealizada.EmbarqueDir = _itemSelected.EmbarqueDir;
                                objVentaRealizada.EmbarqueHora = _itemSelected.EmbarqueHora;
                                objVentaRealizada.EmpCodigo = _itemSelected.CodiEmpresa;
                                objVentaRealizada.BusCodigo = this.objPlano.CodiBus;
                                objVentaRealizada.PVentaCodigo = _itemSelected.CodiPuntoVenta;
                                objVentaRealizada.EmbarqueCod = _itemSelected.EmbarqueCod;
                                var auxObjEmpresa = appController.findEmpresa(_itemSelected.CodiEmpresa);
                                objVentaRealizada.EmpRuc = auxObjEmpresa.Ruc;
                                objVentaRealizada.EmpRazSocial = auxObjEmpresa.label;
                                objVentaRealizada.EmpDireccion = auxObjEmpresa.Direccion;
                                objVentaRealizada.EmpElectronico = auxObjEmpresa.Electronico;
                                objVentaRealizada.TipoTerminalElectronico = this.TipoTerminalElectronico;
                                objVentaRealizada.TipoImpresora = this.TipoImpresora;
                                objVentaRealizada.ValidateCaja = resValidateReimprimir.ValCaja;
                                objVentaRealizada.HoraViaje = this.filtro.Turno;

                                objVentaRealizada.TipoPago = _itemSelected.TipoPago;
                                objVentaRealizada.FlagVenta = _itemSelected.FlagVenta;

                                ListaVentasRealizadas.push(objVentaRealizada);

                                appController.convertirVentaToBase64(ListaVentasRealizadas, TipoReimprimir);
                            }
                        }
                    }

                    this.closeMenu();
                },
                contextMenuAnular: function (_itemSelected) {
                    if (_itemSelected) {
                        switch (_itemSelected.FlagVenta) {
                            case 'R':
                                this.cancelarReserva(_itemSelected);
                                break;
                            case 'AB':
                                this.anularAsientosBloqueadosTb(_itemSelected);
                                break;
                            default:
                                this.sendToAnularVenta(_itemSelected);
                        }
                    }

                    this.closeMenu();
                },
                contextMenuReintegro: async function (_itemSelected) {
                    let _this = this;
                    if (_itemSelected) {

                        _this.disabledAsientos = true;

                        // Valida 'FechaViaje'
                        if (moment(_this.filtro.Fecha, 'DD/MM/YYYY').isBefore(moment(), 'days')) {
                            APP.msg.warning('La fecha de viaje debe ser igual o mayor a la fecha actual.');
                            _this.disabledAsientos = false;
                            return;
                        }

                        // Valida 'TurnoDisponible'
                        if (!IngresoManualPasajes) {
                            if (appController.validatePanel('54') === '1') {

                                var verificaTurnoDisponible = _this.verificaTurnoDisponible();
                                if (!verificaTurnoDisponible) {
                                    APP.msg.warning('La hora de viaje ya pasó, verificar.');
                                    _this.disabledAsientos = false;
                                    return;
                                }
                            }
                        }

                        // Valida 'Manifiesto'
                        var resValidaManifiestoProgramacion = await _this.validaManifiestoProgramacion();
                        if (!resValidaManifiestoProgramacion) {
                            _this.disabledAsientos = false;
                            return;
                        }

                        _this.disabledAsientos = false;
                        appController.showReintegro(_itemSelected);
                    }
                    this.closeMenu();
                },
                contextMenuBloquearAsiento: async function (_asientoSel) {
                    this.disabledAsiento = true;

                    if (Usuario.Nivel === 1 || Usuario.Nivel !== 11) {
                        if (await APP.msg.confirm(
                            'Bloquear asiento',
                            '¿Desea bloquear el asiento ' + _asientoSel.Tipo + '?')) {

                            var request = {};
                            request.CodiProgramacion = this.filtro.CodiProgramacion;
                            request.CodiOrigen = this.objTurno.TablaBloqueoAsientos.CodiOrigen;
                            request.CodiDestino = this.objTurno.TablaBloqueoAsientos.CodiDestino;
                            request.AsientosOcupados = this.objTurno.TablaBloqueoAsientos.AsientosOcupados + '' + _asientoSel.Tipo;
                            request.AsientosLiberados = this.getCadenaAsientosTbBloqueoAsientos(_asientoSel.Tipo, this.objTurno.TablaBloqueoAsientos.AsientosLiberados);
                            request.Fecha = this.objTurno.FechaProgramacion;

                            request.NroViaje = this.filtro.NroViaje;

                            await this.actualizarAsiOcuTbBloqueoAsientos(request);
                        }
                    }
                    else
                        APP.msg.warning('Nivel de usuario no autorizado para bloquear asientos.');
                },
                //NEW
                contextMenuCTipoPago: async function (_itemSelected) {
                    let _this = this;
                    if (_itemSelected) {

                        _this.disabledAsientos = true;

                        // Valida 'FechaViaje'
                        if (moment(_this.filtro.Fecha, 'DD/MM/YYYY').isBefore(moment(), 'days')) {
                            APP.msg.warning('La fecha de viaje debe ser igual o mayor a la fecha actual.');
                            _this.disabledAsientos = false;
                            return;
                        }

                        // Valida 'TurnoDisponible'
                        if (!IngresoManualPasajes) {
                            if (appController.validatePanel('54') === '1') {

                                var verificaTurnoDisponible = _this.verificaTurnoDisponible();
                                if (!verificaTurnoDisponible) {
                                    APP.msg.warning('La hora de viaje ya pasó, verificar.');
                                    _this.disabledAsientos = false;
                                    return;
                                }
                            }
                        }

                        // Valida 'Manifiesto'
                        var resValidaManifiestoProgramacion = await _this.validaManifiestoProgramacion();
                        if (!resValidaManifiestoProgramacion) {
                            _this.disabledAsientos = false;
                            return;
                        }

                        if (appController.validatePanelClave('7') === '1') {

                            var resConfirmClaveAutorizacion = await APP.msg.confirmClaveAutorizacion(
                                `${_.padStart(ClaveCambioTipoPago, 3, '0')} - Cambio de Tipo de Pago`
                                , 'Necesita permiso para realizar esta acción, ingrese la clave de autorización.'
                                , ClaveCambioTipoPago);

                            if (!resConfirmClaveAutorizacion) {
                                _this.disabledAsientos = false;
                                return;
                            }
                        }

                        _this.disabledAsientos = false;
                        appController.showCTipoPago(_itemSelected);
                    }
                    this.closeMenu();
                },
                signalR_BloquearAsiento: function (_NroAsiento) {
                    var objAsiento = this.findObjectAsiento(_NroAsiento);
                    if (objAsiento)
                        objAsiento.NumeAsiento = parseInt(_NroAsiento);
                },
                signalR_LiberarAsiento: function (_NroAsiento) {
                    var objAsiento = this.findObjectAsiento(_NroAsiento);
                    if (objAsiento) {
                        objAsiento.ApellidoMaterno = "";
                        objAsiento.ApellidoPaterno = "";
                        objAsiento.Boleto = "";
                        objAsiento.ClavUsuarioReintegro = 0;
                        objAsiento.CodiDestino = 0;
                        objAsiento.CodiEmpresa = 0;
                        objAsiento.CodiEsca = '';
                        objAsiento.CodiOrigen = 0;
                        objAsiento.CodiPuntoVenta = 0;
                        objAsiento.CodiSucursal = 0;
                        objAsiento.CodiUsuario = 0;
                        objAsiento.Color = "";
                        objAsiento.Correo = "";
                        objAsiento.Direccion = "";
                        objAsiento.Edad = 0;
                        objAsiento.EmbarqueCod = 0;
                        objAsiento.EmbarqueDir = '';
                        objAsiento.EmbarqueHora = '';
                        objAsiento.Especial = '';
                        objAsiento.FechaNacimiento = "";
                        objAsiento.FechaReservacion = "";
                        objAsiento.FechaVenta = "";
                        objAsiento.FechaViaje = "";
                        objAsiento.FlagVenta = "";
                        objAsiento.HoraReservacion = "";
                        objAsiento.HoraVenta = "";
                        objAsiento.IDS = 0;
                        objAsiento.IdVenta = "";
                        objAsiento.ImpManifiesto = "";
                        objAsiento.Info = "";
                        objAsiento.Nacionalidad = "";
                        objAsiento.NomDestino = "";
                        objAsiento.NomOrigen = "";
                        objAsiento.NomPuntoVenta = "";
                        objAsiento.NomUsuario = "";
                        objAsiento.Nombres = "";
                        objAsiento.NumeAsiento = 0;
                        objAsiento.NumeSolicitud = "";
                        objAsiento.NumeroDocumento = "";
                        objAsiento.ObjAcompaniante = {
                            CodiTipoDoc: '',
                            Documento: '',
                            Edad: '',
                            FechaNac: '',
                            NombreCompleto: '',
                            Parentesco: '',
                            Sexo: ''
                        };
                        objAsiento.Observacion = '';
                        objAsiento.PrecVentaReintegro = 0;
                        objAsiento.PrecioVenta = 0;
                        objAsiento.RazonSocial = "";
                        objAsiento.RecogeEn = "";
                        objAsiento.RucContacto = "";
                        objAsiento.Sexo = "";
                        objAsiento.Sigla = "";
                        objAsiento.SucVentaReintegro = 0;
                        objAsiento.Telefono = "";
                        objAsiento.TipoBoleto = "";
                        objAsiento.TipoDocumento = "";
                        objAsiento.TipoPago = "";
                        objAsiento.ValeRemoto = "";
                    }
                },
                signalR_LiberarArregloAsientos: function (_ArregloNroAsientos) {
                    var _this = this;
                    _ArregloNroAsientos.forEach(function (nroAsiento) {
                        _this.signalR_LiberarAsiento(nroAsiento)
                    });
                },
                signalR_ActualizarTurnoPlano: function (_ListaVentasRealizadas) {
                    var _this = this;
                    _ListaVentasRealizadas.forEach(function (obj) {
                        var objAsiento = _this.findObjectAsiento(obj.NumeAsiento);
                        if (objAsiento)
                            objAsiento.NumeAsiento = parseInt(obj.NumeAsiento);
                    });
                },
                onDragstart: function (item) {
                    // Animación 'ScrollTop'
                    animateScrollTop(800);

                    // Lo usamos para 'fillDataAsientoVendido'
                    if (item.IdVenta && item.Tipo !== this.list.ventas[this.indexVenta].NroAsiento)
                        this.bloquearAsiento(item, true);
                },
                onDrop: function (event, item) {
                    event.stopPropagation();
                    event.preventDefault();

                    if (!item.IdVenta)
                        this.bloquearAsiento(item, true, true);
                }
            },
            computed: {
                setCadenaEmbarques: function () {
                    var cadenaEmbarques = '';
                    for (i = 0; i < this.list.embarques.length; i++) {
                        if (i !== this.list.embarques.length - 1)
                            cadenaEmbarques += '[ ' + this.list.embarques[i].Lugar + ', ' + this.list.embarques[i].Hora + ' ] - ';
                        else
                            cadenaEmbarques += '[ ' + this.list.embarques[i].Lugar + ', ' + this.list.embarques[i].Hora + ' ]';
                    }
                    return cadenaEmbarques;
                },
                bloquearPagoPorFlagVenta: function () {
                    if (!this.list.ventas[this.indexVenta].FlagVenta
                        || (this.pickedBusVenta === 'V' && this.list.ventas[this.indexVenta].FlagVenta === 'R')
                    )
                        return false;
                    else
                        return true;
                },
                getFiltrosResumen: function () {
                    var tmpOrigenPas = '';
                    var tmpDestinoPas = '';
                    if (this.filtro.CodiSucursal)
                        tmpOrigenPas = this.filtro.CodiSucursal.label;
                    if (this.filtro.CodiDestinoPas)
                        tmpDestinoPas = this.filtro.CodiDestinoPas.label;

                    return tmpOrigenPas.substring(0, 3) + '-' + tmpDestinoPas.substring(0, 3) + ' | ' + this.filtro.Turno + ' | ' + this.filtro.Fecha;
                },
                setCheckRegistrarNino: {
                    get: function () {
                        return this.list.ventas[this.indexVenta].CheckRegistrarNino;
                    },
                    set: function (value) {
                        if (value) {
                            this.showRegistrarAcompaniante();
                            this.list.ventas[this.indexVenta].CheckRegistrarNino = value;
                        }
                        else {
                            if (this.list.ventas[this.indexVenta].ObjAcompaniante.Documento) {
                                this.showRegistrarAcompaniante();
                                this.list.ventas[this.indexVenta].CheckRegistrarNino = !value;
                            }
                            else
                                this.list.ventas[this.indexVenta].CheckRegistrarNino = value;
                        }
                    }
                },
                listVentasCampoDocumento: function () {
                    return this.list.ventas[this.indexVenta].Documento;
                },
                listVentasCampoRuc: function () {
                    return this.list.ventas[this.indexVenta].Ruc;
                },
                listVentasCampoCodiTipoDoc: function () {
                    return this.list.ventas[this.indexVenta].CodiTipoDoc;
                },
                listVentasCampoFechaReservacion: function () {
                    return this.list.ventas[this.indexVenta].FechaReservacion;
                },
                listVentasCampoHoraReservacion: function () {
                    return this.list.ventas[this.indexVenta].HoraReservacion;
                }
            },
            watch: {
                'filtro.CodiEmpresa': function (newVal, oldVal) {
                    this.showPlano = false;
                },
                'filtro.CodiSucursal': function (newVal, oldVal) {
                    this.showPlano = false;
                },
                'filtro.CodiOrigenBus': function (newVal, oldVal) {
                    // Evita doble consulta cuando 'getTurno'
                    if (this.processing)
                        return;

                    if (newVal) {
                        if (String(newVal.id).replace(/\s/g, '').length > 0 && typeof oldVal !== 'string') {
                            this.list.pvOrigenesBus = appController.getListPvOrigenesBus(newVal.id);
                            this.filtro.CodiPVOrigenBus = null;
                        }
                    }
                    else {
                        this.list.pvOrigenesBus = [];
                        this.filtro.CodiPVOrigenBus = null;
                    }

                    this.showPlano = false;
                },
                'filtro.CodiPVOrigenBus': function (newVal, oldVal) {
                    this.showPlano = false;
                },
                'filtro.CodiDestinoBus': function (newVal, oldVal) {
                    this.showPlano = false;
                },
                'filtro.CodiServicio': function (newVal, oldVal) {
                    this.showPlano = false;
                },
                'filtro.CodiDestinoPas': function (newVal, oldVal) {
                    this.showPlano = false;
                },
                'filtro.Turno': function (newVal, oldVal) {
                    if (newVal)
                        this.filtro.Turno = newVal.replace(' ', '');

                    if (newVal.replace(' ', '') !== oldVal.replace(' ', ''))
                        this.showPlano = false;
                },
                'filtro.Fecha': function (newVal, oldVal) {
                    if (moment(newVal, 'DD/MM/YYYY').isValid()) {
                        var _nombreDia = moment(newVal, 'DD/MM/YYYY').format('dddd') || '';
                        document.getElementById('lblNameDay_Fecha').innerHTML = 'DÍA: ' + _nombreDia.toUpperCase();
                    }
                    else
                        document.getElementById('lblNameDay_Fecha').innerHTML = 'DÍA:';

                    this.showPlano = false;
                },
                'list.ventas': {
                    handler: function (after, before) {
                        this.slider = this.list.ventas.length;
                    },
                    deep: true
                },
                'list.pvOrigenesBus': function (newVal, oldVal) {
                    this.$nextTick(() => {
                        this.$refs.refPVOrigenBus.typeAheadPointer = this.$getSelectorVselect(this.list.pvOrigenesBus, this.filtro.CodiPVOrigenBus);
                    });
                },
                'list.destinosPas': function (newVal, oldVal) {
                    this.$nextTick(() => {
                        this.$refs.refDestinoPas_2.typeAheadPointer = this.$getSelectorVselect(this.list.destinosPas, this.filtro.CodiDestinoPas);
                    });
                },
                'list.tiposDoc': function (newVal, oldVal) {
                    this.$nextTick(() => {
                        this.$refs.refTipoDoc.typeAheadPointer = this.$getSelectorVselect(this.list.tiposDoc, this.list.ventas[this.indexVenta].CodiTipoDoc)
                    });
                },
                pickedBusVenta: function (newVal, oldVal) {
                    if (newVal && newVal === 'R') {
                        if (appController.validatePanel('95') === '1')
                            this.list.tiposDoc = _.cloneDeep(tiposDoc);
                    }
                    else {
                        if (this.list.tiposDoc.length > appController.getTiposDocumentosSinRaya().length)
                            this.list.tiposDoc = appController.getTiposDocumentosSinRaya();
                    }
                },
                listVentasCampoCodiTipoDoc: function (newVal, oldVal) {
                    if (newVal) {
                        this.mask.documento = (newVal.TipoDatoDocumento).repeat(newVal.MaxLonDocumento);

                        if (!this.list.ventas[this.indexVenta].IdVenta) {
                            if (newVal.id === '01')
                                this.list.ventas[this.indexVenta].Nacionalidad = NacionalidadPorDefault;
                            else
                                this.list.ventas[this.indexVenta].Nacionalidad = '';

                            if (this.oldIndexVenta === this.indexVenta) {

                                if (this.pickedBusVenta === 'R' && newVal.id === '00') {
                                    this.list.ventas[this.indexVenta].Documento = '0';
                                    this.disabledDocumentoRaya = true;
                                }
                                else {
                                    this.list.ventas[this.indexVenta].Documento = '';
                                    this.disabledDocumentoRaya = false;
                                }

                                this.clearUser();
                            }
                        }
                    }
                },
                listVentasCampoDocumento: function (newVal, oldVal) {
                    if (this.oldIndexVenta === this.indexVenta) {
                        if (oldVal && oldVal.length >= 8 && !this.list.ventas[this.indexVenta].IdVenta)
                            this.clearUser();
                    }
                },
                listVentasCampoRuc: function (newVal, oldVal) {
                    if (this.oldIndexVenta === this.indexVenta) {

                        if (oldVal && (newVal.length === 0 || oldVal.length >= 11) && !this.list.ventas[this.indexVenta].IdVenta) {
                            this.clearRazSoc();
                            this.list.ventas[this.indexVenta].DisabledRazonSocial = false;
                        }
                    }

                    switch (this.pickedBusVenta) {
                        case '7':
                            {
                                if (newVal.length === 11) {
                                    switch (this.TipoTerminalElectronico) {
                                        case 'M':
                                            {
                                                if (this.CorrelativoPaseFactura === '0000-00000000') {

                                                    if (this.CorrelativoPaseBoleta === '0000-00000000')
                                                        this.Correlativo = _.cloneDeep(this.CorrelativoVentaBoleta);
                                                    else
                                                        this.Correlativo = _.cloneDeep(this.CorrelativoPaseBoleta);
                                                }
                                                else
                                                    this.Correlativo = _.cloneDeep(this.CorrelativoPaseFactura);
                                            };
                                            break;
                                        case 'E':
                                            {
                                                this.Correlativo = _.cloneDeep(this.CorrelativoPaseFactura);

                                                if (this.Correlativo === 'F000-00000000' && !this.list.ventas[this.indexVenta].FlagVenta)
                                                    APP.msg.error('No se encontró serie para el boleto.');
                                            };
                                            break;
                                    }
                                }
                                else {
                                    if (newVal.length === 0) {
                                        switch (this.TipoTerminalElectronico) {
                                            case 'M':
                                                {
                                                    if (this.CorrelativoPaseBoleta === '0000-00000000')
                                                        this.Correlativo = _.cloneDeep(this.CorrelativoVentaBoleta);
                                                    else
                                                        this.Correlativo = _.cloneDeep(this.CorrelativoPaseBoleta);
                                                };
                                                break;
                                            case 'E':
                                                {
                                                    this.Correlativo = _.cloneDeep(this.CorrelativoPaseBoleta);

                                                    if (this.Correlativo === 'B000-00000000' && !this.list.ventas[this.indexVenta].FlagVenta)
                                                        APP.msg.error('No se encontró serie para el boleto.');
                                                };
                                                break;
                                        }
                                    }
                                }
                            };
                            break;
                        default:
                            {
                                if (newVal.length === 11) {
                                    switch (this.TipoTerminalElectronico) {
                                        case 'M':
                                            {
                                                var auxCorrelativoCredito = '0000-00000000';

                                                if (appController.validatePanel('105') === '1') {
                                                    if (this.pickedBusVenta !== '1') {
                                                        if (appController.validatePanel('145') === '1')
                                                            auxCorrelativoCredito = _.cloneDeep(this.CorrelativoCredito);
                                                    }
                                                }

                                                if (auxCorrelativoCredito === '0000-00000000') {
                                                    if (this.CorrelativoVentaFactura === '0000-00000000')
                                                        this.Correlativo = _.cloneDeep(this.CorrelativoVentaBoleta);
                                                    else
                                                        this.Correlativo = _.cloneDeep(this.CorrelativoVentaFactura);
                                                }
                                                else
                                                    this.Correlativo = _.cloneDeep(auxCorrelativoCredito);
                                            };
                                            break;
                                        case 'E':
                                            {
                                                this.Correlativo = _.cloneDeep(this.CorrelativoVentaFactura);

                                                if (this.Correlativo === 'F000-00000000' && !this.list.ventas[this.indexVenta].FlagVenta)
                                                    APP.msg.error('No se encontró serie para el boleto.');
                                            };
                                            break;
                                    }
                                }
                                else {
                                    if (newVal.length === 0)
                                        this.Correlativo = _.cloneDeep(this.CorrelativoVentaBoleta);
                                }
                            };
                    }
                },
                listVentasCampoFechaReservacion: function (newVal, oldVal) {
                    if (newVal && newVal.length === 10) {
                        this.list.ventas.forEach(function (objVenta) {
                            objVenta.FechaReservacion = newVal;
                        });
                    }
                },
                listVentasCampoHoraReservacion: function (newVal, oldVal) {
                    if (newVal && newVal.length === 8) {
                        this.list.ventas.forEach(function (objVenta) {
                            objVenta.HoraReservacion = newVal;
                        });
                    }
                },
                // Debe ser el último watch que se ejecute.
                indexVenta: function (newVal, oldVal) {
                    this.oldIndexVenta = _.cloneDeep(this.indexVenta);
                }
            }
        });

        var appVueTipoPago = new Vue({
            el: '#appVueTipoPago',
            data: {
                tipoPago: '',
                tarjeta: null,
                numeroTarjeta: '',
                distrito: null,
                direccion: '',
                observacion: '',
                embarque: null,
                arribo: null,
                list: {
                    tiposPago: [],
                    distritos: [],
                    tarjetas: [],
                    embarques: [],
                    arribos: [],
                    ventas: []
                },
                ticketVenta: null,
                sumaTotal: 0,
                efectivo: '',
                tarjetaCant: '',
                cantAsientos: 0,
                importePagado: '',
                vuelto: '',
                processing: false,
                disabledTipoPago: false
            },
            mounted: function () {
                this.getTipoPago();
                this.getTarjetasCredito();
                this.getCuidades();
            },
            methods: {
                show: function (embarques, arribos, ticketVenta, listaVentas) {
                    this.limpiarCampos();
                    this.list.embarques = embarques;
                    this.list.arribos = arribos;
                    this.ticketVenta = ticketVenta;
                    this.list.ventas = listaVentas;
                    this.sumaTotal = _.sumBy(this.list.ventas, o => { return parseFloat(o.Precio); });
                    this.cantAsientos = this.list.ventas.length;
                    this.tipoPago = '01';

                    switch (this.$getValuePickedBusVenta()) {
                        case 'R': // Reserva
                            this.saveVenta();
                            return;
                        case '7': // Pase de cortesía
                        case '1': // Crédito
                            this.importePagado = parseFloat(this.sumaTotal).toFixed(2);
                            this.vuelto = '0.00';
                            this.disabledTipoPago = true;
                            break;
                    }

                    $('#appVueTipoPago').modal('show');
                },
                getTipoPago: function () {
                    var _this = this;
                    APP.rq.axios2.get(APP.base + '/base/get-tipoPago')
                        .then(res => {
                            if (res.data.Estado)
                                _this.list.tiposPago = _.cloneDeep(res.data.Valor);
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                getTarjetasCredito: function () {
                    var _this = this;
                    APP.rq.axios2.get(APP.base + '/base/get-tarjetasCredito')
                        .then(res => {
                            if (res.data.Estado)
                                _this.list.tarjetas = _.cloneDeep(res.data.Valor);
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                getCuidades: function () {
                    var _this = this;
                    APP.rq.axios2.get(APP.base + '/base/get-cuidades')
                        .then(res => {
                            if (res.data.Estado)
                                _this.list.distritos = _.cloneDeep(res.data.Valor);
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                saveVenta: async function () {
                    var _this = this;

                    // Valida recorrido del modal 'Tipo pago'
                    switch (this.$getValuePickedBusVenta()) {
                        case 'R': // Reserva
                            break;
                        default:
                            {
                                if (!_this.recorridoSectionTipoPagos(true))
                                    return;
                            };
                            break;
                    }

                    _this.processing = true;
                    appController.disabledAsientos(true);

                    // Valida 'FechaViaje'
                    if (moment(appVueVenta.filtro.Fecha, 'DD/MM/YYYY').isBefore(moment(), 'days')) {
                        APP.msg.warning('La fecha de viaje debe ser igual o mayor a la fecha actual.');
                        _this.processing = false;
                        appController.disabledAsientos(false);
                        document.getElementById('btnTipoPago').disabled = false;
                        return;
                    }

                    // Valida 'TurnoDisponible'
                    if (!IngresoManualPasajes) {
                        if (appController.validatePanel('54') === '1') {

                            var resVerificaTurnoDisponible = appController.verificaTurnoDisponible();
                            if (!resVerificaTurnoDisponible) {
                                APP.msg.warning('La hora de viaje ya pasó, verificar.');
                                _this.processing = false;
                                appController.disabledAsientos(false);
                                document.getElementById('btnTipoPago').disabled = false;
                                return;
                            }
                        }
                    }

                    // Valida 'Programación cerrada'
                    if (appVueVenta.objTurno.Xcierre === '1') {
                        APP.msg.warning('La programación se encuentra cerrada.');
                        _this.processing = false;
                        appController.disabledAsientos(false);
                        document.getElementById('btnTipoPago').disabled = false;
                        return;
                    }

                    // Valida 'Manifiesto'
                    var resValidaManifiestoProgramacion = await appController.validaManifiestoProgramacion();
                    if (!resValidaManifiestoProgramacion) {
                        _this.processing = false;
                        appController.disabledAsientos(false);
                        document.getElementById('btnTipoPago').disabled = false;
                        return;
                    }

                    $("#appVueTipoPago").modal('hide');

                    // Para calcular 'input.Credito' -> (Multipago)
                    var canTotalCredito = _.cloneDeep(parseFloat(_this.tarjetaCant || '0') || 0);

                    var listado = [];
                    for (const objVenta of _this.list.ventas) {
                        var input = {};
                        input.CodiEmpresa = _this.ticketVenta.CodiEmpresa;
                        input.CodiOrigen = _this.ticketVenta.CodiOrigen;
                        input.CodiDestino = _this.ticketVenta.CodiDestino;
                        input.CodiProgramacion = _this.ticketVenta.CodiProgramacion;
                        input.RucCliente = objVenta.Ruc;
                        input.NomEmpresaRuc = objVenta.RazonSocial;
                        input.DirEmpresaRuc = objVenta.Direccion;
                        input.NumeAsiento = objVenta.NroAsiento;
                        input.FlagVenta = _this.ticketVenta.FlagVenta;
                        input.PrecioVenta = parseFloat(objVenta.Precio);
                        input.Nombre = (objVenta.Nombres + ',' + objVenta.ApellidoPaterno + ',' + objVenta.ApellidoMaterno);
                        input.Edad = objVenta.Edad;
                        input.Telefono = objVenta.Telefono;
                        input.Dni = objVenta.Documento;
                        input.TipoDocumento = objVenta.CodiTipoDoc.id;
                        input.Sexo = objVenta.Sexo.id;
                        input.TipoPago = _this.tipoPago;
                        input.FechaViaje = _this.ticketVenta.FechaViaje;
                        input.HoraViaje = _this.ticketVenta.HoraViaje;
                        input.CodiServicio = _this.ticketVenta.CodiServicio;
                        input.CodiEmbarque = (_this.embarque ? _this.embarque.CodiPuntoVenta : _this.ticketVenta.CodiOrigen);
                        input.CodiArribo = (_this.arribo ? _this.arribo.CodiPuntoVenta : _this.ticketVenta.CodiDestino);
                        input.HoraEmbarque = (_this.embarque ? _this.embarque.Hora : _this.ticketVenta.HoraViaje);
                        input.NivelAsiento = objVenta.NivelAsiento;
                        input.NomDestino = _this.ticketVenta.NomDestino;
                        input.NomServicio = _this.ticketVenta.NomServicio;
                        input.NomOrigen = _this.ticketVenta.NomOrigen;
                        input.Nacionalidad = objVenta.Nacionalidad;
                        input.NroViaje = _this.ticketVenta.NroViaje;
                        input.FechaProgramacion = _this.ticketVenta.FechaProgramacion;
                        input.HoraProgramacion = _this.ticketVenta.HoraProgramacion;
                        input.CodiBus = _this.ticketVenta.CodiBus;
                        input.CodiSucursal = _this.ticketVenta.CodiSucursal;
                        input.CodiRuta = _this.ticketVenta.CodiRuta;
                        input.CodiTarjetaCredito = (_this.tarjeta ? _this.tarjeta.id : '');
                        input.NumeTarjetaCredito = _this.numeroTarjeta;
                        input.CodiZona = (_this.distrito ? _this.distrito.id : '');
                        input.Direccion = _this.direccion;
                        input.Observacion = _this.observacion;
                        // Calculamos 'input.Credito'
                        if (input.TipoPago === '02') {
                            if (canTotalCredito) {
                                if (canTotalCredito >= input.PrecioVenta) {
                                    canTotalCredito = canTotalCredito - input.PrecioVenta;
                                    input.Credito = input.PrecioVenta;
                                }
                                else {
                                    input.Credito = canTotalCredito;
                                    canTotalCredito = 0;
                                }
                            }
                            else {
                                input.Credito = 0;
                                input.TipoPago = '01';
                            }
                        }
                        // -------------------
                        input.ObjAcompaniante = objVenta.ObjAcompaniante;
                        input.Concepto = objVenta.Recoger;
                        input.DirEmbarque = (_this.embarque ? _this.embarque.Lugar : _this.ticketVenta.NomOrigen);
                        input.FechaAbierta = objVenta.FechaAbierta;
                        input.PrecioNormal = objVenta.PrecioNormal;
                        input.ValidadorDescuento = objVenta.ValidadorDescuento;
                        input.ObservacionDescuento = objVenta.ObservacionDescuento;
                        input.ValidadorDescuentoControl = objVenta.ValidadorDescuentoControl;
                        input.DescuentoTipoDC = objVenta.DescuentoTipoDC;
                        input.ImporteDescuentoDC = objVenta.ImporteDescuentoDC;
                        input.ImporteDescontadoDC = objVenta.ImporteDescontadoDC;
                        input.AutorizadoDC = objVenta.AutorizadoDC;
                        input.IngresoManualPasajes = IngresoManualPasajes;
                        input.EstadoAsiento = (objVenta.ValidadorClienteEspecial ? 'N1' : 'N');

                        input.NomEmpresa = _this.ticketVenta.NomEmpresa;
                        input.RucEmpresa = _this.ticketVenta.RucEmpresa;
                        input.DireccionEmpresa = _this.ticketVenta.DireccionEmpresa;
                        input.ElectronicoEmpresa = _this.ticketVenta.ElectronicoEmpresa;
                        input.TipoTerminalElectronico = _this.ticketVenta.TipoTerminalElectronico;
                        input.TipoImpresora = _this.ticketVenta.TipoImpresora;

                        // TIPOS DE VENTA
                        switch (this.$getValuePickedBusVenta()) {
                            case '7': // PASE DE CORTESÍA
                                input.CodiGerente = objVenta.CodiGerente;
                                input.CodiSocio = objVenta.CodiSocio;
                                input.Concepto = objVenta.Concepto;
                                break;
                            case '1': // CRÉDITO
                                input.IdContrato = _this.ticketVenta.IdContrato;
                                input.IdPrecio = _this.ticketVenta.IdPrecio; // IdTabla
                                input.IdRuc = _this.ticketVenta.IdRuc;
                                input.NroSolicitud = objVenta.NroSolicitud;
                                input.IdArea = (objVenta.Area ? objVenta.Area.id : 0);
                                input.FlgIda = objVenta.BoletoTipoDir;
                                input.FechaCita = objVenta.FechaCita;
                                input.IdHospital = (objVenta.Hospital ? objVenta.Hospital.id : 0);
                                input.FlagPrecioNormal = objVenta.FlagPrecioNormal;
                                break;;
                            case 'V': // VENTA
                                {
                                    if (objVenta.FlagVenta === 'R') {
                                        input.IdVenta = objVenta.IdVenta;
                                        input.FlagVenta = objVenta.FlagVenta;

                                        // Calcula 'HoraEscala' para eliminar reservas por escala
                                        var objPuntoEmbarque = _.find(_this.list.embarques, { 'CodiPuntoVenta': Usuario.CodiPuntoVenta });
                                        if (objPuntoEmbarque)
                                            input.HoraEscala = objPuntoEmbarque.Hora;
                                        else
                                            input.HoraEscala = _this.ticketVenta.HoraViaje;
                                    }
                                };
                                break;
                            case 'R': // Reserva
                                input.FechaReservacion = objVenta.FechaReservacion;
                                input.HoraReservacion = objVenta.HoraReservacion;
                                break;
                        }
                        // --------------
                        listado.push(input);
                    };

                    // Seteo 'CantidadVendida'
                    var tmpCantidadVendida = _.cloneDeep(listado.length);

                    // Limpiar 'AsientosBloqueados'
                    var auxResponse = await appVueVenta.cancelarBoletos();
                    if (!auxResponse) {
                        APP.msg.error('No se pudo limpiar los asientos bloqueados para realizar la venta.');
                        appController.disabledAsientos(false);
                        return;
                    }

                    appController.disabledAsientos(true);

                    await APP.rq.axios.post(APP.base + '/itinerarios/grabar-venta', {
                        Listado: listado,
                        FlagVenta: _this.$getValuePickedBusVenta()
                    })
                        .then(async function (res) {
                            if (res.data.EsCorrecto) {

                                appController.showBoletosVendidos(res.data.Valor.ListaVentasRealizadas, tmpCantidadVendida);

                                // callSignalR_ActualizarTurnoPlano
                                callSignalR_ActualizarTurnoPlano(appVueVenta.filtro.NroViaje, appVueVenta.objTurno.FechaProgramacion, res.data.Valor);
                            }
                            else {
                                await appController.chargeTurnos();
                                _this.$nextTick(() => {
                                    if (res.data.Estado)
                                        APP.msg.warning(res.data.Mensaje);
                                    else
                                        APP.msg.error(res.data.Mensaje);
                                });
                            }
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                limpiarCampos: function () {
                    this.tipoPago = '';
                    this.tarjeta = null;
                    this.numeroTarjeta = '';
                    this.distrito = null;
                    this.direccion = '';
                    this.observacion = '';
                    this.embarque = null;
                    this.arribo = null;
                    this.ticketVenta = null;
                    this.sumaTotal = 0;
                    this.efectivo = '';
                    this.tarjetaCant = '';
                    this.cantAsientos = 0;
                    this.importePagado = '';
                    this.vuelto = '';
                    this.processing = false;
                    this.disabledTipoPago = false;
                },
                recorridoSectionTipoPagos: function (auxValidate) {
                    var auxResponse = false;

                    if (!this.computedTipoPago) {
                        $('#cboTipoPagoTP input[type=search]').focus();
                        if (auxValidate === true) APP.msg.warning('Seleccione un tipo de pago.');

                        return auxResponse;
                    }
                    else if (this.tipoPago === '01') {
                        if (!this.importePagado) {
                            document.getElementById('txtImportePagadoC').focus();
                            if (auxValidate === true) APP.msg.warning('Ingrese el importe pagado.');

                            return auxResponse;
                        }
                        else if (parseFloat(this.importePagado) < parseFloat(this.sumaTotal)) {
                            document.getElementById('txtImportePagadoC').focus();

                            return auxResponse;
                        }
                    }
                    else if (this.tipoPago === '02') {
                        if (!this.tarjeta) {
                            $('#cboTipoTarjetaTP input[type=search]').focus();
                            if (auxValidate === true) APP.msg.warning('Seleccione un tipo de tarjeta.');

                            return auxResponse;
                        }
                        else if (!this.numeroTarjeta) {
                            document.getElementById('txtNumeroTP').focus();
                            if (auxValidate === true) APP.msg.warning('Ingrese número de tarjeta.');

                            return auxResponse;
                        }
                        else if (this.numeroTarjeta.length !== 19) {
                            document.getElementById('txtNumeroTP').focus();

                            return auxResponse;
                        }
                        else if (!this.tarjetaCant) {
                            document.getElementById('txtTarjetaCantTP').focus();
                            if (auxValidate === true) APP.msg.warning('Ingrese el monto de tarjeta.');

                            return auxResponse;
                        }
                        else if (parseFloat(this.tarjetaCant) > parseFloat(this.sumaTotal)) {
                            document.getElementById('txtTarjetaCantTP').focus();

                            return auxResponse;
                        }
                        else if (!this.efectivo) {
                            document.getElementById('txtEfectivoTP').focus();
                            if (auxValidate === true) APP.msg.warning('Ingrese el monto en efectivo.');

                            return auxResponse;
                        }
                        else if (!this.importePagado) {
                            document.getElementById('txtImportePagadoTP').focus();
                            if (auxValidate === true) APP.msg.warning('Ingrese el importe pagado.');

                            return auxResponse;
                        }
                        else if (parseFloat(this.importePagado) < parseFloat(this.efectivo)) {
                            document.getElementById('txtImportePagadoTP').focus();

                            return auxResponse;
                        }
                    }
                    else if (this.tipoPago === '03') {
                        if (!this.tarjeta) {
                            $('#cboTipoTP input[type=search]').focus();
                            if (auxValidate === true) APP.msg.warning('Seleccione un tipo de tarjeta.');

                            return auxResponse;
                        }
                        else if (!this.numeroTarjeta) {
                            document.getElementById('txtNumeroTP').focus();
                            if (auxValidate === true) APP.msg.warning('Ingrese número de tarjeta.');

                            return auxResponse;
                        }
                        else if (this.numeroTarjeta.length !== 19) {
                            document.getElementById('txtNumeroTP').focus();

                            return auxResponse;
                        }
                    }
                    else if (this.tipoPago === '04') {
                        if (!this.distrito) {
                            $('#cboDistritoTP input[type=search]').focus();
                            if (auxValidate === true) APP.msg.warning('Seleccione un distrito.');

                            return auxResponse;
                        }
                        else if (!this.direccion) {
                            document.getElementById('txtDireccionTP').focus();
                            if (auxValidate === true) APP.msg.warning('Ingrese dirección.');

                            return auxResponse;
                        }
                        else if (!this.observacion) {
                            document.getElementById('txtObservTP').focus();
                            if (auxValidate === true) APP.msg.warning('Ingrese observación.');

                            return auxResponse;
                        }
                    }

                    if (!this.embarque) {
                        $('#cboEmbarqueTP input[type=search]').focus();
                        if (auxValidate === true) APP.msg.warning('Seleccione un embarque.');

                        return auxResponse;
                    }
                    else if (!this.arribo && auxValidate !== true) {
                        $('#cboArriboTP input[type=search]').focus();
                        if (auxValidate === true) APP.msg.warning('Seleccione un arribo.');

                        return auxResponse;
                    }
                    else
                        auxResponse = true;

                    return auxResponse;
                },
                getLabelEmbarqueArribo: function (option) {
                    return `${option.Lugar} - ${option.Hora}`
                },
                calcMontos: function (tipo, e, _parteEntera) {
                    // Formato 'NumeroConDosDecimales'
                    switch (e.target.id) {
                        case 'txtImportePagadoC':
                        case 'txtImportePagadoTP':
                            this.importePagado = this.$formatNumberWithTwoDecimals(this.importePagado, _parteEntera);
                            break;
                        case 'txtTarjetaCantTP':
                            this.tarjetaCant = this.$formatNumberWithTwoDecimals(this.tarjetaCant, _parteEntera);
                            break;
                        case 'txtEfectivoTP':
                            this.efectivo = this.$formatNumberWithTwoDecimals(this.efectivo, _parteEntera);
                            break;
                    }
                    // -----------------

                    var sumaTotal = parseFloat(this.sumaTotal);
                    var efectivo = parseFloat(this.efectivo);
                    var tarjetaCant = parseFloat(this.tarjetaCant);
                    var importePagado = parseFloat(this.importePagado);

                    if (tipo === 'IPC') {
                        if (importePagado >= sumaTotal)
                            this.vuelto = parseFloat(importePagado - sumaTotal).toFixed(2);
                        else
                            this.vuelto = '';
                    }
                    else if (tipo === 'T') {
                        if (sumaTotal >= tarjetaCant)
                            this.efectivo = parseFloat(sumaTotal - tarjetaCant).toFixed(2);
                        else
                            this.efectivo = '';

                        this.importePagado = '';
                        this.vuelto = '';
                    }
                    else if (tipo === 'E') {
                        if (sumaTotal >= efectivo)
                            this.tarjetaCant = parseFloat(sumaTotal - efectivo).toFixed(2);
                        else
                            this.tarjetaCant = '';

                        this.importePagado = '';
                        this.vuelto = '';
                    }
                    else if (tipo === 'IP') {
                        if (importePagado >= efectivo)
                            this.vuelto = parseFloat(importePagado - efectivo).toFixed(2);
                        else
                            this.vuelto = '';
                    }
                },
                esc: function (event) {
                    if (event.keyCode === 27) this.close();
                },
                close: function () {
                    document.getElementById('btnTipoPago').disabled = false;
                    $('#appVueTipoPago').modal('hide');
                },
                convertirVentaToBase64: function (_ListaVentasRealizadas, _TipoImpresion) {
                    var _this = this;

                    switch (_TipoImpresion) {
                        case TipoImprimir:
                            {
                                APP.rq.axios2.post(APP.base + '/itinerarios/convertir-venta-to-base64', {
                                    ListaVentasRealizadas: _ListaVentasRealizadas,
                                    TipoImpresion: _TipoImpresion
                                })
                                    .then(function (res) {
                                        var _listaImpresiones = res.data.Valor;
                                        var _listaLength = _listaImpresiones.length;
                                        if (res.data.EsCorrecto) {
                                            for (i = 0; i < _listaLength; i++) {
                                                (function (i) {
                                                    setTimeout(function () {
                                                        _this.imprimirBoleto(_listaImpresiones[i], i, _listaLength);
                                                    }, i * 2500);
                                                })(i);
                                            }
                                        }
                                        else {
                                            if (res.data.Estado)
                                                APP.msg.warning(res.data.Mensaje);
                                            else
                                                APP.msg.error(res.data.Mensaje);
                                        }

                                    })
                                    .catch(APP.rq.axios_handler_error_alert);
                            };
                            break;
                        case TipoReimprimir:
                            {
                                APP.rq.axios.post(APP.base + '/itinerarios/convertir-venta-to-base64', {
                                    ListaVentasRealizadas: _ListaVentasRealizadas,
                                    TipoImpresion: _TipoImpresion
                                })
                                    .then(function (res) {
                                        var _listaImpresiones = res.data.Valor;
                                        var _listaLength = _listaImpresiones.length;
                                        if (res.data.EsCorrecto) {
                                            for (i = 0; i < _listaLength; i++) {
                                                (function (i) {
                                                    setTimeout(function () {
                                                        _this.imprimirBoleto(_listaImpresiones[i], i, _listaLength);
                                                    }, i * 2500);
                                                })(i);
                                            }
                                        }
                                        else {
                                            if (res.data.Estado)
                                                APP.msg.warning(res.data.Mensaje);
                                            else
                                                APP.msg.error(res.data.Mensaje);
                                        }
                                    })
                                    .catch(APP.rq.axios_handler_error_alert);
                            };
                            break;
                    }
                },
                imprimirBoleto: function (_Documentos, _Posicion, _CantidadVentas) {
                    var auxValidate = true;
                    var auxUrl = '';

                    // Imprime '_Documentos'
                    for (const doc in _Documentos) {
                        var docValor = `${_Documentos[doc]}`;

                        if (docValor) {
                            if (doc === 'Original')
                                auxUrl = UrlImprimirBoleto + '?base=' + docValor + '&' + 'name=' + 'IMPRESORA';
                            else if (doc === 'Copia1')
                                auxUrl = UrlImprimirBoleto + '?base=' + docValor + '&' + 'name=' + 'IMPRESORA_I';
                            else if (doc === 'Copia2')
                                auxUrl = UrlImprimirBoleto + '?base=' + docValor + '&' + 'name=' + 'IMPRESORA_I2';

                            if (auxUrl) {
                                // Servicio local
                                axios({ method: "GET", "url": auxUrl })
                                    .then(res => {
                                        //APP.msg.success('Boleto enviado a imprimir correctamente.');
                                    }, error => {
                                        //APP.msg.error('Imprimir Boleto: Ha ocurrido una excepción.');
                                        auxValidate = false;
                                    });
                            }

                            // Para continuar con el siguiente 'doc'
                            auxUrl = '';

                            // Valida 'error'
                            if (!auxValidate)
                                break;
                        }
                    }

                    // Valida: Si es venta múltiple y no es el último boleto, entonces se realiza un 'CORTE_SEPARADOR'
                    if (_CantidadVentas > 1 && _CantidadVentas > (_Posicion + 1)) {
                        auxUrl = UrlImprimirBoleto + '?base=' + ' ' + '&' + 'name=' + 'IMPRESORA_I2'; // 'IMPRESORA_I2': Nombre reconocido por el programa.
                        axios({ method: "GET", "url": auxUrl });
                    }

                    // Valida: Si es el primer boleto o si hubo algún error, entonces se muestra 'APP.msg'
                    if (auxValidate) {
                        if (_Posicion === 0)
                            APP.msg.success('Boleto enviado a imprimir correctamente.');
                    }
                    else
                        APP.msg.error('Imprimir Boleto: Ha ocurrido una excepción.');
                }
            },
            computed: {
                computedTipoPago: {
                    get: function () {
                        var auxTipoPago = this.list.tiposPago.find(x => x.id === this.tipoPago);
                        if (auxTipoPago)
                            return auxTipoPago;
                    },
                    set: function (value) {
                        if (value) {
                            if (this.list.tiposPago.find(x => x.id === value.id))
                                this.tipoPago = value.id;

                            if (this.$getValuePickedBusVenta() !== '7' && this.$getValuePickedBusVenta() !== '1') {
                                this.efectivo = '';
                                this.tarjetaCant = '';
                                this.importePagado = '';
                                this.vuelto = '';
                            }
                        }
                        else
                            this.tipoPago = '';

                        this.$nextTick(function () {
                            this.recorridoSectionTipoPagos();
                        });
                    }
                }
            },
            watch: {}
        });

        var appVueRegistrarInfante = new Vue({
            el: '#appVueRegistrarInfante ',
            data: {
                CodiTipoDoc: null,
                Documento: '',
                Nombres: '',
                ApellidoPaterno: '',
                ApellidoMaterno: '',
                FechaNac: '',
                Edad: '',
                Sexo: null,
                Parentesco: null,
                list: {
                    tipoDoc: [],
                    parentesco: [],
                    sexos: [
                        { 'id': 'M', 'label': 'M' },
                        { 'id': 'F', 'label': 'F' }
                    ]
                },
                mask: {
                    documento: ''
                },
                disabledBotones: false,
                enableSaveWithClaveAutorizacion: false,
                password: '',
                validateMinNumero: '0'
            },
            mounted: function () {
                this.getParentesco();
            },
            methods: {
                show: function (_ObjAcompaniante) {
                    if (_ObjAcompaniante.Documento)
                        this.setMostrarInfante(_ObjAcompaniante);

                    $('#appVueRegistrarInfante').modal('show');
                },
                getParentesco: function () {
                    var _this = this;
                    APP.rq.axios2.get(APP.base + '/base/get-parentesco')
                        .then(res => {
                            if (res.data.Estado)
                                _this.list.parentesco = _.cloneDeep(res.data.Valor);
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                setMostrarInfante: function (_ObjAcompaniante) {
                    this.CodiTipoDoc = _.find(this.list.tipoDoc, { 'id': _ObjAcompaniante.CodiTipoDoc }) || null;
                    this.Documento = _ObjAcompaniante.Documento;
                    this.FechaNac = _ObjAcompaniante.FechaNac;
                    this.Edad = _ObjAcompaniante.Edad;
                    this.Sexo = _.find(this.list.sexos, { 'id': _ObjAcompaniante.Sexo }) || null;
                    this.Parentesco = _.find(this.list.parentesco, { 'id': _ObjAcompaniante.Parentesco }) || null;
                    if (_ObjAcompaniante.NombreCompleto) {
                        var arrayDeNombres = _ObjAcompaniante.NombreCompleto.split(',');
                        // Valida Split
                        if (arrayDeNombres.length !== 3)
                            arrayDeNombres = ['', '', ''];
                        // ------------
                        this.Nombres = arrayDeNombres[0];
                        this.ApellidoPaterno = arrayDeNombres[1];
                        this.ApellidoMaterno = arrayDeNombres[2];
                    }

                    // Desactiva botones 'Eliminar' y 'Aceptar'
                    if (appVueVenta.list.ventas[appVueVenta.indexVenta].FlagVenta
                        && appVueVenta.list.ventas[appVueVenta.indexVenta].FlagVenta !== 'R'
                    )
                        this.disabledBotones = true;
                },
                recorrerFechaNac: function () {
                    var _this = this;

                    _this.FechaNac = _this.$getValueDateTimePicker(event, false);

                    _this.$nextTick(() => {
                        if (!_this.FechaNac) {
                            APP.msg.warning('Ingrese fecha de nacimiento.');
                            return false;
                        }

                        _this.recorridoSectionParentesco();
                    });
                },
                setDateAndCalcYears: function () {
                    this.FechaNac = this.$getValueDateTimePicker(event, false);

                    if (this.FechaNac)
                        this.Edad = appController.calculaEdad(this.FechaNac);
                    else
                        this.Edad = '';
                },
                recorridoSectionParentesco: function (auxValidate) {
                    var auxResponse = false;

                    var auxEdad = parseInt(this.Edad || '0') || 0;
                    if (!this.CodiTipoDoc) {
                        $('#cboTipoDocRA input[type=search]').focus();
                        if (auxValidate === true) APP.msg.warning('Seleccione un tipo de documento.');
                    }
                    else if (!appController.validateTipoDocumento(this.CodiTipoDoc.id, this.Documento, auxValidate))
                        document.getElementById('txtDocumentoRA').focus();
                    else if (!this.Nombres) {
                        document.getElementById('txtNombresRA').focus();
                        if (auxValidate === true) APP.msg.warning('Ingrese nombres.');
                    }
                    else if (!this.ApellidoPaterno) {
                        document.getElementById('txtApellidoPaternoRA').focus();
                        if (auxValidate === true) APP.msg.warning('Ingrese apellido paterno.');
                    }
                    else if (!this.ApellidoMaterno) {
                        document.getElementById('txtApellidoMaternoRA').focus();
                        if (auxValidate === true) APP.msg.warning('Ingrese apellido materno.');
                    }
                    else if (!this.FechaNac) {
                        document.getElementById('txtFechaNacRA').focus();
                        if (auxValidate === true) APP.msg.warning('Ingrese fecha de nacimiento.');
                    }
                    else if (!this.Sexo) {
                        $('#cboSexoRA input[type=search]').focus();
                        if (auxValidate === true) APP.msg.warning('Seleccione sexo.');
                    }
                    else if (!this.Parentesco) {
                        $('#cboParentescoRA input[type=search]').focus();
                        if (auxValidate === true) APP.msg.warning('Seleccione el parentesco.');
                    }
                    else {
                        if (auxEdad > 5 && !this.enableSaveWithClaveAutorizacion) {
                            if (auxValidate === true) APP.msg.warning('Edad mayor a 5 años, es necesario ingresar clave para continuar.');

                            this.$nextTick(() => {
                                document.getElementById('btnIngresarConClave').focus();
                            });
                        }
                        else
                            auxResponse = true;

                        document.getElementById('btnRegistrarAconpaniante').focus();
                    }

                    return auxResponse;
                },
                saveAcompaniante: async function () {
                    if (!this.recorridoSectionParentesco(true))
                        return;

                    var ObjAcompaniante = {};
                    ObjAcompaniante.CodiTipoDoc = !this.CodiTipoDoc ? '' : this.CodiTipoDoc.id;
                    ObjAcompaniante.Documento = this.Documento;
                    ObjAcompaniante.NombreCompleto = this.Nombres + ',' + this.ApellidoPaterno + ',' + this.ApellidoMaterno;
                    ObjAcompaniante.FechaNac = this.FechaNac;
                    ObjAcompaniante.Edad = this.Edad;
                    ObjAcompaniante.Sexo = !this.Sexo ? '' : this.Sexo.id;
                    ObjAcompaniante.Parentesco = !this.Parentesco ? '' : this.Parentesco.id;

                    this.close();

                    await appController.acompanianteVentaCRUD(ObjAcompaniante);
                },
                eliminarAcompaniante: function () {
                    appVueVenta.list.ventas[appVueVenta.indexVenta].ObjAcompaniante = {
                        CodiTipoDoc: '',
                        Documento: '',
                        NombreCompleto: '',
                        FechaNac: '',
                        Edad: '',
                        Sexo: '',
                        Parentesco: ''
                    };
                    this.close()
                },
                limpiarCampos: function () {
                    this.CodiTipoDoc = null;
                    this.Documento = '';
                    this.Nombres = '';
                    this.ApellidoPaterno = '';
                    this.ApellidoMaterno = '';
                    this.FechaNac = '';
                    this.Edad = '';
                    this.Sexo = null;
                    this.Parentesco = null;
                    this.disabledBotones = false;
                    this.validateMinNumero = '0';
                },
                sendClaveAutorizacion: function (_data) {
                    if (_data.EsCorrecto) {
                        this.enableSaveWithClaveAutorizacion = _data.Estado;
                        $('#appClaveAutorizacion').modal('hide');

                        APP.msg.info(_data.Mensaje);
                    }
                    else {
                        document.getElementById('txtContraseniaCA').focus();
                        if (_data.Estado)
                            APP.msg.warning(_data.Mensaje);
                        else
                            APP.msg.error(_data.Mensaje);
                    }
                },
                showClaveAutorizacion: function () {
                    appController.showClaveAutorizacion(ClaveAcompañanteConMayorEdad);
                },
                esc: function (event) {
                    if (event.keyCode === 27) this.close();
                },
                close: function () {
                    $('#appVueRegistrarInfante').modal('hide');
                }
            },
            computed: {
                showBtnIngresarConClave: function () {
                    var auxEdad = parseInt(this.Edad || '0') || 0;

                    if (auxEdad > 5 && !this.enableSaveWithClaveAutorizacion)
                        return true;
                    else
                        return false;
                }
            },
            watch: {
                CodiTipoDoc: function (newVal, oldVal) {
                    if (newVal) {
                        this.mask.documento = (newVal.TipoDatoDocumento).repeat(newVal.MaxLonDocumento);
                        this.validateMinNumero = newVal.MinLonDocumento;
                    }
                }
            }
        });

        var appVuePaseCortesia = new Vue({
            el: "#appVuePaseCortesia",
            data: {
                gerente: null,
                solicitante: null,
                concepto: '',
                list: {
                    gerentes: [],
                    solicitantes: [],
                    beneficiarios: [],
                    filterBeneficiarios: []
                },
                paginate: ['items'],
                boletosLibres: '',
                boletosByPrecio: '',
                totalBoletos: '',
                fechaAbierta: false,
                searchInTable: ''
            },
            mounted: function () { },
            methods: {
                show: function () {
                    if (this.list.gerentes.length === 0)
                        this.getGerentes();
                    if (this.list.solicitantes.length === 0)
                        this.getSocios();
                    $('#appVuePaseCortesia').modal('show');
                },
                getGerentes() {
                    var _this = this;
                    APP.rq.axios2.get(APP.base + '/base/get-gerentes')
                        .then(res => {
                            if (res.data.Estado)
                                _this.list.gerentes = _.cloneDeep(res.data.Valor);
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                getSocios() {
                    var _this = this;
                    APP.rq.axios2.get(APP.base + '/base/get-socios')
                        .then(res => {
                            if (res.data.Estado)
                                _this.list.solicitantes = _.cloneDeep(res.data.Valor);
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                recorridoPaseCortesia: function () {
                    var _this = this;
                    if (!_this.gerente)
                        $('#cboGerentePC input[type=search]').focus();
                    else if (!_this.solicitante)
                        $('#cboSolicitantePC input[type=search]').focus();
                    else if (!_this.concepto)
                        document.getElementById('txtConceptoPC').focus();
                    else if (!_this.searchInTable)
                        document.getElementById('txtBeneficiarioPC').focus();
                    else
                        document.getElementById('btnAsignaPC').focus();
                },
                fillBeneficiario: function (solicitante) {
                    this.listaBeneficiarios(solicitante.id);
                    this.recorridoPaseCortesia();
                },
                listaBeneficiarios: function (codSocio) {
                    var _this = this;
                    APP.rq.axios2.post(APP.base + '/itinerarios/listaBeneficiarioPase', {
                        CodiSocio: codSocio
                    })
                        .then(res => {
                            if (res.data.Estado) {
                                _this.boletosLibres = res.data.Valor.BoletoLibre;
                                _this.boletosByPrecio = res.data.Valor.BoletoPrecio;
                                _this.totalBoletos = res.data.Valor.BoletoTotal;
                                _this.list.beneficiarios = res.data.Valor.ListaBeneficiarios;
                                _this.list.filterBeneficiarios = _.cloneDeep(_this.list.beneficiarios);

                                _this.$nextTick(() => {
                                    if (_this.$refs.paginatorPC && _this.list.filterBeneficiarios.length > 0)
                                        _this.$refs.paginatorPC.goToPage(1);
                                });
                            }
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                esc: function (event) {
                    if (event.keyCode === 27)
                        this.cancelarPaseCortesia();
                },
                cancelarPaseCortesia: function () {
                    $('#appVuePaseCortesia').modal('hide');
                    appController.liberarAsientoActual();
                },
                limpiarPaseCortesia: function () {
                    var _this = this;
                    _this.gerente = null;
                    _this.solicitante = null;
                    _this.concepto = '';
                    _this.boletosLibres = '';
                    _this.boletosByPrecio = '';
                    _this.totalBoletos = '';
                    _this.fechaAbierta = false;
                    _this.searchInTable = '';
                    _this.list.beneficiarios = [];
                    _this.list.filterBeneficiarios = [];

                    _this.$nextTick(function () {
                        _this.errors.clear();
                    });
                },
                validateSend: function () {
                    var _this = this;
                    return (
                        _this.gerente &&
                        _this.solicitante &&
                        _this.concepto
                    )
                },
                validarPase: async function (codSocio) {
                    var auxResponse = false;

                    await APP.rq.axios2.post(APP.base + '/itinerarios/validarPase', {
                        CodiSocio: codSocio,
                    })
                        .then(res => {
                            if (res.data.Estado) {
                                if (res.data.EsCorrecto) {
                                    var auxLength = appVueVenta.list.ventas.length;

                                    if (res.data.Valor >= auxLength)
                                        auxResponse = true;
                                    else
                                        APP.msg.warning("Socio con saldo insuficiente.");
                                }
                                else
                                    APP.msg.warning(res.data.Mensaje);
                            }
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);

                    return auxResponse;
                },
                sendRow: async function (item) {
                    var _this = this;
                    if (_this.validateSend()) {
                        var auxValidate = await _this.validarPase(_this.solicitante.id);

                        if (auxValidate) {
                            // SweetAlert para 'fechaAbierta'
                            if (await APP.msg.confirm(
                                'Fecha Abierta'
                                , '¿Desea enviar el Pase a Fecha Abierta?'
                                , false
                                , false
                                , false
                                , true
                                )
                            )
                                _this.fechaAbierta = true;

                            await appController.sendPaseCortesia(item);
                            $('#appVuePaseCortesia').modal('hide');
                        }
                    }
                    else
                        _this.recorridoPaseCortesia();
                }
            },
            computed: {},
            watch: {
                searchInTable: function (newVal) {
                    if (String(newVal).replace(/\s/g, '').length > 0) {
                        this.list.filterBeneficiarios = _.filter(this.list.beneficiarios, obj => {
                            var coincidence = obj.NombreBeneficiario.toUpperCase().indexOf(newVal.toUpperCase()) !== -1;
                            return coincidence;
                        });
                    }
                    else
                        this.list.filterBeneficiarios = this.list.beneficiarios;
                }
            }
        });

        var appBoletosVendidos = new Vue({
            el: "#appBoletosVendidos",
            data: {
                boletos: [],
                tmpCantidadVendida: 0
            },
            methods: {
                show: function (_boletosVendidos, _tmpCantidadVendida) {
                    var _this = this;
                    _this.boletos = _boletosVendidos;
                    _this.tmpCantidadVendida = _tmpCantidadVendida;

                    $('#appBoletosVendidos').modal('show');
                },
                esc: function (event) {
                    if (event.keyCode === 27)
                        this.cerrarVenta();
                },
                cerrarVenta: function () {
                    $('#appBoletosVendidos').modal('hide');
                }
            }
        });

        var appVuePostergacion = new Vue({
            el: '#appVuePostergacion',
            data: {
                filtro: {
                    empresa: null,
                    serie: '',
                    documento: ''
                },
                list: {
                    empresas: []
                },
                showBeneficiario: false,
                objBeneficiario: {},
                postClick: false,
                TipoPostergacion: '0'
            },
            mounted: function () { },
            methods: {
                show: function () {
                    this.showBeneficiario = false;
                    $('#appVuePostergacion').modal('show');
                },
                esc: function (event) {
                    if (event.keyCode === 27)
                        this.close();
                },
                close: async function () {
                    $('#appVuePostergacion').modal('hide');
                    await appController.liberarAsientoActual();
                },
                recorrido: function () {
                    var _this = this;
                    if (!_this.filtro.empresa)
                        $('#cboEmpresaPos input[type=search]').focus();
                    else if (!_this.filtro.serie)
                        document.getElementById('txtSeriePos').focus();
                    else if (!_this.filtro.documento)
                        document.getElementById('txtNumeroPos').focus();
                    else
                        document.getElementById('btnBuscarPos').focus();
                },
                blurSerie: function () {
                    var _serie = _.cloneDeep(this.filtro.serie);
                    if (!isNaN(this.filtro.serie))
                        this.filtro.serie = parseInt(_serie) > 0 ? _.padStart(_serie, 4, '0').toUpperCase() : '';
                    else {
                        if (_serie.substring(0, 1).toUpperCase() === 'B')
                            this.filtro.serie = 'B' + _.padStart(_serie.substring(1, 4), 3, '0');
                        else if (_serie.substring(0, 1).toUpperCase() === 'F')
                            this.filtro.serie = 'F' + _.padStart(_serie.substring(1, 4), 3, '0');
                        else
                            this.filtro.serie = '';
                    }
                },
                blurNumero: function () {
                    var _documento = _.cloneDeep(this.filtro.documento);
                    return this.filtro.documento = parseInt(_documento) > 0 ? _.padStart(_documento, 7, '0') : '';
                },
                limpiarCampos: function () {
                    this.filtro.serie = '';
                    this.filtro.documento = '';
                    this.objBeneficiario = {};
                    this.postClick = false;
                    this.TipoPostergacion = '0';
                },
                searchPasajero: async function () {
                    var _this = this;
                    _this.showBeneficiario = false;
                    _this.postClick = true;

                    var _tipo = _this.filtro.serie.substring(0, 1) === '0' ? 'M' : _this.filtro.serie.substring(0, 1);
                    var _serie = isNaN(_this.filtro.serie) ? parseInt(_this.filtro.serie.substring(1, 4)) : parseInt(_this.filtro.serie);

                    await APP.rq.axios2.get(APP.base + '/itinerarios/buscar-venta-x-boleto' + APP.util.getQueryParamByObject({
                        Tipo: _tipo,
                        Serie: _serie,
                        Numero: parseInt(_this.filtro.documento),
                        CodiEmpresa: _this.filtro.empresa.id
                    }))
                        .then(res => {
                            if (res.data.EsCorrecto) {
                                _this.showBeneficiario = true;
                                _this.postClick = false;

                                _this.objBeneficiario = _.cloneDeep(res.data.Valor);
                                var nombresSplit = _this.objBeneficiario.NombresConcat.split(',');
                                // Valida Split
                                if (nombresSplit.length !== 3)
                                    nombresSplit = ['', '', ''];
                                // ------------
                                _this.objBeneficiario.Nombre = nombresSplit[0];
                                _this.objBeneficiario.ApellidoPaterno = nombresSplit[1];
                                _this.objBeneficiario.ApellidoMaterno = nombresSplit[2];

                                _this.objBeneficiario.BoletoCompleto = _tipo + String(_serie).padStart(3, '0') + '-' + _.cloneDeep(_this.filtro.documento).padStart(7, '0');

                                _this.$nextTick(() => {
                                    document.getElementById('btnAsignarPos').focus();
                                });
                            }
                            else {
                                _this.objBeneficiario = {};
                                _this.postClick = false;

                                _this.$nextTick(() => {
                                    if (res.data.Estado)
                                        APP.msg.warning(res.data.Mensaje);
                                    else
                                        APP.msg.error(res.data.Mensaje);
                                });
                            }
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                asignBeneficiario: async function () {
                    var _this = this;
                    _this.postClick = true;

                    var validaPostergacion = await _this.validaPostergacion();
                    if (!validaPostergacion) {
                        return;
                    }

                    var input = {};
                    input.IdVenta = _this.objBeneficiario.IdVenta;
                    input.CodiProgramacion = appVueVenta.filtro.CodiProgramacion;
                    input.NumeAsiento = appVueVenta.list.ventas[appVueVenta.indexVenta].NroAsiento;
                    input.CodiServicio = appVueVenta.filtro.CodiServicio.id;
                    input.FechaViaje = appVueVenta.filtro.Fecha;
                    input.HoraViaje = appVueVenta.filtro.Turno;
                    input.NroViaje = appVueVenta.filtro.NroViaje;
                    input.FechaProgramacion = appVueVenta.objTurno.FechaProgramacion;
                    input.CodiEmpresa = appVueVenta.filtro.CodiEmpresa.id;
                    input.CodiSucursal = appVueVenta.filtro.CodiOrigenBus.id;
                    input.CodiRuta = appVueVenta.filtro.CodiDestinoBus.id;
                    input.CodiBus = appVueVenta.objPlano.CodiBus;
                    input.HoraProgramacion = appVueVenta.objTurno.HoraProgramacion;
                    input.CodiOrigen = appVueVenta.filtro.CodiSucursal.id;
                    input.CodiDestino = appVueVenta.filtro.CodiDestinoPas.id;
                    input.NomOrigen = appVueVenta.filtro.CodiSucursal.label;

                    // AGREGAMOS NUEVOS
                    input.CodiEsca = _this.objBeneficiario.CodiEsca;
                    input.CodiOrigenBoleto = _this.objBeneficiario.CodiOrigen;
                    input.CodiRutaBoleto = _this.objBeneficiario.CodiRuta;
                    input.CodiProgramacionBoleto = _this.objBeneficiario.CodiProgramacion;
                    input.BoletoCompleto = _this.objBeneficiario.BoletoCompleto;
                    input.NomPasajero = _this.objBeneficiario.NombresConcat;
                    input.FechaViajeBoleto = _this.objBeneficiario.FechaViaje;
                    input.HoraViajeBoleto = _this.objBeneficiario.HoraViaje;
                    input.NomDestinoBoleto = _this.$options.filters.rutas(_this.objBeneficiario.CodiDestino);
                    input.PrecioVenta = _this.objBeneficiario.PrecioVenta;

                    // Limpiar 'AsientosBloqueados'
                    var auxResponse = await appVueVenta.cancelarBoletos();
                    if (!auxResponse) {
                        APP.msg.error('No se pudo limpiar los asientos bloqueados para realizar la venta.');
                        return;
                    }

                    appController.disabledAsientos(true);

                    await APP.rq.axios.post(APP.base + '/itinerarios/postergar-venta', input)
                        .then(async function (res) {
                            await _this.close();
                            await appController.chargeTurnos();

                            _this.$nextTick(() => {
                                if (res.data.EsCorrecto) {
                                    if (res.data.Estado)
                                        APP.msg.info(res.data.Mensaje);
                                    else
                                        APP.msg.warning(res.data.Mensaje);
                                }
                                else
                                    APP.msg.error(res.data.Mensaje);
                            });

                            // callSignalR_ActualizarTurnoPlano
                            callSignalR_ActualizarTurnoPlano(appVueVenta.filtro.NroViaje, appVueVenta.objTurno.FechaProgramacion, res.data.Valor);
                        })
                        .catch(APP.rq.axios_handler_error_alert);

                    _this.postClick = false;
                },
                validaPostergacion: async function () {
                    var auxValidate = true;

                    // TipoPostergacion = '0' -> Ctrl + F4
                    if (this.TipoPostergacion === '0') {
                        if (Usuario.Nivel !== 50 && Usuario.CodiUsuario != JLMrootCode) {
                            if (appController.validatePanel('62') === '1') {
                                APP.msg.warning('Solicitud denegada, consulte con el administrador.');
                                return auxValidate = false;
                            }
                        }
                        if (appController.validatePanelNivel(4, Usuario.Nivel) === '0') {
                            APP.msg.warning('Usuario no autorizado, nivel de acceso limitado.');
                            return auxValidate = false;
                        }
                        var verificaLiquidacionComiDet = await appController.verificaLiquidacionComiDet(this.objBeneficiario.IdVenta);
                        if (verificaLiquidacionComiDet !== 0) {
                            APP.msg.warning('El boleto se encuentra liquidado, revise liquidación avanzada.');
                            return auxValidate = false;
                        }
                        var verificaLiquidacionComi = await appController.verificaLiquidacionComi(this.objBeneficiario.CodiProgramacion, this.objBeneficiario.CodiPuntoVenta);
                        if (verificaLiquidacionComi === "1") {
                            APP.msg.warning('El boleto se encuentra liquidado.');
                            return auxValidate = false;
                        }
                        var verificaNC = await appController.verificaNC(this.objBeneficiario.IdVenta);
                        if (verificaNC !== 0)
                            return auxValidate = false;
                        if (appController.validatePanel('91') === '1') {
                            if (this.objBeneficiario.CodiPuntoVenta !== Usuario.CodiPuntoVenta) {
                                APP.msg.warning('No se puede postergar boletos de otros puntos de venta.');
                                return auxValidate = false;
                            }
                        }
                        if (this.objBeneficiario.CodiProgramacion !== appVueVenta.filtro.CodiProgramacion) {
                            if (appController.validatePanel('167') === '1') {
                                if (Usuario.Nivel !== 1 && Usuario.Nivel !== 11) {
                                    APP.msg.warning('Usuario no autorizado, solo los administradores pueden postergar.');
                                    return auxValidate = false;
                                }
                            }
                        }
                        if (moment(this.objBeneficiario.FechaProgramacion, 'DD/MM/YYYY').isBefore(moment(), 'days')) {
                            APP.msg.warning('La fecha de viaje del boleto es menor a la actual.');
                            return auxValidate = false;
                        }
                        if (appController.validatePanel('131') !== '1') {
                            var obtenerManifiestoProgramacion = await appController.obtenerManifiestoProgramacion(this.objBeneficiario.CodiProgramacion, this.objBeneficiario.CodiOrigen);
                            if (obtenerManifiestoProgramacion) {
                                APP.msg.warning('No se puede postergar boleto porque cuenta con manifiesto.');
                                return auxValidate = false;
                            }
                        }
                        else {
                            if (appController.validatePanel('171') === '1') {
                                var verificaManifiestoPorPVenta = await appController.verificaManifiestoPorPVenta(appVueVenta.filtro.CodiProgramacion, Usuario.CodiPuntoVenta)
                                if (verificaManifiestoPorPVenta === '1') {
                                    APP.msg.warning('No se puede postergar boleto porque cuenta con manifiesto.');
                                    return auxValidate = false;
                                }
                            }
                        }
                        if (appController.validatePanel('122') !== '1') {
                            if (appVueVenta.filtro.CodiSucursal.id !== String(this.objBeneficiario.CodiOrigen)) {
                                APP.msg.warning('El origen del boleto es distinto al del bus.');
                                return auxValidate = false;
                            }
                            if (appVueVenta.filtro.CodiDestinoPas.id !== String(this.objBeneficiario.CodiDestino)) {
                                APP.msg.warning('El destino del boleto es distinto al del bus.');
                                return auxValidate = false;
                            }
                            if (String(this.objBeneficiario.CodiServicioProgramacion) !== appVueVenta.filtro.CodiServicio.id) {
                                var resClaveCambioNivelServicio = await APP.msg.confirmClaveAutorizacion(
                                    `${_.padStart(ClaveCambioNivelServicio, 3, '0')} - Cambio de servicio`
                                    , 'Necesita permiso para realizar esta acción, ingrese la clave de autorización.'
                                    , ClaveCambioNivelServicio);
                                if (!resClaveCambioNivelServicio)
                                    return auxValidate = false;
                            }
                        }
                        var canPNP = await this.tablasPnpConsulta('10');
                        var valuePNP = appController.getValuePNP(canPNP);
                        if (this.objBeneficiario.FlagVenta === 'S' && !valuePNP) {
                            APP.msg.warning('Se ha superado el número máximo de boletos, no se puede emitir más boletos PNP.');
                            return auxValidate = false;
                        }
                        if (appController.validatePanel('151') === '1') {
                            if (this.objBeneficiario.FlagVenta === '9') {
                                var resClavePostergacionFlag9 = await APP.msg.confirmClaveAutorizacion(
                                    `${_.padStart(ClavePostergacionFlag9, 3, '0')} - Postergar boleto`
                                    , 'Necesita permiso para realizar esta acción, ingrese la clave de autorización.'
                                    , ClavePostergacionFlag9);
                                if (!resClavePostergacionFlag9)
                                    return auxValidate = false;
                            }
                        }
                        if (this.objBeneficiario.CodiProgramacion !== appVueVenta.filtro.CodiProgramacion) {
                            if (appController.validatePanel('107') === '1') {
                                if (appController.validaDocumentoRepetido(
                                    this.objBeneficiario.TipoDocumento,
                                    this.objBeneficiario.Documento,
                                    appVueVenta.list.ventas[appVueVenta.indexVenta].NroAsiento)
                                )
                                    return auxValidate = false;
                            }
                        }
                        if (Usuario.Nivel !== 11 && Usuario.Nivel !== 1 && Usuario.Nivel !== 2 &&
                            Usuario.Nivel !== 4 && Usuario.Nivel !== 3 && Usuario.Nivel !== 50) {
                            if (this.objBeneficiario.ImpManifiesto === 'X') {
                                APP.msg.warning('No se puede postergar boleto porque cuenta con manifiesto impreso.');
                                return auxValidate = false;
                            }
                        }
                        var resConsultaPos = await appController.consultaPos('79', '03');
                        var resConsultaSumaBoletosPostergados = await appController.consultaSumaBoletosPostergados(
                            this.objBeneficiario.BoletoCompleto.substring(0, 1),
                            this.objBeneficiario.BoletoCompleto.substring(1),
                            this.filtro.empresa.id);
                        if (resConsultaPos !== '0') {
                            if (resConsultaSumaBoletosPostergados <= parseInt(resConsultaPos)) {

                                if (appController.validatePanelClave('28') === '1') {
                                    var resClavePostergacionesBoleto = await APP.msg.confirmClaveAutorizacion(
                                        `${_.padStart(ClavePostergacionesBoleto, 3, '0')} - Postergar boleto`
                                        , 'Ha llegado al tope de postergación para este boleto, ingrese la clave de autorización.'
                                        , ClavePostergacionesBoleto);

                                    if (!resClavePostergacionesBoleto)
                                        return auxValidate = false;
                                }
                            }
                        }
                    }

                    // TipoPostergacion = '1' -> F11
                    if (this.TipoPostergacion === '1') {
                        if (moment(this.objBeneficiario.FechaViaje, 'DD/MM/YYYY').isBefore(moment(), 'days')) {
                            APP.msg.warning('No se puede postergar boletos de fechas pasadas.');
                            return auxValidate = false;
                        }
                        var obtenerManifiestoProgramacion = await appController.obtenerManifiestoProgramacion(this.objBeneficiario.CodiProgramacion, this.objBeneficiario.CodiOrigen);
                        if (obtenerManifiestoProgramacion) {
                            if (appController.validatePanelClave('2') === '1') {
                                var resClaveProgramacion = await APP.msg.confirmClaveAutorizacion(
                                    `${_.padStart(ClaveProgramacion, 3, '0')} - Postergar boleto`
                                    , 'El manifiesto ya fue emitido, ingrese la clave de autorización.'
                                    , ClaveProgramacion);

                                if (!resClaveProgramacion)
                                    return auxValidate = false;
                            }
                        }
                        if (this.objBeneficiario.Cierre) {
                            APP.msg.warning('No se puede postergar boleto porque cuenta con programación cerrada.');
                            return auxValidate = false;
                        }
                        if (appController.validatePanelNivel(3, Usuario.Nivel) === '0') {
                            APP.msg.warning('Usuario no autorizado, nivel de acceso limitado.');
                            return auxValidate = false;
                        }
                        if (appController.validatePanel('64') === '1') {
                            if (this.objBeneficiario.FechaViaje !== appVueVenta.filtro.Fecha) {
                                APP.msg.warning('Panel 64 - La fecha de viaje del boleto no puede ser diferente a la del plano.');
                                return auxValidate = false;
                            }
                        }
                        if (appVueVenta.filtro.CodiSucursal.id !== String(this.objBeneficiario.CodiOrigen)) {
                            APP.msg.warning('El origen del boleto es distinto al del bus.');
                            return auxValidate = false;
                        }
                        if (String(this.objBeneficiario.CodiServicioProgramacion) !== appVueVenta.filtro.CodiServicio.id) {
                            var resClaveCambioNivelServicio = await APP.msg.confirmClaveAutorizacion(
                                `${_.padStart(ClaveCambioNivelServicio, 3, '0')} - Cambio de servicio`
                                , 'Necesita permiso para realizar esta acción, ingrese la clave de autorización.'
                                , ClaveCambioNivelServicio);
                            if (!resClaveCambioNivelServicio)
                                return auxValidate = false;
                        }
                        var verificaLiquidacionComi = await appController.verificaLiquidacionComi(this.objBeneficiario.CodiProgramacion, this.objBeneficiario.CodiPuntoVenta);
                        if (verificaLiquidacionComi === "1") {
                            APP.msg.warning('El boleto se encuentra liquidado.');
                            return auxValidate = false;
                        }
                        if (appVueVenta.objTurno.X_Estado) {
                            var resClaveProgramacion = await APP.msg.confirmClaveAutorizacion(
                                `${_.padStart(ClaveProgramacion, 3, '0')} - Postergar boleto`
                                , 'El manifiesto ya fue emitido, ingrese la clave de autorización.'
                                , ClaveProgramacion);

                            if (!resClaveProgramacion)
                                return auxValidate = false;
                        }
                        var verificaNC = await appController.verificaNC(this.objBeneficiario.IdVenta);
                        if (verificaNC !== 0)
                            return auxValidate = false;
                        if (this.objBeneficiario.NivelAsiento !== String(appVueVenta.list.ventas[appVueVenta.indexVenta].NivelAsiento)) {
                            var resClaveCambioDeNivelDeAsiento = await APP.msg.confirmClaveAutorizacion(
                                `${_.padStart(ClaveCambioDeNivelDeAsiento, 3, '0')} - Postergar boleto`
                                , 'Para cambiar de nivel de asiento ingrese la clave de autorización.'
                                , ClaveCambioDeNivelDeAsiento);

                            if (!resClaveCambioDeNivelDeAsiento)
                                return auxValidate = false;
                        }
                        if (appController.validatePanel('91') === '1') {
                            if (this.objBeneficiario.CodiPuntoVenta !== Usuario.CodiPuntoVenta) {
                                APP.msg.warning('No se puede postergar boletos de otros puntos de venta.');
                                return auxValidate = false;
                            }
                        }
                        if (this.objBeneficiario.CodiProgramacion !== appVueVenta.filtro.CodiProgramacion) {
                            if (appController.validatePanel('107') === '1') {
                                if (appController.validaDocumentoRepetido(
                                    this.objBeneficiario.TipoDocumento,
                                    this.objBeneficiario.Documento,
                                    appVueVenta.list.ventas[appVueVenta.indexVenta].NroAsiento)
                                )
                                    return auxValidate = false;
                            }
                        }
                        var resConsultaPos = await appController.consultaPos('79', '03');
                        var resConsultaSumaBoletosPostergados = await appController.consultaSumaBoletosPostergados(
                            this.objBeneficiario.BoletoCompleto.substring(0, 1),
                            this.objBeneficiario.BoletoCompleto.substring(1),
                            this.filtro.empresa.id);
                        if (resConsultaPos !== '0') {
                            if (resConsultaSumaBoletosPostergados <= parseInt(resConsultaPos)) {

                                if (appController.validatePanelClave('28') === '1') {
                                    var resClavePostergacionesBoleto = await APP.msg.confirmClaveAutorizacion(
                                        `${_.padStart(ClavePostergacionesBoleto, 3, '0')} - Postergar boleto`
                                        , 'Ha llegado al tope de postergación para este boleto, ingrese la clave de autorización.'
                                        , ClavePostergacionesBoleto);

                                    if (!resClavePostergacionesBoleto)
                                        return auxValidate = false;
                                }
                            }
                        }
                        if (Usuario.Nivel !== 11 && Usuario.Nivel !== 1) {
                            if (this.objBeneficiario.ImpManifiesto === 'X') {
                                APP.msg.warning('No se puede postergar boleto porque cuenta con manifiesto impreso.');
                                return auxValidate = false;
                            }
                        }
                        if (this.objBeneficiario.FechaViaje !== appVueVenta.filtro.Fecha) {
                            var canPNP = await this.tablasPnpConsulta('10');
                            var valuePNP = appController.getValuePNP(canPNP);
                            if (this.objBeneficiario.FlagVenta === 'S' && !valuePNP) {
                                APP.msg.warning('Se ha superado el número máximo de boletos, no se puede emitir más boletos PNP.');
                                return auxValidate = false;
                            }
                        }
                        if (appController.validatePanel('151') === '1') {
                            if (this.objBeneficiario.FlagVenta === '9') {
                                var resClavePostergacionFlag9 = await APP.msg.confirmClaveAutorizacion(
                                    `${_.padStart(ClavePostergacionFlag9, 3, '0')} - Postergar boleto`
                                    , 'Necesita permiso para realizar esta acción, ingrese la clave de autorización.'
                                    , ClavePostergacionFlag9);
                                if (!resClavePostergacionFlag9)
                                    return auxValidate = false;
                            }
                        }
                        if (moment(this.objBeneficiario.FechaViaje, 'DD/MM/YYYY').isSameOrBefore(moment(), 'days')) {
                            if (appController.validatePanel('123') === '1') {
                                var controlTiempo = await this.controlTiempo("01");
                                if (controlTiempo > 0) {
                                    if (moment(this.objBeneficiario.HoraViaje, 'hh:mmA').isAfter(moment(), 'minutes')) {
                                        var auxDiffMinutes = moment(this.objBeneficiario.HoraViaje, 'hh:mmA').diff(moment(), 'minutes');
                                        if ((auxDiffMinutes / 60) < controlTiempo) {
                                            var resClaveMoverVentaFueraDeHora = await APP.msg.confirmClaveAutorizacion(
                                                `${_.padStart(ClaveMoverVentaFueraDeHora, 3, '0')} - Postergar boleto`
                                                , 'Se ha superado el tiempo disponible para modificar boleto, ingrese la clave de autorización.'
                                                , ClaveMoverVentaFueraDeHora);
                                            if (!resClaveMoverVentaFueraDeHora)
                                                return auxValidate = false;
                                        }
                                    }
                                }
                            }
                        }
                        if (this.objBeneficiario.CodiProgramacion !== appVueVenta.filtro.CodiProgramacion) {
                            if (appController.validatePanel('167') === '1') {
                                if (Usuario.Nivel !== 1 && Usuario.Nivel !== 11) {
                                    APP.msg.warning('Usuario no autorizado, solo los administradores pueden postergar.');
                                    return auxValidate = false;
                                }
                            }
                        }
                    }

                    return auxValidate;
                },
                tablasPnpConsulta: async function (_Tabla) {
                    var auxResponse = 0;

                    await APP.rq.axios2.post(APP.base + '/itinerarios/tablasPnpConsulta', {
                        Tabla: _Tabla
                    })
                        .then(res => {
                            if (res.data.Estado)
                                auxResponse = res.data.Valor;
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);

                    return auxResponse;
                }
            },
            computed: {
                filledCampos: function () {
                    if (this.filtro.empresa)
                        return this.filtro.empresa.id && this.filtro.serie && this.filtro.documento;
                    else
                        return false;
                }
            }
        });

        var appClaveAutorizacion = new Vue({
            el: "#appClaveAutorizacion",
            data: {
                password: '',
                Tipo: '',
                observacion: '',
                disabledBtnAceptar: false,
                usuario: null,
                list: {
                    usuarios: []
                },
                // Solo para reserva
                horaReal: '',
                // Usado en reintegro
                trustedPassword: false,
                disabledUsuario: false,
                idVenta: '',
                auditoria: {
                    Tabla: 'VENTA',
                    TipoMovimiento: '',
                    Boleto: '',
                    NumeAsiento: '',
                    Pasajero: '',
                    FechaViaje: '01/01/1900',
                    HoraViaje: '',
                    NomDestino: '',
                    Precio: 0,
                    Obs1: '',
                    Obs2: `TERMINAL${String(Usuario.Terminal).padStart(3, '0')}`,
                    Obs3: null,
                    Obs4: null,
                    Obs5: ''
                }
            },
            methods: {
                show: async function (_Tipo) {
                    this.limpiarClaveAutorizacion();

                    // Variables que solo se limpiarán cada vez que se abra el modal
                    this.Tipo = (_Tipo ? _Tipo : '');
                    this.response = false;
                    // -------------------------------------------------------------

                    switch (this.Tipo) {
                        case ClaveHoraConfirmacion:
                        case ClaveTiempoReserva:
                            this.getUsuariosHC('', null);
                            break;
                        case claveReintegro:
                        case claveReintegroConfirmacion:
                        case ClaveAnulacionPanel36: {
                            //Panel 147 Configurar clave de anulacion para que sea igual a la sesion del usuario
                            if (appController.validatePanel('147') === '1') {
                                this.usuario = appController.UsuarioClaveAutorizacion('147');
                                this.disabledUsuario = true;
                            }
                            else {
                                this.getUsuarioControlPwd('', null);
                            };
                        }; break;
                        case ClaveAnulacionPanel234:
                        case ClaveReimpresionPanel226:
                            {
                                if (appController.validatePanel('147') === '1') {
                                    this.usuario = appController.UsuarioClaveAutorizacion('147');
                                    this.disabledUsuario = true;
                                }
                                else
                                    this.getUsuarioClaveAnuRei('', null);
                            };
                            break;
                    }

                    $('#appClaveAutorizacion').modal('show');
                },
                getUsuariosHC: function (search, loading) {
                    var _this = this;

                    if (loading)
                        loading(true);

                    APP.rq.axios2.post(APP.base + '/base/get-usuariosHC', {
                        Descripcion: search,
                        Suc: 0,
                        Pv: 0
                    })
                        .then(res => {
                            if (res.data.Estado) {
                                if (loading)
                                    loading(false);

                                _this.list.usuarios = res.data.Valor;
                            }
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                getUsuarioControlPwd: function (search, loading) {
                    var _this = this;
                    if (loading)
                        loading(true);
                    APP.rq.axios2.post(APP.base + '/base/get-usuarioControlPwd', { Value: search})
                        .then(res => {
                            if (res.data.Estado) {
                                if (loading)
                                    loading(false);
                                _this.list.usuarios = res.data.Valor;
                            }
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                getUsuarioClaveAnuRei: async function (search, loading) {
                    var _this = this;
                    if (loading)
                        loading(true);
                    await APP.rq.axios2.post(APP.base + '/base/get-usuario-claveAnuRei', { Value: search })
                        .then(res => {
                            if (res.data.Estado) {
                                if (loading)
                                    loading(false);
                                _this.list.usuarios = _.cloneDeep(res.data.Valor);
                            }
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                recorrerClaveAutorizacion: function (auxValidate) {
                    var auxResponse = false;

                    if (!this.usuario && this.Tipo !== ClaveDescuentoDePasajes) {
                        if (this.Tipo === ClaveHoraConfirmacion || this.Tipo === ClaveTiempoReserva) {
                            $('#cboUsuarioCA input[type=search]').focus();
                            if (auxValidate === true) APP.msg.warning('Seleccione usuario.');
                        }
                        else {
                            if (this.Tipo === claveReintegroConfirmacion || this.Tipo === claveReintegro || this.Tipo === ClaveAnulacionPanel234 ||
                                this.Tipo === ClaveAnulacionPanel36 || this.Tipo === ClaveReimpresionPanel226) {

                                if (appController.validatePanel('147') === '1') {
                                    if (auxValidate === true) APP.msg.warning('Usuario no válido.');
                                }
                                else {
                                    $('#cboUsuarioCA input[type=search]').focus();
                                    if (auxValidate === true) APP.msg.warning('Seleccione usuario.');
                                }
                            }
                        }
                    }
                    else if (!this.password) {
                        document.getElementById('txtContraseniaCA').focus();
                        if (auxValidate === true) APP.msg.warning('Ingrese contraseña.');
                    }
                    else if (!this.observacion &&
                        (this.Tipo === ClaveDescuentoDePasajes || this.Tipo === claveReintegroConfirmacion || this.Tipo === claveReintegro ||
                        this.Tipo === ClaveAnulacionPanel234 || this.Tipo === ClaveAnulacionPanel36 || this.Tipo === ClaveReimpresionPanel226)) {
                        document.getElementById('txtObservacionCA').focus();
                        if (auxValidate === true) APP.msg.warning('Ingrese observación.');
                    }
                    else {
                        if (auxValidate !== true) this.sendClaveAutorizacion();;
                        auxResponse = true;
                    }

                    return auxResponse;
                },
                sendClaveAutorizacion: async function () {
                    var _this = this;
                    if (!_this.recorrerClaveAutorizacion(true))
                        return;

                    _this.disabledBtnAceptar = true;

                    switch (_this.Tipo) {
                        case ClaveHoraConfirmacion:
                            {
                                var auxResponse = await appController.sendClaveAutorizacionReserva(_this.usuario.id, _this.password);
                                if (auxResponse) {
                                    appVueVenta.validatorReservaHC = auxResponse;
                                    $('#appClaveAutorizacion').modal('hide');
                                }
                                else
                                    document.getElementById('txtContraseniaCA').focus();
                            };
                            break;
                        case claveReintegroConfirmacion:
                        case ClaveAnulacionPanel234:
                        case ClaveReimpresionPanel226:
                            {
                                _this.trustedPassword = await appVueVenta.consultaClaveAnuRei(_this.usuario.id, _this.password);
                                if (_this.trustedPassword) {
                                    var objAuditoria = {};
                                    objAuditoria.CodiUsuario = Usuario.CodiUsuario;
                                    objAuditoria.NomUsuario = Usuario.Nombre;
                                    objAuditoria.Tabla = _this.auditoria.Tabla;
                                    objAuditoria.TipoMovimiento = _this.auditoria.TipoMovimiento;
                                    objAuditoria.Boleto = _this.auditoria.Boleto;
                                    objAuditoria.NumeAsiento = _this.auditoria.NumeAsiento;
                                    objAuditoria.NomOficina = Usuario.NomSucursal;
                                    objAuditoria.NomPuntoVenta = Usuario.CodiPuntoVenta;
                                    objAuditoria.Pasajero = _this.auditoria.Pasajero;
                                    objAuditoria.FechaViaje = _this.auditoria.FechaViaje;
                                    objAuditoria.HoraViaje = _this.auditoria.HoraViaje;
                                    objAuditoria.NomDestino = _this.auditoria.NomDestino;
                                    objAuditoria.Precio = _this.auditoria.Precio;
                                    objAuditoria.Obs1 = _this.auditoria.Obs1;
                                    objAuditoria.Obs2 = _this.auditoria.Obs2;
                                    objAuditoria.Obs3 = (_this.auditoria.Obs3 == null) ? `AUTORIZA CODIGO:${_this.usuario.id} NOMBRE:${_this.usuario.label}` : _this.auditoria.Obs3;
                                    objAuditoria.Obs4 = (_this.auditoria.Obs4 == null) ? _this.observacion : _this.auditoria.Obs4;
                                    objAuditoria.Obs5 = _this.auditoria.Obs5;

                                    appVueVenta.grabarAuditoria(objAuditoria);

                                    $('#appClaveAutorizacion').modal('hide');
                                } else {
                                    document.getElementById('txtContraseniaCA').focus();
                                    APP.msg.warning('Usuario no autorizado o clave incorrecta.');
                                }
                            };
                            break;
                        case claveReintegro:
                            {
                                _this.trustedPassword = await appController.consultaClaveControl(_this.usuario.id, _this.password);
                                if (_this.trustedPassword) {
                                    appVueVenta.insertarUsuarioPorVenta(Usuario.CodiUsuario, APP.cte.Accion.Reintegro, _this.idVenta, _this.observacion);

                                    $('#appClaveAutorizacion').modal('hide');
                                } else {
                                    document.getElementById('txtContraseniaCA').focus();
                                    APP.msg.warning('Usuario no autorizado o clave incorrecta.');
                                }
                            };
                            break;
                        case ClaveAnulacionPanel36:
                            {
                                _this.trustedPassword = await appController.consultaClaveControl(_this.usuario.id, _this.password);
                                if (_this.trustedPassword) {
                                    appVueVenta.insertarUsuarioPorVenta(Usuario.CodiUsuario, APP.cte.Accion.Anulacion, _this.idVenta, _this.observacion);

                                    $('#appClaveAutorizacion').modal('hide');
                                }
                                else {
                                    document.getElementById('txtContraseniaCA').focus();
                                    APP.msg.warning('Usuario no autorizado o clave incorrecta.');
                                }
                            };
                            break;
                        case ClaveTiempoReserva:
                            {
                                var auxResponse = await appController.sendClaveAutorizacionReserva(_this.usuario.id, _this.password);
                                if (auxResponse) {
                                    appVueVenta.validatorTiempoReserva = auxResponse;
                                    $('#appClaveAutorizacion').modal('hide');
                                }
                                else
                                    document.getElementById('txtContraseniaCA').focus();
                            };
                            break;
                        default:
                            await appController.sendClaveAutorizacion(_this.password, _this.Tipo, _this.observacion);
                    }

                    _this.disabledBtnAceptar = false;
                },
                limpiarClaveAutorizacion: function () {
                    let _this = this;
                    _this.password = '';
                    _this.observacion = '';
                    _this.disabledBtnAceptar = false;
                    _this.usuario = null;
                    _this.trustedPassword = false;
                    _this.disabledUsuario = false;
                    _this.idVenta = '';
                    //auditoria
                    _this.auditoria.Tabla = 'VENTA';
                    _this.auditoria.TipoMovimiento = '';
                    _this.auditoria.Boleto = '';
                    _this.auditoria.NumeAsiento = '';
                    _this.auditoria.Pasajero = '';
                    _this.auditoria.FechaViaje = '01/01/1900';
                    _this.auditoria.HoraViaje = '';
                    _this.auditoria.NomDestino = '';
                    _this.auditoria.Precio = 0;
                    _this.auditoria.Obs1 = '';
                    _this.auditoria.Obs2 = `TERMINAL ${String(Usuario.Terminal).padStart(3, '0')}`;
                    _this.auditoria.Obs3 = null;
                    _this.auditoria.Obs4 = null;
                    _this.auditoria.Obs5 = '';
                },
                cerrarClaveAutorizacion: function () {
                    $('#appClaveAutorizacion').modal('hide');
                },
                getLabel: function (option) {
                    return `${option.id} - ${option.label}`
                },
                getSearchAutocomplete: function (search, loading) {
                    switch (this.Tipo) {
                        case ClaveHoraConfirmacion:
                        case ClaveTiempoReserva:
                            this.getUsuariosHC(search, loading);
                            break;
                        case claveReintegroConfirmacion:
                        case claveReintegro:
                        case ClaveAnulacionPanel36:
                            this.getUsuarioControlPwd(search, loading);
                            break;
                        case ClaveAnulacionPanel234:
                        case ClaveReimpresionPanel226:
                            this.getUsuarioClaveAnuRei(search, loading);
                            break;
                    }
                }
            }
        });

        var appVueCreditoClientes = new Vue({
            el: "#appVueCreditoClientes",
            data: {
                list: {
                    clientes: []
                },
                paginate: ['items'],
                venta: {}
            },
            mounted: function () { },
            methods: {
                show: function (_dataVenta) {
                    this.venta = _dataVenta;
                    this.listarClientesContrato();
                    $('#appVueCreditoClientes').modal('show');
                },
                listarClientesContrato: function () {
                    var _this = this;
                    var _request = {};
                    _request.FechaViaje = _this.venta.FechaViaje;
                    _request.CodiOficina = (_this.venta.CodiOficina ? _this.venta.CodiOficina.id : '0');
                    _request.CodiRuta = (_this.venta.CodiRuta ? _this.venta.CodiRuta.id : '0');
                    _request.CodiServicio = (_this.venta.CodiServicio ? _this.venta.CodiServicio.id : '0');
                    _request.CodiBus = _this.venta.CodiBus;
                    _request.NumeAsiento = 0;
                    _request.HoraViaje = _this.venta.HoraViaje;
                    APP.rq.axios2.post(APP.base + '/itinerarios/listarClientesContrato', {
                        request: _request
                    })
                        .then(res => {
                            if (res.data.Estado) {
                                _this.list.clientes = res.data.Valor;

                                if (!res.data.EsCorrecto)
                                    APP.msg.warning(res.data.Mensaje);

                                _this.$nextTick(() => {
                                    if (_this.$refs.paginatorCC && _this.list.clientes.length > 0)
                                        _this.$refs.paginatorCC.goToPage(1);
                                });
                            }
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                esc: function (event) {
                    if (event.keyCode === 27)
                        this.cerrarCreditoClientes();
                },
                cerrarCreditoClientes: function () {
                    $('#appVueCreditoClientes').modal('hide');
                },
                limpiarCreditoClientes: function () {
                    this.list.clientes = [];
                },
                sendRow: function (item) {
                    var auxItem = {};
                    auxItem.RucCliente = item.RucCliente;
                    auxItem.RazonSocial = item.RazonSocial;
                    auxItem.IdContrato = item.IdContrato;
                    auxItem.IdRuc = item.IdRuc;

                    auxItem.CntBoletos = item.CntBoletos;
                    auxItem.SaldoBoletos = item.SaldoBoletos;
                    auxItem.IdPrecio = item.IdPrecio;
                    auxItem.Precio = item.Precio;

                    appController.sendDataCredito(auxItem);

                    this.cerrarCreditoClientes();
                }
            },
            computed: {},
            watch: {}
        });

        var appVueCreditoOpciones = new Vue({
            el: "#appVueCreditoOpciones",
            data: {
                seccion: null,
                area: null,
                hospital: null,
                list: {
                    secciones: [],
                    areas: [],
                    hospitales: []
                },
                boletoTipoDir: '1',
                fechaCita: '',
                showOpcionesHospital: false
            },
            mounted: function () { },
            methods: {
                show: function (_idContrato) {
                    if (this.list.secciones.length === 0)
                        this.getSecciones(_idContrato);
                    if (this.list.areas.length === 0)
                        this.getAreas(_idContrato);
                    if (this.list.hospitales.length === 0)
                        this.getHospitales(Usuario.CodiSucursal);

                    // Valida 'opcionesHospital'
                    if (appController.validatePanel('190') === '1')
                        this.showOpcionesHospital = true;

                    $('#appVueCreditoOpciones').modal('show');
                },
                getSecciones(_idContrato) {
                    var _this = this;
                    APP.rq.axios2.get(APP.base + '/base/get-secciones/', { params: { idContrato: _idContrato } })
                        .then(res => {
                            if (res.data.Estado)
                                _this.list.secciones = _.cloneDeep(res.data.Valor);
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                getAreas(_idContrato) {
                    var _this = this;
                    APP.rq.axios2.get(APP.base + '/base/get-areas/', { params: { idContrato: _idContrato } })
                        .then(res => {
                            if (res.data.Estado)
                                _this.list.areas = _.cloneDeep(res.data.Valor);
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                getHospitales(_CodiSucursal) {
                    var _this = this;
                    APP.rq.axios2.get(APP.base + '/base/get-hospitales', { params: { codiSucursal: _CodiSucursal } })
                        .then(res => {
                            if (res.data.Estado)
                                _this.list.hospitales = _.cloneDeep(res.data.Valor);
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                esc: function (event) {
                    if (event.keyCode === 27)
                        this.cancelarCreditoOpciones();
                },
                cancelarCreditoOpciones: function () {
                    $('#appVueCreditoOpciones').modal('hide');
                    appController.liberarAsientoActual();
                },
                limpiarCreditoOpciones: function () {
                    this.seccion = null;
                    this.area = null;
                    this.hospital = null;
                    this.boletoTipoDir = '1';
                    this.fechaCita = '';
                    this.showOpcionesHospital = false;
                },
                recorrerCreditoOpciones: function (auxValidate) {
                    var auxResponse = false;

                    if (!this.seccion) {
                        $('#cboSeccion input[type=search]').focus();
                        if (auxValidate === true) APP.msg.warning('Seleccione una sección.');
                    }
                    else if (!this.area) {
                        $('#cboArea input[type=search]').focus();
                        if (auxValidate === true) APP.msg.warning('Seleccione una área.');
                    }
                    else if (this.showOpcionesHospital) {

                        if (!this.fechaCita) {
                            document.getElementById('txtFechaCita').focus();
                            if (auxValidate === true) APP.msg.warning('Seleccione una fecha.');
                        }
                        else {
                            var validateFechaCita = moment(this.fechaCita, 'DD/MM/YYYY').isAfter(moment(appVueVenta.filtro.Fecha, 'DD/MM/YYYY'), 'days');

                            if (auxValidate && this.boletoTipoDir === '0' && validateFechaCita) {
                                document.getElementById('txtFechaCita').focus();
                                APP.msg.warning('Selecciona una fecha menor o igual a la fecha actual.');
                            }
                            else if (auxValidate !== 'cboHospital' && auxValidate !== true && !this.hospital)
                                $('#cboHospital input[type=search]').focus();
                            else {
                                document.getElementById('btnAceptar_CO').focus();
                                auxResponse = true;
                            }
                        }
                    }
                    else {
                        document.getElementById('btnAceptar_CO').focus();
                        auxResponse = true;
                    }

                    return auxResponse;
                },
                recorrerFechaCita: function () {
                    var _this = this;

                    document.getElementById('txtFechaCita').blur();

                    _this.$nextTick(() => {
                        _this.recorrerCreditoOpciones();
                    });
                },
                saveCreditoOpciones: async function () {
                    if (!this.recorrerCreditoOpciones(true))
                        return;

                    var request = {};
                    request.area = this.area;
                    request.boletoTipoDir = this.boletoTipoDir;
                    request.fechaCita = this.fechaCita;
                    request.hospital = this.hospital;

                    // SweetAlert para 'fechaAbierta'
                    if (await APP.msg.confirm(
                        'Fecha Abierta'
                        , '¿Desea enviar la venta al Crédito a Fecha Abierta?'
                        , false
                        , false
                        , false
                        , true
                        )
                    )
                        request.fechaAbierta = true;
                    else
                        request.fechaAbierta = false;

                    this.sendCreditoOpciones(request);

                    $('#appVueCreditoOpciones').modal('hide');
                },
                sendCreditoOpciones: function (_request) {
                    appController.sendCreditoOpciones(_request);
                }
            },
            computed: {},
            watch: {}
        });

        var appVueBuscaClientePasaje = new Vue({
            el: "#appVueBuscaClientePasaje",
            data: {
                list: {
                    clientesPasaje: []
                },
                paginate: ['items'],
                NombreBCP: '',
                ApePaternoBCP: '',
                ApeMaternoBCP: '',
                TipoDocId: ''
            },
            mounted: function () { },
            methods: {
                show: function (_CodiTipoDocId) {
                    this.TipoDocId = _CodiTipoDocId;

                    $('#appVueBuscaClientePasaje').modal('show');
                },
                getClientesPasaje() {
                    var _this = this;

                    document.getElementById('txtApeMaternoBCP').blur();

                    // Calculamos 'tmpCampo'
                    var tmpCampo = '';
                    if (_this.NombreBCP)
                        tmpCampo = 'nombres';
                    else if (_this.ApePaternoBCP)
                        tmpCampo = 'paterno';
                    else if (_this.ApeMaternoBCP)
                        tmpCampo = 'materno';
                    // ---------------------

                    // Validaciones para evitar consulta muy grande.
                    switch (tmpCampo) {
                        case 'nombres':
                            {
                                if (_this.NombreBCP.length < 3) {
                                    APP.msg.warning('Ingrese como mínimo 3 caracteres.');
                                    document.getElementById('txtNombreBCP').focus();
                                    return;
                                }
                            };
                            break;
                        case 'paterno':
                            if (_this.ApePaternoBCP.length < 3) {
                                APP.msg.warning('Ingrese como mínimo 3 caracteres.');
                                document.getElementById('txtApePaternoBCP').focus();
                                return;
                            };
                            break;
                        case 'materno':
                            if (_this.ApeMaternoBCP.length < 3) {
                                APP.msg.warning('Ingrese como mínimo 3 caracteres.');
                                document.getElementById('txtApeMaternoBCP').focus();
                                return;
                            };
                            break;
                    }
                    // ---------------------------------------------

                    APP.rq.axios.post(APP.base + '/itinerarios/buscarClientesPasaje/' + APP.util.getQueryParamByObject({
                        campo: tmpCampo,
                        nombres: _this.NombreBCP,
                        paterno: _this.ApePaternoBCP,
                        materno: _this.ApeMaternoBCP,
                        TipoDocId: _this.TipoDocId
                    }))
                        .then(res => {
                            if (res.data.Estado) {
                                _this.list.clientesPasaje = _.sortBy(res.data.Valor, ['NombreCliente', 'ApellidoPaterno', 'ApellidoMaterno']);

                                _this.$nextTick(function () {
                                    if (_this.$refs.paginatorBCP && _this.list.clientesPasaje.length > 0)
                                        _this.$refs.paginatorBCP.goToPage(1);
                                })
                            }
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                esc: function (event) {
                    if (event.keyCode === 27)
                        this.cerrarBuscaClientePasaje();
                },
                cerrarBuscaClientePasaje: function () {
                    $('#appVueBuscaClientePasaje').modal('hide');

                    this.$nextTick(function () {
                        document.getElementById('txtDocumento').focus();
                    });
                },
                limpiarBuscaClientePasaje: function () {
                    this.list.clientesPasaje = [];
                    this.NombreBCP = '';
                    this.ApePaternoBCP = '';
                    this.ApeMaternoBCP = '';
                    this.TipoDocId = '';
                },
                sendRow: async function (item) {
                    await appController.sendBuscaClientePasaje(item);
                    $('#appVueBuscaClientePasaje').modal('hide');

                    this.$nextTick(function () {
                        appController.recorridoSectionVentas();
                    });
                }
            },
            computed: {},
            watch: {}
        });

        var appVueDescuentoControl = new Vue({
            el: "#appVueDescuentoControl",
            data: {
                ImporteBoleto: '',
                DescuentoTipo: '0',
                ImporteDescuento: '',
                ImporteDescontado: '',
                Autorizado: '',
                Clave: ''
            },
            mounted: function () { },
            methods: {
                show: function (_PrecioVenta) {
                    // Validar si en un ticket anterior ya se validó la 'clave de autorización'.
                    appController.existValidadorDescuentoControl();
                    // -------------------------------------------------------------------------

                    appController.setDataTempDescuentoControl();

                    this.ImporteBoleto = _PrecioVenta;
                    $('#appVueDescuentoControl').modal('show');
                },
                cancelarDescuentoControl: function () {
                    $('#appVueDescuentoControl').modal('hide');
                },
                esc: function (event) {
                    if (event.keyCode === 27)
                        this.cancelarDescuentoControl();
                },
                limpiarDescuentoControl: function () {
                    this.ImporteBoleto = '';
                    this.DescuentoTipo = '0';
                    this.ImporteDescuento = '';
                    this.ImporteDescontado = '';
                    this.Autorizado = '';
                    this.Clave = '';
                },
                recorrerDescuentoControl: function (auxValidate) {
                    var auxResponse = false;

                    var auxImporteDescuento = parseFloat(this.ImporteDescuento);
                    var auxImporteDescontado = parseFloat(this.ImporteDescontado);

                    if (!this.ImporteDescuento) {
                        document.getElementById('txtImporteDescDC').focus();
                        if (auxValidate === true) APP.msg.warning('Ingrese descuento.');
                    }
                    else if (!auxImporteDescuento) {
                        document.getElementById('txtImporteDescDC').focus();
                        if (auxValidate === true) APP.msg.warning('Ingrese un descuento válido.');
                    }
                    else if (!auxImporteDescontado) {
                        document.getElementById('txtImporteDescDC').focus();
                        if (auxValidate === true) APP.msg.warning('El importe descontado no es válido, ingrese otro descuento.');
                    }
                    else if (!this.Autorizado) {
                        document.getElementById('txtAutorizadoDC').focus();
                        if (auxValidate === true) APP.msg.warning('Ingrese nombre.');
                    }
                    else if (!this.Clave) {
                        document.getElementById('txtClaveAutorizacionDC').focus();
                        if (auxValidate === true) APP.msg.warning('Ingrese clave de autorización.');
                    }
                    else {
                        document.getElementById('btnAceptarDC').focus();
                        auxResponse = true;
                    }

                    return auxResponse;
                },
                saveDescuentoControl: async function () {
                    if (!this.recorrerDescuentoControl(true))
                        return;

                    await appController.sendClaveAutorizacion(this.Clave, ClaveCambioPrecioBoletoViaje);
                }
            },
            computed: {},
            watch: {
                ImporteDescuento: function (newValue) {
                    if (newValue) {
                        var auxImporteBoleto = parseFloat(this.ImporteBoleto);
                        var auxImporteDescuento = parseFloat(newValue);

                        if (this.DescuentoTipo === '0') {
                            if (auxImporteDescuento >= auxImporteBoleto)
                                this.ImporteDescontado = '0.00';
                            else
                                this.ImporteDescontado = (auxImporteBoleto - auxImporteDescuento).toFixed(2);
                        }
                        else {
                            if (auxImporteDescuento >= 100)
                                this.ImporteDescontado = '0.00';
                            else
                                this.ImporteDescontado = (((100 - auxImporteDescuento) / 100) * auxImporteBoleto).toFixed(2);
                        }
                    }
                    else
                        this.ImporteDescontado = '';
                },
                DescuentoTipo: function () {
                    if (this.ImporteDescuento) {
                        var auxImporteBoleto = parseFloat(this.ImporteBoleto);
                        var auxImporteDescuento = parseFloat(this.ImporteDescuento);

                        if (this.DescuentoTipo === '0') {
                            if (auxImporteDescuento >= auxImporteBoleto)
                                this.ImporteDescontado = '0.00';
                            else
                                this.ImporteDescontado = (auxImporteBoleto - auxImporteDescuento).toFixed(2);
                        }
                        else {
                            if (auxImporteDescuento >= 100)
                                this.ImporteDescontado = '0.00';
                            else
                                this.ImporteDescontado = (((100 - auxImporteDescuento) / 100) * auxImporteBoleto).toFixed(2);
                        }
                    }

                    document.getElementById('txtImporteDescDC').focus();
                }
            }
        });

        var appVueModificacionBoleto = new Vue({
            el: "#appVueModificacionBoleto",
            data: {
                filtro: {
                    idVenta	: 0,
                    dni: '',
                    nombre: '',
                    ruc: '',
                    edad: '',
                    telefono: '',
                    recoger: '',
                    tipoDoc: '',
                    nacionidad: ''
                },
                item: {
                    codEmpresa: '',
                    empresa: '',
                    tipo: 'M',
                    serie: '',
                    numero: '',
                    destinoBus: '',
                    turno: '',
                    ruta: '',
                    dia: '',
                    fechaViaje: '',
                    fechaVenta: '',
                    correlativoSinTipo: '',
                    sexo: '',
                    razSocial: '',
                    asiento: '',
                    precio: '',
                    observacion: '',
                    nombre: '',
                    apepat: '',
                    apemat: '',
                    notaCredito: ''
                },
                list: {
                    empresas: []
                },
                showData: false,
                panel: true
            },
            mounted: function () {
                let _this = this;

                window.addEventListener('keydown', _this.configEventKeyF9);
                $('#appVueModificacionBoleto').on('shown.bs.modal', function () {
                    window.addEventListener('keyup', _this.esc);
                    _this.$refs.refMBNumero.focus();
                });
            },
            methods: {
                show: function () {
                    this.limpiarModBoleto(true);
                    this.panel = (appController.validatePanel('241') === '1') ? true : false;

                    $('#appVueModificacionBoleto').modal('show');
                    this.setData();
                },
                setData: function () {
                    let _this = this;
                    var correlativo = appController.getCurrentCorrelativo();
                    _this.item.tipo = (correlativo) ? ((correlativo.substring(0, 1) === '0') ? 'M' : correlativo.substring(0, 1)) : '';
                    _this.item.serie = (correlativo) ? correlativo.substring(1, 4) : '';
                    _this.item.numero = (correlativo) ? correlativo.substring(5, 13) : '';
                    //_this.item.empresa = appVueVenta.$refs.refEmpresa.value.label;
                    _this.item.codEmpresa = (appVueVenta.$refs.refEmpresa.value) ? appVueVenta.$refs.refEmpresa.value.id : '';
                    _this.$nextTick(() => {
                        if (_this.list.empresas.length == 0)
                            _this.list.empresas = _.cloneDeep(empresas);
                    });
                },
                configEventKeyF9: function (event) {
                    if (event.keyCode === 120) {
                        if (appVueVenta.showVentas) {
                            this.show();
                        }
                    }
                },
                searchData: async function () {
                    let _this = this;
                    await APP.rq.axios2.post(APP.base + '/itinerarios/buscaBoletoF9' + APP.util.getQueryParamByObject({
                        Serie: _this.item.serie,
                        Numero: _this.item.numero,
                        Tipo: _this.item.tipo,
                        CodEmpresa: _this.item.codEmpresa
                    }))
                        .then(async (res) => {
                            if (res.data.Valor) {
                                //Validación: No debe tener nota de crédito
                                _this.item.notaCredito = '';
                                var verificaNotaCredito = await appVueFechaAbierta.verificaNotaCredito(parseInt(res.data.Valor.IdVenta));
                                if (verificaNotaCredito) {
                                    if (verificaNotaCredito.Valor > 0) {
                                        _this.item.notaCredito = _this.item.tipo + _.cloneDeep(verificaNotaCredito.Mensaje).substring(verificaNotaCredito.Mensaje.length - 11);
                                    }
                                }

                                var codiProgramacion = _.cloneDeep(res.data.Valor.CodiProgramacion);

                                _this.filtro.idVenta = res.data.Valor.IdVenta;
                                _this.filtro.dni = res.data.Valor.Dni;
                                _this.filtro.nombre = res.data.Valor.Nombre;
                                _this.filtro.ruc = res.data.Valor.RucCliente;
                                _this.filtro.edad = res.data.Valor.Edad;
                                _this.filtro.telefono = res.data.Valor.Telefono;
                                _this.filtro.recoger = res.data.Valor.RecoVenta;
                                _this.filtro.tipoDoc = res.data.Valor.TipoDocumento;
                                _this.filtro.nacionidad = res.data.Valor.Nacionalidad;
                                //_this.item.codEmpresa = res.data.Valor.CodiEmpresa;
                                _this.item.destinoBus = (codiProgramacion) ? res.data.Valor.CodiRuta : '';
                                _this.item.turno = (codiProgramacion) ? res.data.Valor.HoraProgramacion : '';
                                _this.item.ruta = res.data.Valor.CodiSubruta;
                                _this.item.dia = (codiProgramacion) ? res.data.Valor.FechaProgramacion: '';
                                _this.item.fechaViaje = (codiProgramacion) ? res.data.Valor.FechaViaje : '';
                                _this.item.horaViaje = (codiProgramacion) ? res.data.Valor.HoraViaje : '';
                                _this.item.fechaVenta = res.data.Valor.FechaVenta;
                                _this.item.correlativoSinTipo = `${res.data.Valor.Tipo}${res.data.Valor.SerieBoleto}-${_.padStart(res.data.Valor.NumeBoleto, 8, '0')}`;
                                _this.item.sexo = res.data.Valor.Sexo;
                                _this.item.razSocial = res.data.Valor.RazonSocial;
                                _this.item.asiento = res.data.Valor.NumeAsiento;
                                _this.item.precio = res.data.Valor.PrecioVenta;
                                //_this.item.observacion = res.data.Valor.Observacion;
                                _this.item.nombre = res.data.Valor.SplitNombre[0];
                                _this.item.apepat = res.data.Valor.SplitNombre[1];
                                _this.item.apemat = res.data.Valor.SplitNombre[2];

                                _this.filtro.SerieBoleto = res.data.Valor.SerieBoleto;
                                _this.filtro.NumeBoleto = res.data.Valor.NumeBoleto;
                                _this.showData = true;
                            } else {
                                _this.limpiarModBoleto(false);
                                APP.msg.warning('No se encontró resultados');
                            }
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                    _this.$nextTick(() => {
                        _this.$refs.refMBRecoger.focus();
                    });
                },
                getLabel: function (option) {
                    return `${option.id} - ${option.label}`
                },
                cancelarModBoleto: function () {
                    $('#appVueModificacionBoleto').modal('hide');
                },
                esc: function (event) {
                    if (event.keyCode === 27) {
                        this.close();
                    }
                },
                close: function () {
                    window.removeEventListener('keyup', this.esc);
                    $('#appVueModificacionBoleto').modal('hide');
                },
                limpiarModBoleto: function (_all) {
                    let _this = this;
                    if (_all) {
                        _this.item.codEmpresa = 0;
                        _this.item.empresa = '';
                        _this.item.tipo = 'M';
                        _this.item.serie = '';
                        _this.item.numero = '';
                    }
                    _this.filtro.idVenta = 0;
                    _this.filtro.dni = '';
                    _this.filtro.nombre = '';
                    _this.filtro.ruc = '';
                    _this.filtro.edad = '';
                    _this.filtro.telefono = '';
                    _this.filtro.recoger = '';
                    _this.filtro.tipoDoc = '';
                    _this.filtro.nacionidad = '';
                    _this.item.destinoBus = '';
                    _this.item.turno = '';
                    _this.item.ruta = '';
                    _this.item.dia = '';
                    _this.item.fechaViaje = '';
                    _this.item.fechaVenta = '';
                    _this.item.correlativoSinTipo = '';
                    _this.item.sexo = '';
                    _this.item.razSocial = '';
                    _this.item.asiento = '';
                    _this.item.precio = '';
                    _this.item.observacion = '';
                    _this.item.nombre = '';
                    _this.item.apepat = '';
                    _this.item.apemat = '';
                    _this.item.notaCredito = '';
                    _this.showData = false;
                },
                saveModBoleto: async function () {
                    let _this = this;

                    //Validación: No debe tener nota de crédito
                    var verificaNotaCredito = await appVueFechaAbierta.verificaNotaCredito(parseInt(_this.filtro.idVenta));
                    if (verificaNotaCredito) {
                        if (verificaNotaCredito.Valor > 0) {
                            APP.msg.warning(verificaNotaCredito.Mensaje);
                            return;
                        }
                    } else return;

                    if (_this.filtro.idVenta !== 0) {
                        await APP.rq.axios2.post(APP.base + '/itinerarios/actualizaBoletoF9' + APP.util.getQueryParamByObject({
                            IdVenta: _this.filtro.idVenta,
                            Dni: _this.filtro.dni,
                            Nombre: _this.filtro.nombre,
                            Ruc: _this.filtro.ruc,
                            Edad: _this.filtro.edad,
                            Telefono: _this.filtro.telefono,
                            RecoVenta: _this.filtro.recoger,
                            TipoDoc: _this.filtro.tipoDoc,
                            Nacionalidad: _this.filtro.nacionidad,
                            SerieBoleto: _this.filtro.SerieBoleto,
                            NumeBoleto: _this.filtro.NumeBoleto,
                            Precio: parseFloat(_this.item.precio).toFixed(2),
                            NombDestino: _this.$options.filters.rutas(_this.item.ruta),
                            NumAsiento: _this.item.asiento,
                            FechaViaje: _this.item.fechaViaje,
                            HoraViaje: _this.item.horaViaje
                        }))
                            .then(async function (res) {
                                if (res.data.Valor) {
                                    _this.close();
                                    await appController.chargeTurnos();
                                    _this.$nextTick(() => {
                                        APP.msg.info(res.data.Mensaje);
                                    });
                                } else APP.msg.error(res.data.Mensaje);
                            })
                            .catch(APP.rq.axios_handler_error_alert);
                    }
                }
            },
            computed: {
                filtroCodiEmpresa: {
                    get: function () {
                        if (this.list.empresas.length > 0 && this.list.empresas.find(x => x.id === this.item.codEmpresa)) {
                            return this.list.empresas.find(x => x.id === this.item.codEmpresa)
                        }
                    },
                    set: function (value) {
                        if (value !== '' && value !== null) {
                            if (this.list.empresas.find(x => x.id === value.id)) {
                                this.item.codEmpresa = value.id;
                                this.$refs.refMBSerie.focus()
                            }
                        } else {
                            this.item.codEmpresa = '';
                        }
                    }
                },
                filledData: function () {
                    return this.filtro.nacionidad
                }
            },
            watch: {}
        });

        var appVueFechaAbierta = new Vue({
            el: '#appVueFechaAbierta',
            data: {
                filtro: {
                    IdVenta: 0,
                    CodiProgramacion: '',
                    NumeAsiento: '',
                    CodiServicio: '',
                    FechaViaje: '',
                    HoraViaje: '',
                    NroViaje: '',
                    FechaProgramacion: '',
                    CodiEmpresa: '',
                    CodiSucursal: '',
                    CodiRuta: '',
                    CodiBus: '',
                    HoraProgramacion: '',
                },
                item: {
                    Nombre: '',
                    Dni: '',
                    Fecha: '',
                    Tipo: '',
                    Serie: '',
                    Numero: '',
                    CodEmpresa: '',
                    CodiDestino: ''
                },
                table: {
                    Nombre: '',
                    Tipo: '',
                    Serie: '',
                    Numero: '',
                    FechaVenta: '',
                    Precio: '',
                    Origen: '',
                    Destino: '',
                    Empresa: ''
                },
                list: {
                    pasajeros: [],
                    destinos: [],
                    empresas: []
                },
                paginate: ['items'],
                showData: false,
                asientoSel: {},
                panel: true
            },
            mounted: function () {
                let _this = this;

                //_this.panel = (appController.validatePanel(241) === '1') ? true : false;

                $('#appVueFechaAbierta').on('shown.bs.modal', function () {
                    window.addEventListener('keyup', _this.esc);
                    $(document).off('focusin.modal');
                    _this.$refs.refFAEmpresa.$el.querySelector('input').focus();
                });
            },
            methods: {
                show: function (asientoSel) {
                    this.limpiarFA();
                    this.asientoSel = asientoSel;
                    $('#appVueFechaAbierta').modal('show');
                    this.setData();
                },
                setData: function () {
                    let _this = this;
                    _this.item.CodEmpresa = appVueVenta.$refs.refEmpresa.value.id;
                    _this.$nextTick(() => {
                        if (_this.list.empresas.length == 0) {
                            _this.list.empresas = empresas;
                            _this.list.empresas.unshift(selectAll);
                        }

                        if (_this.list.destinos.length == 0) {
                            _this.list.destinos = _.cloneDeep(rutas);
                            _this.list.destinos.unshift(selectAll);
                        }
                    });
                },
                searchData: async function () {
                    let _this = this;
                    await APP.rq.axios2.post(APP.base + '/itinerarios/ventaConsultaF6' + APP.util.getQueryParamByObject(_this.item))
                        .then(res => {
                            if (res.data.Valor.length > 0) {
                                _this.list.pasajeros = res.data.Valor;
                                _this.showData = true;
                            } else APP.msg.warning('No se encontró resultados');
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                sendRow: async function (item) {
                    let _this = this;

                    var resConfirmClaveAutorizacion = false;
                    var flagAuditoria = false;

                    //Validación: Origen y Destino del pasajero no debe ser distinto al del Bus
                    var _origen = String(appVueVenta.filtro.CodiSucursal.id);
                    var _destino = String(appVueVenta.filtro.CodiDestinoPas.id);
                    if (!(_origen === String(item.CodiOrigen) && _destino === String(item.CodiSubruta))) {
                        APP.msg.warning('El origen y el destino del pasajero son distintos al del bus.');
                        return;
                    }

                    //Validación: No debe tener nota de crédito
                    var verificaNotaCredito = await _this.verificaNotaCredito(parseInt(item.IdVenta));
                    if (verificaNotaCredito) {
                        if (verificaNotaCredito.Valor > 0) {
                            APP.msg.warning(verificaNotaCredito.Mensaje);
                            return;
                        }
                    } else return;

                    //Validación: Si panel 107 esta activo, no debe permitir repetir el DNI en el plano
                    if (appController.validatePanel('107') === '1') {
                        if ((_.findIndex(appVueVenta.list.tempList, (o) => { return o.NumeroDocumento === item.Dni && o.TipoDocumento === item.TipoDoc; })) < 0) {
                            APP.msg.warning('El DNI está usándose en otro asiento.');
                            return;
                        }
                    }

                    //Validación: El número de días no debe exceder a lo permitido, salvo clave 25
                    var validateNumDias = await _this.validateNumDias(item.FechaVenta, '11');
                    if (validateNumDias) {
                        if (validateNumDias.Valor) {
                            resConfirmClaveAutorizacion = await APP.msg.confirmClaveAutorizacion(
                                `${_.padStart(ClaveFechaAbiertaABolPasados, 3, '0')} - Confirmar Fecha Abierta`
                                , validateNumDias.Mensaje
                                , ClaveFechaAbiertaABolPasados);

                            if (!resConfirmClaveAutorizacion) {
                                APP.msg.warning('El usuario no está autorizado para esta transacción');
                                return;
                            }
                        }
                    } else return;

                    //Validación: Si es Venta Remota solo puede acceder con clave 72
                    if (item.StRemoto === '1') {
                        resConfirmClaveAutorizacion = await APP.msg.confirmClaveAutorizacion(
                            `${_.padStart(ClaveConfirmacionDeBoletosRemotosSinManifiesto, 3, '0')} - Confirmar Boleto Postergado`
                            , 'Para confirmar el boleto postergado, ingrese la clave de autorización.'
                            , ClaveConfirmacionDeBoletosRemotosSinManifiesto);

                        if (!resConfirmClaveAutorizacion) {
                            APP.msg.warning('El usuario no está autorizado para esta transacción');
                            return;
                        } else {
                            flagAuditoria = true;
                        }
                    }

                    //Validación: Los niveles de asiento (1, 2) deben ser iguales, salvo clave 44
                    var validateAsiento = await _this.validateNivelAsiento(parseInt(item.IdVenta), appVueVenta.objPlano.CodiBus, _this.asientoSel.Tipo);
                    if (validateAsiento) {
                        if (!validateAsiento.Valor) {
                            resConfirmClaveAutorizacion = await APP.msg.confirmClaveAutorizacion(
                                `${_.padStart(ClaveCambioDeNivelDeAsiento, 3, '0')} - Cambiar Nivel de Asiento`
                                , validateAsiento.Mensaje + ', para cambiar de nivel ingrese la clave de autorización.'
                                , ClaveCambioDeNivelDeAsiento);

                            if (!resConfirmClaveAutorizacion) {
                                APP.msg.warning('El usuario no está autorizado para esta transacción');
                                return;
                            }
                        }
                    } else return;

                    var input = {};
                    input.CodiEsca = (item.CodiEsca) ? item.CodiEsca.substr(item.CodiEsca.length - 11) : '';
                    input.CodiProgramacion = parseInt(appVueVenta.filtro.CodiProgramacion);
                    input.CodiOrigen = item.CodiOrigen;
                    input.IdVenta = parseInt(item.IdVenta);
                    input.NumeAsiento = appVueVenta.list.ventas[appVueVenta.indexVenta].NroAsiento;
                    input.CodiRuta = item.CodiSubruta;
                    input.CodiServicio = appVueVenta.filtro.CodiServicio.id;
                    input.Tipo = item.Tipo;
                    input.Oficina = parseInt(appVueVenta.filtro.CodiSucursal.id);
                    input.FechaViaje = appVueVenta.filtro.Fecha;
                    input.HoraViaje = appVueVenta.filtro.Turno;

                    input.NroViaje = appVueVenta.filtro.NroViaje;
                    input.FechaProgramacion = appVueVenta.objTurno.FechaProgramacion;
                    input.CodiEmpresa = appVueVenta.filtro.CodiEmpresa.id;
                    input.CodiSucursal = appVueVenta.filtro.CodiOrigenBus.id;
                    input.CodiRutaBus = appVueVenta.filtro.CodiDestinoBus.id;
                    input.CodiBus = appVueVenta.objPlano.CodiBus;
                    input.HoraProgramacion = appVueVenta.objTurno.HoraProgramacion;

                    input.CodiDestino = item.CodiSubruta;
                    input.NombDestino = _this.$options.filters.rutas(item.CodiSubruta);
                    input.Precio = item.PrecioVenta;
                    input.Nombre = item.Nombre;
                    input.Serie = item.Serie;
                    input.Numero = item.Numero;

                    // Limpiar 'AsientosBloqueados'
                    var auxResponse = await appVueVenta.cancelarBoletos();
                    if (!auxResponse) {
                        APP.msg.error('No se pudo limpiar los asientos bloqueados para realizar la venta.');
                        return;
                    }

                    appController.disabledAsientos(true);

                    await APP.rq.axios.post(APP.base + '/itinerarios/confirmar-fecha-abierta', input)
                        .then(async function (res) {
                            await _this.close();
                            await appController.chargeTurnos();

                            if (res.data.Estado) {
                                _this.$nextTick(() => {

                                    if (flagAuditoria) {
                                        var objAuditoria = {};
                                        objAuditoria.CodiUsuario = Usuario.CodiUsuario;
                                        objAuditoria.NomUsuario = Usuario.Nombre;
                                        objAuditoria.Tabla = "FECHAABIERTA";
                                        objAuditoria.TipoMovimiento = "CLAVE";
                                        objAuditoria.Boleto = `${_.padStart(item.Serie, 3, '0')} - ${_.padStart(item.Numero, 8, '0')}`;
                                        objAuditoria.NumeAsiento = _this.asientoSel.Tipo;
                                        objAuditoria.NomOficina = Usuario.NomSucursal;
                                        objAuditoria.NomPuntoVenta = Usuario.CodiPuntoVenta;
                                        objAuditoria.Pasajero = item.Nombre;
                                        objAuditoria.FechaViaje = item.FechaVenta;
                                        objAuditoria.HoraViaje = "";
                                        objAuditoria.NomDestino = _this.$options.filters.rutas(item.CodiSubruta);
                                        objAuditoria.Precio = item.PrecioVenta;
                                        objAuditoria.Obs1 = "TERMINAL " + String(Usuario.Terminal).padStart(3, '0');
                                        objAuditoria.Obs2 = "INGRESO DE CLAVE DE BOLETOS DE PASADOS";
                                        objAuditoria.Obs3 = "";
                                        objAuditoria.Obs4 = "";
                                        objAuditoria.Obs5 = "";

                                        appVueVenta.grabarAuditoria(objAuditoria);
                                    }

                                    APP.msg.info('Se confirmó a Fecha Abierta correctamente');
                                });
                            }
                            else
                                APP.msg.error(res.data.Mensaje);

                            // callSignalR_ActualizarTurnoPlano
                            callSignalR_ActualizarTurnoPlano(appVueVenta.filtro.NroViaje, appVueVenta.objTurno.FechaProgramacion, res.data.Valor);
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                validateNivelAsiento: async function (idVenta, codiBus, asiento) {
                    var retorno = null;
                    await APP.rq.axios2.get(APP.base + '/itinerarios/validateNivelAsiento' + APP.util.getQueryParamByObject({
                        IdVenta: idVenta,
                        CodiBus: codiBus,
                        Asiento: asiento
                    }))
                        .then(res => {
                            retorno = res.data;
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                    return retorno;
                },
                verificaNotaCredito: async function (IdVenta) {
                    var retorno = null;
                    await APP.rq.axios2.get(APP.base + '/itinerarios/verificaNotaCredito' + APP.util.getQueryParamByObject({
                        IdVenta: IdVenta
                    }))
                        .then(res => {
                            retorno = res.data;
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                    return retorno;
                },
                validateNumDias: async function (FechaVenta, _CodTab) {
                    var retorno = null;
                    await APP.rq.axios2.get(APP.base + '/itinerarios/validateNumDias' + APP.util.getQueryParamByObject({
                        FechaVenta: FechaVenta,
                        CodTab: _CodTab
                    }))
                        .then(res => {
                            retorno = res.data;
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                    return retorno;
                },
                getLabel: function (option) {
                    return `${option.id} - ${option.label}`
                },
                esc: function (event) {
                    if (event.keyCode === 27) {
                        this.close();
                    }
                },
                close: function () {
                    window.removeEventListener('keyup', this.esc);
                    $('#appVueFechaAbierta').modal('hide');
                    appController.liberarAsientoActual();
                },
                limpiarFA: function () {
                    let _this = this;
                    _this.filtro.IdVenta = 0;
                    _this.filtro.CodiProgramacion = '';
                    _this.filtro.NumeAsiento = '';
                    _this.filtro.CodiServicio = '';
                    _this.filtro.FechaViaje = '';
                    _this.filtro.HoraViaje = '';
                    _this.filtro.NroViaje = '';
                    _this.filtro.FechaProgramacion = '';
                    _this.filtro.CodiEmpresa = '';
                    _this.filtro.CodiSucursal = '';
                    _this.filtro.CodiRuta = '';
                    _this.filtro.CodiBus = '';
                    _this.filtro.HoraProgramacion = '';
                    _this.item.Nombre = '';
                    _this.item.Dni = '';
                    _this.item.Fecha = '';
                    _this.item.Tipo = '';
                    _this.item.Serie = '';
                    _this.item.Numero = '';
                    _this.item.CodEmpresa = '';
                    _this.list.pasajeros = [];
                    _this.showData = false;
                    _this.asientoSel = {};
                },
                saveFA: async function () {
                    let _this = this;
                    if (_this.filtro.idVenta !== 0) {
                        await APP.rq.axios2.post(APP.base + '/itinerarios/actualizaBoletoF9' + APP.util.getQueryParamByObject({
                            IdVenta: _this.filtro.idVenta,
                            Dni: _this.filtro.dni,
                            Nombre: _this.filtro.nombre,
                            Ruc: _this.filtro.ruc,
                            Edad: _this.filtro.edad,
                            Telefono: _this.filtro.telefono,
                            RecoVenta: _this.filtro.recoger,
                            TipoDoc: _this.filtro.tipoDoc,
                            Nacionalidad: _this.filtro.nacionidad
                        }))
                            .then(res => {
                                if (res.data.Valor) {
                                    APP.msg.info(res.data.Mensaje);
                                    _this.close();
                                } else APP.msg.error(res.data.Mensaje);
                            })
                            .catch(APP.rq.axios_handler_error_alert);
                    }
                }
            },
            computed: {
                filtroCodiEmpresa: {
                    get: function () {
                        if (this.list.empresas.length > 0 && this.list.empresas.find(x => x.id === this.item.CodEmpresa)) {
                            return this.list.empresas.find(x => x.id === this.item.CodEmpresa)
                        }
                    },
                    set: function (value) {
                        if (value !== '' && value !== null) {
                            if (this.list.empresas.find(x => x.id === value.id)) {
                                this.item.CodEmpresa = value.id;
                            }
                        } else {
                            this.item.CodEmpresa = '';
                        }
                    }
                },
                filtroCodiDestino: {
                    get: function () {
                        if (this.list.destinos.length > 0 && this.list.destinos.find(x => x.id === this.item.CodiDestino)) {
                            return this.list.destinos.find(x => x.id === this.item.CodiDestino)
                        }
                    },
                    set: function (value) {
                        if (value !== '' && value !== null) {
                            if (this.list.destinos.find(x => x.id === value.id)) {
                                this.item.CodiDestino = value.id;
                            }
                        } else {
                            this.item.CodiDestino = '';
                        }
                    }
                }
            }
        });

        var appVueManifiestoPasajeros = new Vue({
            el: "#appVueManifiestoPasajeros",
            data: {
                filtro: {
                    empresa: null,
                    origenBus: null,
                    pvOrigenBus: null,
                    destinoBus: null,
                    servicio: null,
                    turno: '',
                    fecha: '',
                    turnoImpresion: ''
                },
                list: {
                    empresas: [],
                    origenesBus: [],
                    pvOrigenesBus: [],
                    destinosBus: [],
                    servicios: []
                },
                tripulacion: {
                    bus: '',
                    piloto: '',
                    copiloto01: '',
                    copiloto02: ''
                }
            },
            mounted: function () { },
            methods: {
                show: function (_objRequest) {
                    this.filtro.empresa = _objRequest.CodiEmpresa;
                    this.filtro.origenBus = _objRequest.CodiOrigenBus;
                    this.filtro.destinoBus = _objRequest.CodiDestinoBus;
                    this.filtro.servicio = _objRequest.CodiServicio;
                    this.filtro.turno = _objRequest.Turno;
                    this.filtro.fecha = _objRequest.Fecha;
                    this.filtro.turnoImpresion = _.cloneDeep(this.filtro.turno);

                    this.list.pvOrigenesBus = appController.getListPvOrigenesBus(this.filtro.origenBus.id);
                    this.filtro.pvOrigenBus = _objRequest.CodiPVOrigenBus;

                    $('#appVueManifiestoPasajeros').modal('show');
                },
                cerrarManifiestoPasajeros: function () {
                    $('#appVueManifiestoPasajeros').modal('hide');
                },
                esc: function (event) {
                    if (event.keyCode === 27)
                        this.cerrarManifiestoPasajeros();
                },
                recorrido: function (code) {
                    var _this = this;

                    switch (code) {
                        case 1:
                            $('#cboOrigenBusMP input[type=search]').focus();
                            break;
                        case 2:
                            {
                                _this.$nextTick(() => {
                                    $('#cboPvOrigenBusMP input[type=search]').focus();
                                });
                            }
                            break;
                        case 3:
                            $('#cboDestinoBusMP input[type=search]').focus();
                            break;
                        case 4:
                            $('#cboServicioMP input[type=search]').focus();
                            break;
                        case 5:
                            document.getElementById('txtTurnoMP').focus();
                            break;
                        case 6:
                            {
                                document.getElementById('txtTurnoMP').blur();

                                _this.$nextTick(() => {
                                    document.getElementById('txtFechaMP').focus();
                                });
                            };
                            break;
                        case 7:
                            {
                                document.getElementById('txtFechaMP').blur();

                                _this.$nextTick(() => {
                                    _this.cargaTurno();
                                });
                            };
                            break;
                    }
                },
                cargaTurno: function () {
                    alert('Cargar turno.');
                },
                getLabel: function (option) {
                    return `${option.id} - ${option.label}`
                }
            },
            computed: {},
            watch: {}
        });

        var appVueReintegro = new Vue({
            el: '#appVueReintegro',
            data: {
                filtro: {
                    empresa: '',
                    codEmpresa: 0,
                    tipo: 'M',
                    serie: '',
                    numero: '',
                    codMotivo: 0
                },
                filtroProgramacion: {
                    CodiOrigen: '',
                    CodiDestino: '',
                    CodiServicio: '',
                    FechaViaje: moment().format('DD/MM/YYYY'),
                    Hora: moment().format('hh:mm A'),
                    TodosTurnos: false,
                    SoloProgramados: true,
                    NomDestino: ''
                },
                filtroMiniMapa: {
                    CodiEmpresa: '',
                    CodiOrigen: '',
                    CodiDestino: '',
                    CodiSucursal: '',
                    CodiRuta: '',
                    CodiPuntoVenta: '',
                    CodiServicio: '',
                    HoraViaje: '',
                    FechaViaje: '',
                    CodiProgramacion: ''
                },
                filtroCambio: {
                    NumAsiento: '',
                    CodiNuevoDestino: '',
                    Fecha: '',
                    Hora: '',
                    MontoReal: '',
                    DiferenciaPrecio: '',
                    Nivel: ''
                },
                item: {
                    idCliente: 0,
                    origenPasj: '',
                    destinoPasj: '',
                    destinoBus: '',
                    servicio: '',
                    fechaVenta: '',
                    horaVenta: '',
                    documento: '',
                    numero: '',
                    apellidoPaterno: '',
                    apellidoMaterno: '',
                    nombre: '',
                    edad: '',
                    telefono: '',
                    nacionalidad: '',
                    boleto: '',
                    venta: '',
                    ruc: '',
                    razonSocial: '',
                    direccion: '',
                    asiento: '',
                    precio: 0,
                    reintegro: '',
                    fechaNac: '',
                    stReintegro: ''
                },
                list: {
                    rutas: [],
                    rutasAll: [],
                    servicios: [],
                    empresas: [],
                    motivos: [],
                    tiposDoc: [],
                    itinerarios: [],
                    opcionesModificacion: [],
                    destinosPas: []
                },
                sections: {
                    VerifBoleto: true,
                    BuscarProg: false,
                    CambioBoleto: false
                },
                dataSignalR: {
                    NroViaje: 0,
                    FechaProgramacion: ''
                },
                paginate: ['items'],
                dataOriginal: {},
                asientoSel: {},
                showData: false,
                lockReintegro: false,
                lockFilters: false,
                lockCancelar: true,
                disabledAceptar: false,
                validateDocumento: {},
                updateUser: false,
                chargeCurrCell: false, //evitar multiples llamadas a auxSetTd
                auxFirstCurrCell: true //inicia en la primera celda
            },
            mounted: function () {
                let _this = this;

                $('#appVueReintegro').on('shown.bs.modal', function () {
                    window.addEventListener('keyup', _this.esc);

                    $(document).off('focusin.modal');

                    _this.$nextTick(() => {
                        if (!document.getElementById('VerifBoletoRE').classList.contains("in"))
                            _this.$refs.refREVerifBoleto.click();

                        _this.$refs.refREMotivo.$el.querySelector('input').focus();
                    });
                });
            },
            methods: {
                show: function (asientoSel) {
                    let _this = this;
                    _this.limpiarFiltrosRE();
                    _this.limpiarRE();
                    _this.limpiarRERuta();
                    _this.asientoSel = asientoSel;
                    _this.setData();
                    _this.listaOpcionesModificacion();

                    _this.$nextTick(() => {
                        if (_this.errors.any())
                            _this.errors.clear();

                        $('#appVueReintegro').modal('show');
                    });
                },
                setData: function () {
                    let _this = this;
                    _this.filtro.tipo = _this.asientoSel.TipoBoleto;
                    _this.filtro.serie = _this.asientoSel.Boleto.substring(0, 3);
                    _this.filtro.numero = _this.asientoSel.Boleto.substring(11, 4);
                    _this.filtro.codEmpresa =String(_this.asientoSel.CodiEmpresa);
                    _this.$nextTick(() => {
                        if (_this.list.empresas.length == 0) {
                            _this.list.empresas = empresas;
                        }

                        if (_this.list.rutas.length == 0) {
                            _this.list.rutas = _.cloneDeep(rutas);
                        }

                        if (_this.list.rutasAll.length == 0) {
                            _this.list.rutasAll = _.cloneDeep(rutas);
                            _this.list.rutasAll.unshift(selectAll);
                        }

                        if (_this.list.servicios.length == 0) {
                            _this.list.servicios = _.cloneDeep(servicios);
                            _this.list.servicios.unshift(selectAll);
                        }

                        if (_this.list.tiposDoc.length == 0) {
                            _this.list.tiposDoc = _.cloneDeep(tiposDoc);
                        }

                        _this.filtroProgramacion.CodiOrigen = String(Usuario.CodiSucursal);

                        _this.filtroProgramacion.CodiDestino = appVueVenta.filtro.CodiDestinoPas.id;

                        _this.filtroProgramacion.CodiServicio = '';//appVueVenta.filtro.CodiServicio.id;
                    });
                },
                searchData: async function () {
                    let _this = this;

                    await APP.rq.axios2.post(APP.base + '/itinerarios/ventaConsultaF12' + APP.util.getQueryParamByObject({
                        Serie: parseInt(_this.filtro.serie),
                        Numero: parseInt(_this.filtro.numero),
                        CodiEmpresa: parseInt(_this.filtro.codEmpresa),
                        Tipo: _this.filtro.tipo
                    }))
                        .then(async (res) => {
                            _this.lockCancelar = false;

                            if (_this.errors.any())
                                _this.errors.clear();

                            if (res.data.EsCorrecto) {
                                var data = _.cloneDeep(res.data.Valor);

                                //Confirmar conservar crédito
                                if (data.FlagVenta === '1') {
                                    if (await APP.msg.confirm('Boleto emitido como crédito', '¿desea emitir el boleto crédito bajo las misma modalidad?')) {
                                        _this.item.stReintegro = 'X';
                                    } else {
                                        _this.item.stReintegro = '';
                                    }
                                }

                                if (data) {
                                    _this.dataOriginal = _.cloneDeep(data);
                                    _this.item.origenPasj = data.CodiOrigen;
                                    _this.item.destinoPasj = data.CodiDestino;
                                    _this.item.destinoBus = data.CodiRuta;
                                    _this.item.servicio = data.CodiServicio;
                                    _this.item.fechaVenta = data.FechaViaje;
                                    _this.item.horaVenta = data.HoraViaje;
                                    _this.item.documento = data.TipoDocumento;
                                    _this.item.numero = data.Dni;
                                    _this.item.apellidoPaterno = data.SplitNombre[1];
                                    _this.item.apellidoMaterno = data.SplitNombre[2];
                                    _this.item.nombre = data.SplitNombre[0];
                                    _this.item.edad = data.Edad;
                                    _this.item.telefono = data.Telefono;
                                    _this.item.nacionalidad = data.Nacionalidad;
                                    _this.item.boleto = (_this.filtro.tipo === 'F') ? appVueVenta.CorrelativoVentaFactura : appVueVenta.CorrelativoVentaBoleta;
                                    _this.item.venta = data.IdVenta;
                                    _this.item.ruc = data.RucCliente;
                                    _this.item.razonSocial = data.RazonSocial;
                                    _this.item.direccion = data.Direccion;
                                    _this.item.asiento = data.NumeAsiento;
                                    _this.item.precio = data.PrecioVenta;
                                    _this.item.fechaNac = data.FechaNac;
                                    _this.lockFilters = true;
                                    _this.item.reintegro = parseFloat(_this.list.motivos.find(x => x.id === _this.filtro.codMotivo).monto).toFixed(2);
                                    switch (_this.filtro.codMotivo) {
                                        case '00001':
                                        case '00002':
                                        case '00005': {
                                            _this.showData = false;
                                        }; break;
                                        case '00003':
                                        case '00004': {
                                            _this.showData = true;
                                            _this.$nextTick(() => {
                                                if (document.getElementById('BuscarProgRE').classList.contains("in"))
                                                    document.getElementById('BuscarProgRE').classList.remove("in");
                                                if (document.getElementById('CambioBoletoRE').classList.contains("in"))
                                                    document.getElementById('CambioBoletoRE').classList.remove("in");
                                            });
                                        }; break;
                                        default: _this.showData = false;
                                    };
                                    _this.$nextTick(() => {
                                        switch (_this.filtro.codMotivo) {
                                            case '00001': _this.$refs.refREReintegro.focus(); break;
                                            case '00002': _this.$refs.refRETipoDoc.$el.querySelector('input').focus(); break;
                                            case '00005': _this.$refs.refREReintegro.focus(); break;
                                            case '00003': _this.$refs.refREReintegro.focus(); break;
                                            case '00004': _this.$refs.refRETipoDoc.$el.querySelector('input').focus(); break;
                                        };
                                    });
                                } else APP.msg.warning('No se encontró resultados');
                            } else {
                                if (res.data.Valor.CodiError === 5) { //ya tiene adjunto un Reintegro
                                    await APP.msg.infoMessage(res.data.Mensaje, 'debe anular el reintegro antes de continuar');

                                    var data2 = null;

                                    await APP.rq.axios2.get(APP.base + '/reintegro/verifica-reintegro-anular' + APP.util.getQueryParamByObject({
                                        Serie: parseInt(res.data.Valor.CodiEsca.substring(1, 4)),
                                        Numero: parseInt(res.data.Valor.CodiEsca.substring(5)),
                                        CodiEmpresa: parseInt(res.data.Valor.CodiEmpresa),
                                        Tipo: res.data.Valor.CodiEsca.substring(0, 1)
                                    }))
                                        .then(async (res2) => {
                                            if (res2.data.EsCorrecto)
                                                data2 = _.cloneDeep(res2.data.Valor);
                                            else APP.msg.error(res2.data.Mensaje);
                                        }).catch(APP.rq.axios_handler_error_alert);

                                    window.removeEventListener('keyup', _this.esc);

                                    await appVueAnulaReintegro.validateToAnulRein(data2);

                                    window.addEventListener('keyup', _this.esc);
                                } else {
                                    APP.msg.warning(res.data.Mensaje);
                                    _this.limpiarRE();
                                    _this.limpiarRERuta();
                                }
                            }
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                searchProgramacion: function () {
                    let _this = this;
                    APP.rq.axios.post(APP.base + '/itinerarios/lista-itinerarios', _this.filtroProgramacion)
                        .then(res => {
                            if (res.data.Estado) {
                                _this.limpiarRERuta();
                                _this.list.itinerarios = res.data.Valor;

                                _this.$nextTick(() => {
                                    if (_this.$refs.paginator && _this.list.itinerarios.length > 0) {
                                        _this.$refs.paginator.goToPage(1);
                                        _this.setTd();
                                    }
                                });
                            }
                            else
                                APP.msg.error(res.data.Mensaje);

                            _this.processing = false;
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                //--------------------------------------
                setTd: function () {
                    auxSetTd('tblProgramacionRE', this.sendRowOfTab, this.stepsOfRow, this.auxFirstCurrCell);
                },
                sendRowOfTab: async function (e) {
                    let _this = this;
                    if (!_this.chargeCurrCell) {
                        _this.chargeCurrCell = true;
                        var _index = parseInt(e.target.tabIndex / 19) + (_this.paginate.items.page * 10);
                        var _item = _this.list.itinerarios[_index];
                        await _this.dbClickProgramacion(_item);
                        _this.chargeCurrCell = false;
                    }
                },
                stepsOfRow: function (_auxStep) {
                    let _this = this;
                    switch (_auxStep) {
                        case 1: {
                            if (_this.paginate.items.page > 0) {
                                _this.auxFirstCurrCell = false;
                                _this.$refs.paginator.goToPage(_this.paginate.items.page);
                            }
                        }; break;
                        case 2: {
                            if (_this.paginate.items.page < parseInt((_this.list.itinerarios.length - 1) / 10)) {
                                _this.auxFirstCurrCell = true;
                                _this.$refs.paginator.goToPage(_this.paginate.items.page + 2);
                            }
                        }; break;
                    }
                },
                //--------------------------------------
                listaOpcionesModificacion: async function () {
                    var _this = this;

                    if (_this.list.motivos && _this.list.motivos.length > 0)
                        return;

                    await APP.rq.axios2.get(APP.base + '/base/get-opciones-modificacion')
                        .then(res => {
                            if (res.data.Estado)
                                _this.list.motivos = _.cloneDeep(res.data.Valor);
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                calculaEdad: function () {
                    let _this = this;
                    _this.$nextTick(() => {
                        _this.item.edad = appController.calculaEdad(_this.item.fechaNac);
                    });
                },
                enterReintegro: function () {
                    let _this = this;
                    switch (_this.filtro.codMotivo) {
                        case '00001':
                        case '00002':
                        case '00005': {
                            _this.$nextTick(() => {
                                _this.$refs.refREAceptar.focus();
                            });
                        }; break;
                        case '00003':
                        case '00004': {
                            _this.$refs.refREBuscarProg.click();
                            _this.$nextTick(() => {
                                _this.$refs.refREOrigen.$el.querySelector('input').focus();
                            });
                        }; break;
                        default: _this.showData = false;
                    }
                },
                enterReintegroRuta: async function () {
                    let _this = this;
                    if (parseFloat(_this.filtroCambio.DiferenciaPrecio) > parseFloat(_this.item.reintegro)) {
                        if (await APP.msg.confirm('Diferencia de precios', 'El monto del reintegro es menor a la diferencia entre precios, ¿Desea Continuar?')) {
                            _this.$refs.refREAceptar.click();
                        } else {
                            _this.$refs.refREDifPrecio.focus();
                        }
                    } else {
                        _this.$refs.refREAceptar.focus();
                    }
                },
                getLabel: function (option) {
                    return `${option.id} - ${option.label}`
                },
                labelOfDocumento: function (option) {
                    return option.label.substring(0, 8);
                },
                dbClickProgramacion: function (item) {
                    let _this = this;

                    if (item.ProgramacionCerrada !== '0') {

                        switch (item.ProgramacionCerrada) {
                            case '1':
                                APP.msg.warning('La ruta está bloqueada para esta fecha.');
                                break;
                            case '2':
                                APP.msg.warning('La ruta está bloqueada desde esta fecha hacia adelante.');
                                break;
                        }
                        return;
                    }

                    _this.filtroMiniMapa.CodiEmpresa = item.CodiEmpresa;
                    _this.filtroMiniMapa.CodiOrigen = item.CodiOrigen;
                    _this.filtroMiniMapa.CodiDestino = item.CodiDestino;
                    _this.filtroMiniMapa.CodiSucursal = item.CodiSucursal;
                    _this.filtroMiniMapa.CodiRuta = item.CodiRuta;
                    _this.filtroMiniMapa.CodiPuntoVenta = item.CodiPuntoVenta;
                    _this.filtroMiniMapa.CodiServicio = item.CodiServicio;
                    _this.filtroMiniMapa.HoraViaje = item.HoraPartida;
                    _this.filtroMiniMapa.FechaViaje = item.FechaViaje;
                    _this.filtroMiniMapa.CodiProgramacion = item.CodiProgramacion;

                    _this.dataSignalR.NroViaje = item.NroViaje;
                    _this.dataSignalR.FechaProgramacion = item.FechaProgramacion;

                    _this.$refs.refRECambioBoleto.click();

                    _this.limpiarRERuta();

                    _this.$nextTick(() => {
                        _this.$refs.refREAsientoNew.focus();
                        _this.showMiniMapa();
                    });
                },
                showMiniMapa: async function () {
                    let _this = this;

                    appController.showMiniMapa(_this.filtroMiniMapa);

                    await deferredModal($('#appVueMiniMapa'), true).done(function () {
                        appClaveAutorizacion.$nextTick(() => {
                            window.removeEventListener('keyup', _this.esc);
                        });
                    });

                    await deferredModal($('#appVueMiniMapa'), false).done(function () {
                        appVueMiniMapa.$nextTick(() => {
                            if (appVueMiniMapa.asientoSel.Tipo) {
                                _this.filtroCambio.NumAsiento = appVueMiniMapa.asientoSel.Tipo;
                                _this.list.destinosPas = appVueMiniMapa.list.destinosPas;
                                _this.filtroCambio.Fecha = _this.filtroMiniMapa.FechaViaje;
                                _this.filtroCambio.Hora = _this.filtroMiniMapa.HoraViaje;
                                _this.filtroCambio.Nivel = appVueMiniMapa.asientoSel.Nivel;
                                _this.$nextTick(() => {
                                    _this.$refs.refREDestinoNew.$el.querySelector('input').focus();
                                });
                            } else _this.$refs.refREAsientoNew.focus();

                            window.addEventListener('keyup', _this.esc);
                        });
                    });
                },
                limpiarFiltrosRE: function () {
                    let _this = this;
                    _this.filtro.serie = '';
                    _this.filtro.numero = '';
                    _this.filtro.codEmpresa = '';
                    _this.filtro.tipo = 'M';
                    _this.filtro.codMotivo = '';
                    _this.asientoSel = {};
                    _this.showData = false;
                    _this.lockFilters = false;
                    _this.lockCancelar = true;

                    if (_this.list.motivos.find(x => x.id === _this.filtro.codMotivo))
                        _this.item.reintegro = parseFloat(_this.list.motivos.find(x => x.id === _this.filtro.codMotivo).monto).toFixed(2);
                },
                limpiarRE: function () {
                    let _this = this;
                    _this.item.origenPasj = '';
                    _this.item.destinoPasj = '';
                    _this.item.destinoBus = '';
                    _this.item.servicio = '';
                    _this.item.fechaVenta = '';
                    _this.item.horaVenta = '';
                    _this.item.idCliente = 0
                    _this.item.documento = '';
                    _this.item.numero = '';
                    _this.item.apellidoPaterno = '';
                    _this.item.apellidoMaterno = '';
                    _this.item.nombre = '';
                    _this.item.edad = '';
                    _this.item.telefono = '';
                    _this.item.nacionalidad = '';
                    _this.item.boleto = '';
                    _this.item.venta = '';
                    _this.item.ruc = '';
                    _this.item.razonSocial = '';
                    _this.item.direccion = '';
                    _this.item.asiento = '';
                    _this.item.precio = '';
                    _this.item.stReintegro = '';
                    _this.lockReintegro = false;
                    _this.list.itinerarios = [];
                    _this.filtroProgramacion.CodiOrigen = String(Usuario.CodiSucursal);
                    _this.filtroProgramacion.CodiDestino = appVueVenta.filtro.CodiDestinoPas.id;;
                    _this.filtroProgramacion.CodiServicio = '';//appVueVenta.filtro.CodiServicio.id;
                    _this.filtroProgramacion.FechaViaje = moment().format('DD/MM/YYYY');
                    _this.filtroProgramacion.Hora = moment().format('hh:mm A');
                    _this.filtroProgramacion.NomDestino = '';
                    _this.validateDocumento = {};
                    _this.updateUser = false;
                    if (!document.getElementById('VerifBoletoRE').classList.contains("in")) {
                        _this.$nextTick(() => {
                            _this.$refs.refREVerifBoleto.click();
                        });
                    }
                    _this.$nextTick(() => {
                        _this.$refs.refREMotivo.$el.querySelector('input').focus();
                    });
                },
                limpiarRERuta: function () {
                    let _this = this;
                    _this.filtroCambio.NumAsiento = '';
                    _this.filtroCambio.CodiNuevoDestino = '';
                    _this.filtroCambio.Fecha = '';
                    _this.filtroCambio.Hora = '';
                    _this.filtroCambio.MontoReal = '';
                    _this.filtroCambio.DiferenciaPrecio = '';
                    _this.filtroCambio.Nivel = '';
                },
                cancelarRE: function () {
                    let _this = this;
                    _this.filtro.tipo = _this.asientoSel.TipoBoleto;
                    _this.filtro.serie = _this.asientoSel.Boleto.substring(0, 3);
                    _this.filtro.numero = _this.asientoSel.Boleto.substring(11, 4);
                    _this.filtro.empresa = _this.$options.filters.empresas(_this.asientoSel.CodiEmpresa);
                    _this.filtro.codEmpresa = String(_this.asientoSel.CodiEmpresa);
                    _this.showData = false;
                    _this.lockFilters = false;
                    _this.limpiarRE();
                    _this.limpiarRERuta();

                    if (_this.list.motivos.find(x => x.id === _this.filtro.codMotivo))
                        _this.item.reintegro = parseFloat(_this.list.motivos.find(x => x.id === _this.filtro.codMotivo).monto).toFixed(2);
                },
                anchorVerifBoleto: function () {
                    let _this = this;
                    if (!document.getElementById('VerifBoletoRE').classList.contains("in") && _this.showData) {
                        _this.$nextTick(() => {
                            if (document.getElementById('BuscarProgRE').classList.contains("in"))
                                document.getElementById('BuscarProgRE').classList.remove("in");
                            if (document.getElementById('CambioBoletoRE').classList.contains("in"))
                                document.getElementById('CambioBoletoRE').classList.remove("in");
                        });
                    }
                },
                anchorBuscarProg: function () {
                    let _this = this;
                    if (!document.getElementById('BuscarProgRE').classList.contains("in")) {
                        _this.$nextTick(() => {
                            if (document.getElementById('VerifBoletoRE').classList.contains("in"))
                                document.getElementById('VerifBoletoRE').classList.remove("in");
                            if (document.getElementById('CambioBoletoRE').classList.contains("in"))
                                document.getElementById('CambioBoletoRE').classList.remove("in");
                        });
                    }
                },
                anchorCambioBoleto: function (event) {
                    let _this = this;
                    if (_this.list.itinerarios.length > 0) {
                        if (!document.getElementById('CambioBoletoRE').classList.contains("in")) {
                            _this.$nextTick(() => {
                                if (document.getElementById('VerifBoletoRE').classList.contains("in"))
                                    document.getElementById('VerifBoletoRE').classList.remove("in");
                                if (document.getElementById('BuscarProgRE').classList.contains("in"))
                                    document.getElementById('BuscarProgRE').classList.remove("in");
                            });
                        }
                    } else {
                        APP.msg.info('Debe Seleccionar una programación');
                        event.stopPropagation();
                        _this.$nextTick(() => {
                            if (!document.getElementById('BuscarProgRE').classList.contains("in")) {
                                _this.$refs.refREBuscarProg.click();
                            }
                        });
                    }
                },
                consultaPrecioRuta: function (codiDestino) {
                    let _this = this;
                    var input = {};
                    input.CodiOrigen = _this.filtroMiniMapa.CodiOrigen;
                    input.CodiDestino = codiDestino;
                    input.HoraViaje = _this.filtroMiniMapa.HoraViaje;
                    input.FechaViaje = _this.filtroMiniMapa.FechaViaje;
                    input.CodiServicio = _this.filtroMiniMapa.CodiServicio;
                    input.CodiEmpresa = _this.filtroMiniMapa.CodiEmpresa;
                    input.Nivel = _this.filtroCambio.Nivel;

                    APP.rq.axios2.post(APP.base + '/reintegro/consulta-precio-ruta', input)
                        .then((res) => {
                            if (res.data.EsCorrecto) {
                                var data = _.cloneDeep(res.data.Valor);
                                _this.filtroCambio.MontoReal = parseFloat(data.PrecioNormal).toFixed(2);
                                _this.filtroCambio.DiferenciaPrecio = (parseFloat(data.PrecioNormal) - parseFloat(_this.item.precio)).toFixed(2);
                            }
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                saveReintegro: async function () {
                    let _this = this;

                    //Valida 'Campos llenos'
                    _this.$validator.validateAll();

                    if (!_this.errors.any()) {
                        _this.disabledAceptar = true;

                        var updateReintegro = false;

                        var auxEmpresa = '';
                        var auxOrigenPas = '';
                        var auxDestinoPas = '';
                        var auxServicio = '';
                        var auxFechaViaje = '';
                        var auxHoraViaje = '';
                        var auxAsiento = '';
                        var auxCodiProgramacion = '';
                        var auxPrecioSinDescuento = '';
                        var auxPrecioBoleto = 0;

                        //Diferencias por Código de Motivo
                        switch (_this.filtro.codMotivo) {
                            case '00001':
                            case '00002':
                            case '00005': {
                                auxEmpresa = _this.dataOriginal.CodiEmpresa;
                                auxOrigenPas = _this.item.origenPasj;
                                auxDestinoPas = _this.item.destinoPasj;
                                auxServicio = _this.dataOriginal.CodiServicio;
                                auxFechaViaje = _this.dataOriginal.FechaViaje;
                                auxHoraViaje = _this.dataOriginal.HoraViaje;
                                auxCodiProgramacion = _this.dataOriginal.CodiProgramacion;
                                auxPrecioSinDescuento = _this.item.reintegro;
                                auxPrecioBoleto = parseFloat(_this.item.precio);
                            }; break;
                            case '00003':
                            case '00004': {
                                auxEmpresa = _this.filtroMiniMapa.CodiEmpresa;
                                auxOrigenPas = _this.filtroMiniMapa.CodiOrigen;
                                auxDestinoPas = _this.filtroMiniMapa.CodiDestino;
                                auxServicio = _this.filtroMiniMapa.CodiServicio;
                                auxFechaViaje = _this.filtroMiniMapa.FechaViaje;
                                auxHoraViaje = _this.filtroMiniMapa.HoraViaje;
                                auxAsiento = _this.filtroCambio.NumAsiento;
                                auxCodiProgramacion = _this.filtroMiniMapa.CodiProgramacion;
                                auxPrecioSinDescuento = "";
                                auxPrecioBoleto = parseFloat(_this.filtroCambio.MontoReal);

                                updateReintegro = true;
                            }; break;
                        }

                        //Valida 'Precio Reintegro'
                        if (appController.validatePanel('181') === '1') {
                            if (_this.item.reintegro > auxPrecioBoleto) {
                                APP.msg.warning('El reintegro no puede ser mayor al precio del boleto');
                                _this.disabledAceptar = false;
                                return
                            }
                        }

                        //Valida 'Ex Dni'
                        if (await _this.haveExDni()) {
                            _this.disabledAceptar = false;
                            return;
                        }

                        //Valida 'Documento'
                        if (await _this.haveExDni()) {
                            _this.disabledAceptar = false;
                            return;
                        }

                        //Panel Clave 99
                        if (appController.validatePanelClave('99') === '1') {

                            var checkClaveAutorizacion = false;

                            appController.showClaveAutorizacion(claveReintegro);

                            await deferredModal($('#appClaveAutorizacion'), true).done(function () {
                                appClaveAutorizacion.$nextTick(() => {
                                    window.removeEventListener('keyup', _this.esc);
                                    appClaveAutorizacion.idVenta = _this.dataOriginal.IdVenta;
                                });
                            });

                            await deferredModal($('#appClaveAutorizacion'), false).done(function () {
                                appClaveAutorizacion.$nextTick(() => {
                                    checkClaveAutorizacion = appClaveAutorizacion.trustedPassword;
                                    window.addEventListener('keyup', _this.esc);
                                });
                            });

                            if (!checkClaveAutorizacion) {
                                _this.disabledAceptar = false;
                                return;
                            }
                        }

                        //Panel 35
                        if (appController.validatePanelClave('35') === '1') {

                            var checkClaveAutorizacion = false;

                            appController.showClaveAutorizacion(claveReintegro);

                            await deferredModal($('#appClaveAutorizacion'), true).done(function () {
                                appClaveAutorizacion.$nextTick(() => {
                                    window.removeEventListener('keyup', _this.esc);
                                    appClaveAutorizacion.idVenta = _this.dataOriginal.IdVenta;
                                });
                            });

                            await deferredModal($('#appClaveAutorizacion'), false).done(function () {
                                appClaveAutorizacion.$nextTick(() => {
                                    checkClaveAutorizacion = appClaveAutorizacion.trustedPassword;
                                    window.addEventListener('keyup', _this.esc);
                                });
                            });

                            if (!checkClaveAutorizacion) {
                                _this.disabledAceptar = false;
                                return;
                            }
                        }

                        //appController.showTipoPago();
                        appVueTipoPago2.show([], [], parseFloat(_this.item.reintegro), 1, false, false, 1);

                        var checkTipoPago = false;

                        await deferredModal($('#appVueTipoPago2'), true).done(function () {
                            checkTipoPago = false;
                            window.removeEventListener('keyup', _this.esc);
                        });

                        var input = {};

                        //Depués del modal tipo de pago
                        await deferredModal($('#appVueTipoPago2'), false).done(function () {
                            appVueTipoPago2.$nextTick(() => {
                                checkTipoPago = appVueTipoPago2.trustedSave;
                                if (checkTipoPago) {

                                    //Inserta Cliente si no tiene IdCliente
                                    if (_this.item.idCliente == 0 && _this.updateUser && (_this.filtro.codMotivo == '00002' || _this.filtro.codMotivo == '00004')) {
                                        var listado = [];

                                        var validateUpdateRucCredito = (_this.dataOriginal.RucCliente === _this.item.ruc && _this.dataOriginal.FlagVenta === '1') ? false : true;

                                        var input2 = {};
                                        input2.IdCliente = 0;
                                        input2.TipoDoc = _this.item.documento;
                                        input2.NumeroDoc = _this.item.numero;
                                        input2.NombreCliente = _this.item.nombre;
                                        input2.ApellidoPaterno = _this.item.apellidoPaterno;
                                        input2.ApellidoMaterno = _this.item.apellidoMaterno;
                                        input2.FechaNacimiento = _this.item.fechaNac;
                                        input2.Edad = _this.item.edad;
                                        input2.Telefono = _this.item.telefono;
                                        input2.Sexo = 'M';
                                        input2.RucContacto = _this.item.ruc;
                                        input2.RazonSocial = (validateUpdateRucCredito) ? _this.item.razonSocial : _this.dataOriginal.RazonSocial;
                                        input2.Direccion = (validateUpdateRucCredito) ? _this.item.direccion : _this.dataOriginal.Direccion;
                                        input2.Correo = '';

                                        listado.push(input2);

                                        APP.rq.axios2.post(APP.base + '/itinerarios/grabar-pasajero', listado)
                                            .then(res => {
                                                if (!res.data.Estado)
                                                    APP.msg.error(res.data.Mensaje);
                                            })
                                            .catch(APP.rq.axios_handler_error_alert);
                                    }

                                    //Data para Grabar Reintegro
                                    input.Serie = _this.item.boleto.substring(1, 4); //TODO
                                    input.nume_boleto = _this.item.boleto.substring((_this.item.boleto.length - 7), _this.item.boleto.length); //TODO
                                    input.Codi_Empresa = auxEmpresa;
                                    input.CODI_SUCURSAL = Usuario.CodiSucursal;
                                    input.CODI_PROGRAMACION = auxCodiProgramacion;
                                    input.CODI_SUBRUTA = auxDestinoPas;
                                    input.CODI_Cliente = auxPrecioSinDescuento;
                                    input.NIT_CLIENTE = _this.item.ruc;
                                    input.PRECIO_VENTA = _this.item.reintegro;
                                    input.FLAG_VENTA = (_this.item.stReintegro === 'X') ? "1" : "O";
                                    input.FECH_VENTA = moment().format('DD/MM/YYYY');
                                    input.Recoger = ''; //TODO: Falta implementar
                                    input.Clav_Usuario = Usuario.CodiUsuario;
                                    input.Dni = _this.item.numero;
                                    input.EDAD = _this.item.edad;
                                    input.TELEF = _this.item.telefono;
                                    input.NOMB = `${_this.item.nombre},${_this.item.apellidoPaterno},${_this.item.apellidoMaterno}`;
                                    input.porcentaje = 0;
                                    input.Codi_Esca = `${_this.dataOriginal.Tipo}${_.padStart(_this.dataOriginal.SerieBoleto, 3, '0')}-${_.padStart(_this.dataOriginal.NumeBoleto, 7, '0')}`;
                                    input.tota_ruta1 = 0;
                                    input.tota_ruta2 = 0;
                                    input.Punto_Venta = Usuario.CodiPuntoVenta;
                                    input.tipo_doc = _this.item.documento;
                                    input.codi_ori_psj = auxOrigenPas;
                                    input.Tipo = appVueVenta.TipoTerminalElectronico;
                                    input.Tipo_Pago = appVueTipoPago2.tipoPago2;
                                    input.Fecha_viaje = auxFechaViaje;
                                    input.HORA_V = auxHoraViaje;
                                    input.nacionalidad = (_this.item.stReintegro === 'X') ? "R1" : _this.item.nacionalidad;
                                    input.servicio = auxServicio;
                                    input.Sube_en = _this.dataOriginal.CodiEmbarque;
                                    input.Baja_en = _this.dataOriginal.CodiArribo;
                                    input.Hora_Emb = auxHoraViaje;
                                    input.Codi_Empresa__ = _this.dataOriginal.CodiEmpresa;
                                    input.CODI_SUCURSAL__ = Usuario.CodiSucursal;
                                    input.CODI_TERMINAL__ = Usuario.Terminal;
                                    input.Codi_Documento__ = 0;
                                    input.NUME_CORRELATIVO__ = _this.item.boleto.substring((_this.item.boleto.length - 7), _this.item.boleto.length);
                                    input.fecha_venta__ = moment().format('DD/MM/YYYY');
                                    input.Pventa__ = Usuario.CodiPuntoVenta;
                                    input.SERIE_BOLETO__ = _this.item.boleto.substring(1, 4);
                                    input.stReintegro = _this.item.stReintegro;
                                    input.NomMotivo = _this.list.motivos.find(x => x.id === _this.filtro.codMotivo).label || '';
                                    input.NombDestino = _this.$options.filters.rutas(auxDestinoPas);
                                    input.CodiBus = _this.dataOriginal.CodiBus;
                                    input.DirEmbarque = pvOrigenesBus.find(x => x.id === String(_this.dataOriginal.CodiEmbarque)).label;
                                    input.NomServicio = _this.$options.filters.servicios(_this.item.servicio);
                                    input.NomEmpresaRuc = _this.item.razonSocial;
                                    input.DirEmpresaRuc = _this.item.direccion;
                                    input.NomUsuario = Usuario.Nombre;
                                    input.NomOrigen = _this.$options.filters.rutas(auxOrigenPas);
                                    input.id_original = _this.dataOriginal.IdVenta;
                                    input.CodMotivo = _this.filtro.codMotivo;
                                    input.boleto_original = `${_.padStart(_this.dataOriginal.SerieBoleto, 3, '0')}-${_.padStart(_this.dataOriginal.NumeBoleto, 7, '0')}`;
                                    input.D_DOCUMENTO2 = _this.dataOriginal.TipoDocumento;
                                    input.T_DNI2 = _this.dataOriginal.Dni;
                                    input.NOMB2 = _this.dataOriginal.Nombre;
                                    input.TipoOri = _this.dataOriginal.Tipo;
                                    input.CodiTarjetaCredito = (appVueTipoPago2.tarjeta2) ? appVueTipoPago2.tarjeta2.id : '';
                                    input.NumeTarjetaCredito = appVueTipoPago2.numeroTarjeta2 || '';
                                    input.NumAsientoAuditoria = _this.dataOriginal.NumeAsiento;
                                    input.BoletoAuditoria = `${_.padStart(_this.dataOriginal.SerieBoleto, 3, '0')}-${_.padStart(_this.dataOriginal.NumeBoleto, 7, '0')}`;
                                    //NEW
                                    var auxObjEmpresa = appController.findEmpresa(auxEmpresa);
                                    input.NomEmpresa = auxObjEmpresa.label;
                                    input.RucEmpresa = auxObjEmpresa.Ruc;
                                    input.DireccionEmpresa = auxObjEmpresa.Direccion;
                                    input.ElectronicoEmpresa = auxObjEmpresa.Electronico;
                                    input.TipoImpresora = appVueVenta.TipoImpresora;

                                    _this.disabledAceptar = false;
                                }
                                window.addEventListener('keyup', _this.esc);
                            });
                        });

                        //Graba reintegro
                        if (checkTipoPago) {
                            await APP.rq.axios.post(APP.base + '/reintegro/save-reintegro', input)
                                .then(async function (res) {
                                    if (res.data.Estado) {

                                        _this.close();

                                        appController.showBoletosVendidos(res.data.Valor.ListaVentasRealizadas, 1);

                                        _this.disabledAceptar = false;

                                        if (updateReintegro) {
                                            _this.updateReintegro(_this.dataOriginal.IdVenta, auxCodiProgramacion, auxDestinoPas, auxAsiento, auxOrigenPas, _this.dataSignalR.NroViaje, _this.dataSignalR.FechaProgramacion, res.data.Valor);
                                        }
                                    }
                                    else {
                                        await appController.chargeTurnos();
                                        _this.$nextTick(() => {
                                            if (res.data.EsCorrecto)
                                                APP.msg.warning(res.data.Mensaje);
                                            else
                                                APP.msg.error(res.data.Mensaje);
                                        });
                                    }
                                })
                                .catch(APP.rq.axios_handler_error_alert);
                        } else {
                            _this.disabledAceptar = false;
                            return;
                        }

                        _this.disabledAceptar = false;
                    } else {
                        APP.msg.warning('Debe llenar todos los campos');
                        if (!_this.item.numero) {
                            if (_this.filtro.codMotivo == '00004') _this.$refs.refREVerifBoleto.click();
                            _this.$nextTick(() => {
                                _this.$refs.refRENumeroDoc.focus();
                                return;
                            });
                        } else if (!_this.item.apellidoPaterno) {
                            if (_this.filtro.codMotivo == '00004') _this.$refs.refREVerifBoleto.click();
                            _this.$nextTick(() => {
                                _this.$refs.refREApePat.focus();
                                return;
                            });
                        } else if (!_this.item.apellidoMaterno) {
                            if (_this.filtro.codMotivo == '00004') _this.$refs.refREVerifBoleto.click();
                            _this.$nextTick(() => {
                                _this.$refs.refREApeMat.focus();
                                return;
                            });
                        } else if (!_this.item.nombre) {
                            if (_this.filtro.codMotivo == '00004') _this.$refs.refREVerifBoleto.click();
                            _this.$nextTick(() => {
                                _this.$refs.refRENombre.focus();
                                return;
                            });
                        } else if (!_this.item.nacionalidad) {
                            if (_this.filtro.codMotivo == '00004') _this.$refs.refREVerifBoleto.click();
                            _this.$nextTick(() => {
                                _this.$refs.refRENacionalidad.focus();
                                return;
                            });
                        } else if (!_this.item.reintegro) {
                            if (_this.filtro.codMotivo == '00004')
                                _this.$refs.refREDifPrecio.focus();
                            else
                                _this.$refs.refREReintegro.focus();
                            return;
                        } else if ((_this.filtro.codMotivo == '00003' || _this.filtro.codMotivo == '00004') && !_this.filtroCambio.NumAsiento) {
                            _this.$refs.refREAsientoNew.focus();
                            return;
                        } else if ((_this.filtro.codMotivo == '00003' || _this.filtro.codMotivo == '00004') && !_this.filtroCambio.CodiNuevoDestino) {
                            _this.$refs.refREDestinoNew.$el.querySelector('input').focus();
                            return;
                        }
                    }
                },
                updateReintegro: function (IdVenta, Programacion, Destino, Asiento, Origen, NroViaje, FechaProg, VentaRealizada) {
                    APP.rq.axios2.get(APP.base + '/reintegro/update-reintegro' + APP.util.getQueryParamByObject({
                        IdVenta: IdVenta,
                        Programacion: Programacion,
                        Destino: Destino,
                        Asiento: Asiento,
                        Origen: Origen
                    }))
                        .then(res => {
                            // callSignalR_ActualizarTurnoPlano
                            callSignalR_ActualizarTurnoPlano(NroViaje, FechaProg, VentaRealizada);
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                anularReintegro: async function () {
                    let _this = this;
                    var item = {};
                    item.codEmpresa = String(_this.dataOriginal.CodiEmpresa) || '';
                    item.serie = (_this.dataOriginal.Tipo) ? (_this.dataOriginal.Tipo === 'M') ? _.padStart(_this.dataOriginal.SerieBoleto, 4, '0') : _this.dataOriginal.Tipo + _.padStart(_this.dataOriginal.SerieBoleto, 3, '0') : '';
                    item.numero = _.padStart(_this.dataOriginal.NumeBoleto, 7, '0') || '';

                    appVueAnulaReintegro.show(item);

                    await deferredModal($('#appVueAnulaReintegro'), true).done(function () {
                        window.removeEventListener('keyup', _this.esc);
                    });

                    await deferredModal($('#appVueAnulaReintegro'), false).done(function () {
                        window.addEventListener('keyup', _this.esc);
                    });
                },
                haveExDni: async function () {
                    let _this = this;
                    var response = true;
                    await APP.rq.axios2.get(APP.base + '/itinerarios/validaExDni' + APP.util.getQueryParamByObject({documento: _this.item.numero}))
                        .then(res => {
                            response = _.cloneDeep(res.data.Valor);
                            if (response) {
                                APP.msg.error(res.data.Mensaje);
                            }
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                    return response;
                },
                consultaReniec: async function () {
                    let _this = this;
                    if (!_this.readOnlyCodiMotivo) {
                        // Validaciones
                        if (!_this.item.documento) {
                            _this.$refs.refRETipoDoc.$el.querySelector('input').focus();
                            APP.msg.warning('Seleccione tipo de documento.');
                            return;
                        }
                        else if (_this.item.numero.length !== 8 && _this.item.documento === '01') {
                            _this.$refs.refRETipoDoc.$el.querySelector('input').focus();
                            APP.msg.warning('Ingrese DNI de 8 dígitos.');
                            return;
                        }

                        if (_this.item.documento === '01') {
                            await APP.rq.axios.get(APP.base + '/itinerarios/consulta-reniec' + APP.util.getQueryParamByObject({
                                numeroDoc: _this.item.numero
                            }), { timeout: 5000 })
                                .then(res => {
                                    if (res.data.EsCorrecto) {
                                        _this.$nextTick(() => {
                                            _this.item.nombre = res.data.Valor.Nombres;
                                            _this.item.apellidoPaterno = res.data.Valor.ApellidoPaterno;
                                            _this.item.apellidoMaterno = res.data.Valor.ApellidoMaterno;
                                        });
                                    }
                                    else {
                                        if (res.data.Estado)
                                            APP.msg.warning(res.data.Mensaje);
                                        else
                                            APP.msg.error(res.data.Mensaje);
                                    }

                                    _this.$refs.refREApePat.focus();
                                })
                                .catch(err => {
                                    if (err.code === "ECONNABORTED")
                                        APP.msg.warning('No se pudo consultar a la RENIEC.');
                                    else
                                        APP.rq.axios_handler_error_alert;
                                });
                        }
                    }
                },
                consultaSunat: async function () {
                    var _this = this;
                    if (!_this.readOnlyCodiMotivo && _this.item.ruc.length === 11) {
                        await APP.rq.axios.get(APP.base + '/itinerarios/consulta-sunat' + APP.util.getQueryParamByObject({
                            rucContacto: _this.item.ruc
                        }), { timeout: 5000 })
                            .then(res => {
                                if (res.data.EsCorrecto) {
                                    _this.$nextTick(() => {
                                        if (_this.item.stReintegro !== 'X') {
                                            _this.item.razonSocial = res.data.Valor.RazonSocial;
                                        }
                                        _this.item.direccion = res.data.Valor.Direccion;
                                    });
                                }
                                else {
                                    if (res.data.Estado)
                                        APP.msg.warning(res.data.Mensaje);
                                    else
                                        APP.msg.error(res.data.Mensaje);
                                }
                            })
                            .catch(err => {
                                if (err.code === "ECONNABORTED")
                                    APP.msg.warning('No se pudo consultar a la SUNAT.');
                                else
                                    APP.rq.axios_handler_error_alert;
                            });

                        _this.$refs.refRERazSoc.focus();
                    } else _this.$refs.refRERuc.focus();
                },
                searchUser: async function () {
                    let _this = this;

                    if (_this.item.documento && _this.item.numero && appController.validateTipoDocumento(_this.item.documento, _this.item.numero, true)) {

                        await APP.rq.axios.get(APP.base + '/itinerarios/consultar-usuario' + APP.util.getQueryParamByObject({
                            tipoDoc: _this.item.documento,
                            numeroDoc: _this.item.numero
                        }), { timeout: 5000 })
                            .then(res => {
                                if (res.data.Estado) {

                                    if (res.data.Valor.IdCliente > 0) {
                                        //TODO: No se incluye Sexo y ValidadorClienteEspecial
                                        _this.item.idCliente = res.data.Valor.IdCliente;
                                        _this.item.nombre = res.data.Valor.NombreCliente;
                                        _this.item.apellidoPaterno = res.data.Valor.ApellidoPaterno;
                                        _this.item.apellidoMaterno = res.data.Valor.ApellidoMaterno;
                                        _this.item.fechaNac = res.data.Valor.FechaNacimiento;
                                        _this.item.edad = _this.calculaEdad();
                                        _this.item.telefono = res.data.Valor.Telefono;
                                        if (_this.item.stReintegro !== 'X') {
                                            _this.item.ruc = res.data.Valor.RucContacto;
                                            _this.item.razonSocial = res.data.Valor.RazonSocial;
                                            _this.item.direccion = res.data.Valor.Direccion;
                                        }
                                        _this.item.nacionalidad = (_this.item.documento === '01') ? 'PERUANA' : '';
                                        _this.updateUser = false;
                                    } else {
                                        _this.item.idCliente = 0;
                                        _this.item.nombre = res.data.Valor.NombreCliente || '';
                                        _this.item.apellidoPaterno = res.data.Valor.ApellidoPaterno || '';
                                        _this.item.apellidoMaterno = res.data.Valor.ApellidoMaterno || '';
                                        _this.item.fechaNac = '';
                                        _this.item.edad = '';
                                        _this.item.telefono = '';
                                        _this.item.nacionalidad = (_this.item.documento === '01') ? 'PERUANA' : '';
                                        _this.updateUser = true;
                                    }

                                    if (!res.data.EsCorrecto)
                                        APP.msg.warning(res.data.Mensaje);

                                    _this.$refs.refREApePat.focus();
                                }
                                else
                                    APP.msg.error(res.data.Mensaje);
                            })
                            .catch(err => {
                                if (err.code === "ECONNABORTED") {
                                    APP.msg.warning('No se pudo cargar los datos del pasajero.');
                                }
                                else
                                    APP.rq.axios_handler_error_alert;
                            });
                    } else _this.$refs.refRENumeroDoc.focus();
                },
                searchEmpresa: async function () {
                    var _this = this;

                    if (_this.item.ruc && _this.item.ruc.length === 11) {

                        await APP.rq.axios.get(APP.base + '/itinerarios/consultar-empresa' + APP.util.getQueryParamByObject({
                            rucContacto: _this.item.ruc
                        }), { timeout: 5000 })
                            .then(res => {
                                if (res.data.Estado) {

                                    _this.item.razonSocial = res.data.Valor.RazonSocial;
                                    _this.item.direccion = res.data.Valor.Direccion;

                                    if (!res.data.EsCorrecto)
                                        APP.msg.warning(res.data.Mensaje);
                                }
                                else
                                    APP.msg.error(res.data.Mensaje);

                                _this.$refs.refRERazSoc.focus();
                            })
                            .catch(err => {
                                if (err.code === "ECONNABORTED") {
                                    APP.msg.warning('No se pudo cargar los datos de la empresa.');
                                }
                                else
                                    APP.rq.axios_handler_error_alert;
                            });
                    } else {
                        if (_this.item.ruc.length > 0)
                            _this.$refs.refRERuc.focus();
                        else
                            _this.$refs.refRERazSoc.focus();
                    }
                },
                esc: function (event) {
                    if (event.keyCode === 27) {
                        this.close();
                    }
                },
                close: function () {
                    window.removeEventListener('keyup', this.esc);
                    $('#appVueReintegro').modal('hide');
                },
            },
            computed: {
                readOnlyCodiMotivo: function () {
                    let _this = this;
                    switch (_this.filtro.codMotivo) {
                        case '00001': return true;
                        case '00002': return false;
                        case '00005': return true;
                        case '00003': return true;
                        case '00004': return false;
                        default: return true;
                    }
                },
                filtroCodiEmpresa: {
                    get: function () {
                        if (this.list.empresas.length > 0 && this.list.empresas.find(x => x.id === this.filtro.codEmpresa)) {
                            return this.list.empresas.find(x => x.id === this.filtro.codEmpresa)
                        }
                    },
                    set: function (value) {
                        if (value !== '' && value !== null) {
                            if (this.list.empresas.find(x => x.id === value.id)) {
                                this.filtro.codEmpresa = value.id;
                                this.$refs.refRESerie.focus()
                            }
                        } else {
                            this.filtro.codEmpresa = '';
                        }

                        this.$nextTick(() => {
                            this.$refs.refREEmpresa.typeAheadPointer = this.$getSelectorVselect(this.list.empresas, value);
                        });
                    }
                },
                filtroCodiMotivo: {
                    get: function () {
                        if (this.list.motivos.length > 0 && this.list.motivos.find(x => x.id === this.filtro.codMotivo)) {
                            return this.list.motivos.find(x => x.id === this.filtro.codMotivo)
                        }
                    },
                    set: function (value) {
                        let _this = this;
                        if (value !== '' && value !== null) {
                            if (_this.list.motivos.find(x => x.id === value.id)) {
                                _this.filtro.codMotivo = value.id;

                                _this.$nextTick(() => {
                                    _this.$refs.refREVerificar.focus();
                                });
                            }
                        } else {
                            _this.filtro.codMotivo = '';
                        }

                        this.$nextTick(() => {
                            this.$refs.refREMotivo.typeAheadPointer = this.$getSelectorVselect(this.list.motivos, value);
                        });
                    }
                },
                filtroCodiOrigen: {
                    get: function () {
                        if (this.list.rutas.length > 0 && this.list.rutas.find(x => x.id === this.filtroProgramacion.CodiOrigen)) {
                            return this.list.rutas.find(x => x.id === this.filtroProgramacion.CodiOrigen)
                        }
                    },
                    set: function (value) {
                        if (value !== '' && value !== null) {
                            if (this.list.rutas.find(x => x.id === value.id)) {
                                this.filtroProgramacion.CodiOrigen = value.id;
                            }
                        } else {
                            this.filtroProgramacion.CodiOrigen = '';
                        }

                        this.$nextTick(() => {
                            this.$refs.refREOrigen.typeAheadPointer = this.$getSelectorVselect(this.list.rutas, value);
                        });
                    }
                },
                filtroCodiDestino: {
                    get: function () {
                        if (this.list.rutasAll.length > 0 && this.list.rutasAll.find(x => x.id === this.filtroProgramacion.CodiDestino)) {
                            return this.list.rutasAll.find(x => x.id === this.filtroProgramacion.CodiDestino)
                        }
                    },
                    set: function (value) {
                        if (value !== '' && value !== null) {
                            if (this.list.rutasAll.find(x => x.id === value.id)) {
                                this.filtroProgramacion.CodiDestino = value.id;
                                this.filtroProgramacion.NomDestino = value.label;
                            }
                        } else {
                            this.filtroProgramacion.CodiDestino = '';
                            this.filtroProgramacion.NomDestino = '';
                        }

                        this.$nextTick(() => {
                            this.$refs.refREDestino.typeAheadPointer = this.$getSelectorVselect(this.list.rutasAll, value);
                        });
                    }
                },
                filtroCodiServicio: {
                    get: function () {
                        if (this.list.servicios.length > 0 && this.list.servicios.find(x => x.id === this.filtroProgramacion.CodiServicio)) {
                            return this.list.servicios.find(x => x.id === this.filtroProgramacion.CodiServicio)
                        }
                    },
                    set: function (value) {
                        if (value !== '' && value !== null) {
                            if (this.list.servicios.find(x => x.id === value.id)) {
                                this.filtroProgramacion.CodiServicio = value.id;
                            }
                        } else {
                            this.filtroProgramacion.CodiServicio = '';
                        }

                        this.$nextTick(() => {
                            this.$refs.refREServicio.typeAheadPointer = this.$getSelectorVselect(this.list.servicios, value);
                        });
                    }
                },
                filtroTipoDoc: {
                    get: function () {
                        if (this.list.tiposDoc.length > 0 && this.list.tiposDoc.find(x => x.id === this.item.documento)) {
                            return this.list.tiposDoc.find(x => x.id === this.item.documento)
                        }
                    },
                    set: function (value) {
                        if (value !== '' && value !== null) {
                            if (this.list.tiposDoc.find(x => x.id === value.id)) {
                                this.item.documento = value.id;
                                this.validateDocumento = value;
                            }
                        } else {
                            this.item.documento = '';
                            this.validateDocumento = {};
                        }

                        this.$nextTick(() => {
                            this.$refs.refRETipoDoc.typeAheadPointer = this.$getSelectorVselect(this.list.tiposDoc, value);
                        });
                    }
                },
                filtroCodiNuevoDestino: {
                    get: function () {
                        if (this.list.destinosPas.length > 0 && this.list.destinosPas.find(x => x.id === this.filtroCambio.CodiNuevoDestino)) {
                            return this.list.rutas.find(x => x.id === this.filtroCambio.CodiNuevoDestino)
                        }
                    },
                    set: function (value) {
                        if (value !== '' && value !== null) {
                            if (this.list.rutas.find(x => x.id === value.id)) {
                                this.filtroCambio.CodiNuevoDestino = value.id;
                                this.consultaPrecioRuta(value.id);
                                //this.$refs.refRESerie.focus()
                            }
                        } else {
                            this.filtroCambio.CodiNuevoDestino = '';
                            this.filtroCambio.MontoReal = '';
                            this.filtroCambio.DiferenciaPrecio = '';
                        }

                        this.$nextTick(() => {
                            this.$refs.refREDestinoNew.typeAheadPointer = this.$getSelectorVselect(this.list.destinosPas, value);
                        });
                    }
                },
                filtrosFilled: function () {
                    let _this = this;
                    return _this.filtro.codEmpresa && _this.filtro.tipo && _this.filtro.serie && _this.filtro.numero && _this.filtro.codMotivo
                },
                dataFilled: function () {
                    let _this = this;
                    return (_this.item.origenPasj && _this.item.destinoPasj && _this.item.destinoBus &&
                        _this.item.servicio && _this.item.fechaVenta && _this.item.horaVenta &&
                        _this.item.boleto && _this.item.venta && _this.item.asiento && _this.item.precio);
                }
            },
            watch: {
                'item.ruc': function (newVal, oldVal) {
                    let _this = this;
                    //Seteo de Correlativo
                    if (newVal.length === 11) {
                        switch (appVueVenta.TipoTerminalElectronico) {
                            case 'M':
                                {
                                    if (appController.validatePanel('145') === '1') {
                                        this.item.boleto = _.cloneDeep(appVueVenta.CorrelativoCredito);
                                        if (this.item.boleto === '0000-00000000')
                                            APP.msg.error('No se encontró serie para el boleto.');
                                    }
                                    else {
                                        if (appVueVenta.CorrelativoVentaFactura === '0000-00000000')
                                            this.item.boleto = _.cloneDeep(appVueVenta.CorrelativoVentaBoleta);
                                        else
                                            this.item.boleto = _.cloneDeep(appVueVenta.CorrelativoVentaFactura);
                                    }
                                };
                                break;
                            case 'E':
                                {
                                    this.item.boleto = _.cloneDeep(appVueVenta.CorrelativoVentaFactura);

                                    if (this.item.boleto === 'F000-00000000')
                                        APP.msg.error('No se encontró serie para el boleto.');
                                };
                                break;
                        }
                    }
                    else {
                        if (newVal.length === 0)
                            this.item.boleto = _.cloneDeep(appVueVenta.CorrelativoVentaBoleta);
                    }

                    if (newVal != oldVal && oldVal) {
                    //if (_this.filtro.codMotivo == '00002' || _this.filtro.codMotivo == '00004') {
                        _this.$nextTick(() => {
                            if (_this.item.stReintegro !== 'X' && (oldVal !== _this.dataOriginal.RucCliente || newVal.length == 0)) {
                                _this.item.razonSocial = '';
                                _this.item.direccion = '';
                            }
                        });
                    }
                },
                'item.numero': function (newVal, oldVal) {
                    let _this = this;
                    if (newVal != oldVal && oldVal) {
                    //if (_this.filtro.codMotivo == '00002' || _this.filtro.codMotivo == '00004') {
                        _this.item.apellidoPaterno = '';
                        _this.item.apellidoMaterno = '';
                        _this.item.nombre = '';
                        _this.item.fechaNac = '';
                        _this.item.edad = '';
                        _this.item.telefono = '';
                        _this.item.nacionalidad = '';
                        _this.item.nacionalidad = (newVal === '01') ? 'PERUANA' : '';
                        if (_this.item.stReintegro !== 'X') {
                            _this.item.ruc = '';
                            _this.item.razonSocial = '';
                            _this.item.direccion = '';
                        }
                    }
                }
            }
        });

        var appVueMiniMapa = new Vue({
            el: '#appVueMiniMapa',
            data: {
                list: {
                    tempList: [],
                    plano5: [],
                    plano4: [],
                    plano3: [],
                    plano2: [],
                    plano1: [],
                    destinosPas: []
                },
                itemMemoria: {},
                asientoSel: {}
            },
            mounted: function () {
                let _this = this;

                var modal = $('#appVueMiniMapa');

                modal.modal({
                    'backdrop': 'static',
                    'keyboard': false,
                    'show': false
                });

                modal.on('shown.bs.modal', function () {
                    window.addEventListener('keyup', _this.esc);
                });
            },
            methods: {
                show: async function (_item) {
                    let _this = this;
                    _this.limpiarCampos();
                    _this.$nextTick(async () => {
                        await _this.searchData(_item);
                        $('#appVueMiniMapa').modal('show');
                    });
                },
                searchData: async function (_item) {
                    let _this = this;
                    var item = {};
                    item.CodiEmpresa = _item.CodiEmpresa;
                    item.CodiOrigen = _item.CodiOrigen;
                    item.CodiDestino = _item.CodiDestino;
                    item.CodiSucursal = _item.CodiSucursal;
                    item.CodiRuta = _item.CodiRuta;
                    item.CodiPuntoVenta = _item.CodiPuntoVenta;
                    item.CodiServicio = _item.CodiServicio;
                    item.HoraViaje = _item.HoraViaje;
                    item.FechaViaje = _item.FechaViaje;

                    await APP.rq.axios.post(APP.base + '/itinerarios/turnos', item)
                        .then(function (res) {
                            _this.list.destinosPas = _.cloneDeep(res.data.Valor.ListaAuxDestinosRuta);
                            _this.list.tempList = _.cloneDeep(res.data.Valor.ListaPlanoBus);
                            _this.list.plano5 = _this.list.tempList.filter(x => x.Indice === Math.ceil(x.Indice / 5) * 5);
                            _this.list.plano4 = _this.list.tempList.filter(x => x.Indice + 1 === Math.ceil(x.Indice / 5) * 5);
                            _this.list.plano3 = _this.list.tempList.filter(x => x.Indice + 2 === Math.ceil(x.Indice / 5) * 5);
                            _this.list.plano2 = _this.list.tempList.filter(x => x.Indice + 3 === Math.ceil(x.Indice / 5) * 5);
                            _this.list.plano1 = _this.list.tempList.filter(x => x.Indice + 4 === Math.ceil(x.Indice / 5) * 5);
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                setData: function (item) {
                    this.asientoSel = item;
                    this.close();
                },
                limpiarCampos: function () {
                    let _this = this;
                    _this.list.tempList = [];
                    _this.list.plano5 = [];
                    _this.list.plano4 = [];
                    _this.list.plano3 = [];
                    _this.list.plano2 = [];
                    _this.list.plano1 = [];
                    _this.list.destinosPas = [];
                    _this.asientoSel = {};
                },
                esc: function (event) {
                    if (event.keyCode === 27) {
                        this.close();
                    }
                },
                close: function () {
                    window.removeEventListener('keyup', this.esc);
                    $('#appVueMiniMapa').modal('hide');
                },
            },
            computed: {
            }
        });

        var appVueTipoPago2 = new Vue({
            el: '#appVueTipoPago2',
            data: {
                tipoPago2: '01',
                tarjeta2: null,
                numeroTarjeta2: '',
                distrito2: null,
                direccion2: '',
                observacion2: '',
                embarque2: null,
                arribo2: null,
                list: {
                    tiposPago2: [],
                    distritos2: [],
                    tarjetas2: [],
                    embarques2: [],
                    arribos2: [],
                },
                sumaTotal2: 0,
                efectivo2: '',
                tarjetaCant2: '',
                cantAsientos2: 0,
                importePagado2: '',
                vuelto2: '',
                processing2: false,
                disabledTipoPago2: false,
                showEmbarqueArribo: true,
                origin: 0,
                trustedSave: false
            },
            mounted: function () {
                this.getTipoPago2();
                this.getTarjetasCredito2();
                this.getCuidades2();
            },
            methods: {
                show: function (embarques, arribos, sumaTotal, cantidad, disabledTipoPago, showEmbarqueArribo, codeOrigin) {
                    this.limpiarCampos2();
                    this.list.embarques2 = (embarques !== null) ? embarques : [];
                    this.list.arribos2 = (arribos !== null) ? arribos : [];
                    this.sumaTotal2 = (sumaTotal !== null) ? sumaTotal: 0;
                    this.cantAsientos2 = (cantidad !== null) ? cantidad : 0;
                    this.disabledTipoPago2 = (disabledTipoPago !== null) ? disabledTipoPago : false;
                    this.showEmbarqueArribo = (showEmbarqueArribo !== null) ? disabledTipoPago : true;
                    this.origin = (codeOrigin !== null) ? codeOrigin : 0;
                    this.$nextTick(() => {
                        $('#appVueTipoPago2').modal('show');
                    });
                },
                getTipoPago2: function () {
                    var _this = this;
                    APP.rq.axios2.get(APP.base + '/base/get-tipoPago')
                        .then(res => {
                            if (res.data.Estado) {
                                var data = _.cloneDeep(res.data.Valor);
                                _this.list.tiposPago2 = data;
                                tiposPago = data;
                            } else APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                getTarjetasCredito2: function () {
                    var _this = this;
                    APP.rq.axios2.get(APP.base + '/base/get-tarjetasCredito')
                        .then(res => {
                            if (res.data.Estado) {
                                var data = _.cloneDeep(res.data.Valor);
                                _this.list.tarjetas2 = data;
                                tarjetas = data;
                            }
                            else APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                getCuidades2: function () {
                    var _this = this;
                    APP.rq.axios2.get(APP.base + '/base/get-cuidades')
                        .then(res => {
                            if (res.data.Estado) _this.list.distritos2 = _.cloneDeep(res.data.Valor);
                            else APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                saveVenta2: async function () {
                    if (!this.errors.any()) {
                        this.trustedSave = true;
                        this.close();
                    }
                },
                limpiarCampos2: function () {
                    let _this = this;
                    _this.tipoPago2 = '01';
                    _this.tarjeta2 = null;
                    _this.numeroTarjeta2 = '';
                    _this.distrito2 = null;
                    _this.direccion2 = '';
                    _this.observacion2 = '';
                    _this.embarque2 = null;
                    _this.arribo2 = null;
                    _this.sumaTotal2 = 0;
                    _this.efectivo2 = '';
                    _this.tarjetaCant2 = '';
                    _this.cantAsientos2 = 0;
                    _this.importePagado2 = '';
                    _this.vuelto2 = '';
                    _this.processing2 = false;
                    _this.disabledTipoPago2 = false;
                    _this.origin = 0;
                    _this.trustedSave = false;
                },
                recorridoSectionTipoPagos2: function (auxValidate) {
                    let _this = this;
                    switch (_this.origin) {
                        case 1: {
                            var auxResponse = false;

                            if (typeof auxValidate !== 'boolean')
                                auxValidate = false;

                            if (!_this.computedTipoPago2) {
                                $('#cboTipoPagoTP2 input[type=search]').focus();
                                if (auxValidate === true) APP.msg.warning('Seleccione un tipo de pago.');

                                return auxResponse;
                            }
                            else if (_this.tipoPago2 === '01') {
                                if (!_this.importePagado2) {
                                    document.getElementById('txtImportePagadoC2').focus();
                                    if (auxValidate === true) APP.msg.warning('Ingrese el importe pagado.');

                                    return auxResponse;
                                }
                                else if (parseFloat(_this.importePagado2) < parseFloat(_this.sumaTotal2)) {
                                    document.getElementById('txtImportePagadoC2').focus();

                                    return auxResponse;
                                }
                            }
                            else if (_this.tipoPago2 === '02') {
                                if (!_this.tarjeta2) {
                                    $('#cboTipoTarjetaTP2 input[type=search]').focus();
                                    if (auxValidate === true) APP.msg.warning('Seleccione un tipo de tarjeta.');

                                    return auxResponse;
                                }
                                else if (!_this.numeroTarjeta2) {
                                    document.getElementById('txtNumeroTP2').focus();
                                    if (auxValidate === true) APP.msg.warning('Ingrese número de tarjeta.');

                                    return auxResponse;
                                }
                                else if (_this.numeroTarjeta2.length !== 19) {
                                    document.getElementById('txtNumeroTP2').focus();

                                    return auxResponse;
                                }
                                else if (!_this.tarjetaCant2) {
                                    document.getElementById('txtTarjetaCantTP2').focus();
                                    if (auxValidate === true) APP.msg.warning('Ingrese el monto de tarjeta.');

                                    return auxResponse;
                                }
                                else if (parseFloat(_this.tarjetaCant2) > parseFloat(_this.sumaTotal2)) {
                                    document.getElementById('txtTarjetaCantTP2').focus();

                                    return auxResponse;
                                }
                                else if (!_this.efectivo2) {
                                    document.getElementById('txtEfectivoTP2').focus();
                                    if (auxValidate === true) APP.msg.warning('Ingrese el monto en efectivo.');

                                    return auxResponse;
                                }
                                else if (!_this.importePagado2) {
                                    document.getElementById('txtImportePagadoTP2').focus();
                                    if (auxValidate === true) APP.msg.warning('Ingrese el importe pagado.');

                                    return auxResponse;
                                }
                                else if (parseFloat(_this.importePagado2) < parseFloat(_this.efectivo2)) {
                                    document.getElementById('txtImportePagadoTP2').focus();

                                    return auxResponse;
                                }
                            }
                            else if (_this.tipoPago2 === '03') {
                                if (!_this.tarjeta2) {
                                    $('#cboTipoTP2 input[type=search]').focus();
                                    if (auxValidate === true) APP.msg.warning('Seleccione un tipo de tarjeta.');

                                    return auxResponse;
                                }
                                else if (!_this.numeroTarjeta2) {
                                    document.getElementById('txtNumeroTP2').focus();
                                    if (auxValidate === true) APP.msg.warning('Ingrese número de tarjeta.');

                                    return auxResponse;
                                }
                                else if (_this.numeroTarjeta2.length !== 19) {
                                    document.getElementById('txtNumeroTP').focus();

                                    return auxResponse;
                                }
                            }
                            else if (_this.tipoPago2 === '04') {
                                if (!_this.distrito2) {
                                    $('#cboDistritoTP2 input[type=search]').focus();
                                    if (auxValidate === true) APP.msg.warning('Seleccione un distrito.');

                                    return auxResponse;
                                }
                                else if (!_this.direccion2) {
                                    document.getElementById('txtDireccionTP2').focus();
                                    if (auxValidate === true) APP.msg.warning('Ingrese dirección.');

                                    return auxResponse;
                                }
                                else if (!_this.observacion2) {
                                    document.getElementById('txtObservTP2').focus();
                                    if (auxValidate === true) APP.msg.warning('Ingrese observación.');

                                    return auxResponse;
                                }
                            }

                            if (_this.showEmbarqueArribo && !_this.embarque) {
                                $('#cboEmbarqueTP2 input[type=search]').focus();
                                if (auxValidate === true) APP.msg.warning('Seleccione un embarque.');

                                return auxResponse;
                            }
                            else if (_this.showEmbarqueArribo && (!_this.arribo && auxValidate !== true)) {
                                $('#cboArriboTP2 input[type=search]').focus();
                                if (auxValidate === true) APP.msg.warning('Seleccione un arribo.');

                                return auxResponse;
                            }
                            else
                                auxResponse = true;

                            if (!_this.showEmbarqueArribo)
                                _this.$refs.refBtnAceptarTP2.focus();

                            return auxResponse;
                        }; break;
                        default: return true;
                    }
                },
                getLabelEmbarqueArribo2: function (option) {
                    return `${option.Lugar} - ${option.Hora}`
                },
                calcMontos2: function (tipo, e, _parteEntera) {
                    // Formato 'NumeroConDosDecimales'
                    switch (e.target.id) {
                        case 'txtImportePagadoC2':
                        case 'txtImportePagadoTP2':
                            this.importePagado2 = this.$formatNumberWithTwoDecimals(this.importePagado2, _parteEntera);
                            break;
                        case 'txtTarjetaCantTP2':
                            this.tarjetaCant2 = this.$formatNumberWithTwoDecimals(this.tarjetaCant2, _parteEntera);
                            break;
                        case 'txtEfectivoTP2':
                            this.efectivo = this.$formatNumberWithTwoDecimals(this.efectivo2, _parteEntera);
                            break;
                    }
                    // -----------------

                    var sumaTotal2 = parseFloat(this.sumaTotal2);
                    var efectivo2 = parseFloat(this.efectivo2);
                    var tarjetaCant2 = parseFloat(this.tarjetaCant2);
                    var importePagado2 = parseFloat(this.importePagado2);

                    if (tipo === 'IPC') {
                        if (importePagado2 >= sumaTotal2)
                            this.vuelto2 = parseFloat(importePagado2 - sumaTotal2).toFixed(2);
                        else
                            this.vuelto = '';
                    }
                    else if (tipo === 'T') {
                        if (sumaTotal2 >= tarjetaCant2)
                            this.efectivo2 = parseFloat(sumaTotal2 - tarjetaCant2).toFixed(2);
                        else
                            this.efectivo2 = '';

                        this.importePagado2 = '';
                        this.vuelto2 = '';
                    }
                    else if (tipo === 'E') {
                        if (sumaTotal2 >= efectivo)
                            this.tarjetaCant2 = parseFloat(sumaTotal2 - efectivo2).toFixed(2);
                        else
                            this.tarjetaCant2 = '';

                        this.importePagado2 = '';
                        this.vuelto2 = '';
                    }
                    else if (tipo === 'IP') {
                        if (importePagado2 >= efectivo2)
                            this.vuelto2 = parseFloat(importePagado2 - efectivo2).toFixed(2);
                        else
                            this.vuelto2 = '';
                    }
                },
                esc: function (event) {
                    if (event.keyCode === 27) this.close();
                },
                close: function () {
                    $('#appVueTipoPago2').modal('hide');
                }
            },
            computed: {
                computedTipoPago2: {
                    get: function () {
                        var auxTipoPago = this.list.tiposPago2.find(x => x.id === this.tipoPago2);
                        if (auxTipoPago)
                            return auxTipoPago;
                    },
                    set: function (value) {
                        let _this = this;
                        if (value) {
                            if (_this.list.tiposPago2.find(x => x.id === value.id))
                                _this.tipoPago2 = value.id;

                            //if (this.$getValuePickedBusVenta() !== '7' && this.$getValuePickedBusVenta() !== '1') {
                            //    this.efectivo2 = '';
                            //    this.tarjetaCant2 = '';
                            //    this.importePagado2 = '';
                            //    this.vuelto2 = '';
                            //}
                        }
                        else
                            _this.tipoPago2 = '';

                        _this.$nextTick(function () {
                            if (($("#appVueTipoPago2").data('bs.modal') || {}).isShown)
                                _this.recorridoSectionTipoPagos2();
                        });
                    }
                }
            },
            watch: {}
        });

        var appVueAnulaReintegro = new Vue({
            el: '#appVueAnulaReintegro',
            data: {
                list: {
                    empresas: []
                },
                filtro: {
                    codEmpresa: '',
                    serie: '',
                    numero: ''
                }
            },
            mounted: function () {
                let _this = this;

                var modal = $('#appVueAnulaReintegro');

                modal.modal({
                    'backdrop': 'static',
                    'keyboard': false,
                    'show': false
                });

                $('#appVueAnulaReintegro').on('shown.bs.modal', function () {
                    $(document).off('focusin.modal');

                    if (_this.filtro.codEmpresa && _this.filtro.serie && _this.filtro.numero)
                        _this.$refs.refANUREAceptar.focus();
                    else
                        _this.$refs.refANUREEmpresa.$el.querySelector('input').focus();
                });
            },
            methods: {
                show: function (item) {
                    this.limpiarCampos();
                    this.setData(item);
                    if (!this.list.empresas.length > 0)
                        this.list.empresas = empresas
                    this.$nextTick(() => {
                        $('#appVueAnulaReintegro').modal('show');
                    });
                },
                setData: function (_item) {
                    let _this = this;
                    _this.filtro.codEmpresa = (_item) ? _item.codEmpresa || '' : '';
                    _this.filtro.serie = (_item) ? _item.serie || '' : '';
                    _this.filtro.numero = (_item) ? _item.numero || '' : '';
                },
                getLabel: function (option) {
                    return `${option.id} - ${option.label}`
                },
                confirm: async function () {
                    let _this = this;

                    var data = null;

                    var auxTipo = (_this.filtro.serie.substring(0, 1) === '0') ? 'M' : _this.filtro.serie.substring(0, 1);

                    await APP.rq.axios2.get(APP.base + '/reintegro/verifica-reintegro-anular' + APP.util.getQueryParamByObject({
                        Serie: parseInt(_this.filtro.serie.substring(1, 4)),
                        Numero: parseInt(_this.filtro.numero),
                        CodiEmpresa: parseInt(_this.filtro.codEmpresa),
                        Tipo: auxTipo
                    }))
                        .then(async (res) => {
                            if (res.data.EsCorrecto)
                                data = _.cloneDeep(res.data.Valor);
                            else {
                                APP.msg.infoMessage(null, res.data.Mensaje);
                                return;
                            }
                        }).catch(APP.rq.axios_handler_error_alert);

                    await _this.validateToAnulRein(data);
                },
                validateToAnulRein: async function (data) {
                    let _this = this;

                    if (data && data.IdVenta) {
                        //Panel 226 'Activar opción de Mantenimiento de clave para Reimprimir'
                        if (appController.validatePanel('226') === '1') {

                            var checkClaveAutorizacion = false;

                            appController.showClaveAutorizacion(claveReintegroConfirmacion);

                            await deferredModal($('#appClaveAutorizacion'), true).done(function () {
                                appClaveAutorizacion.$nextTick(() => {
                                    appClaveAutorizacion.auditoria.TipoMovimiento = 'AUTORIZACION_RE_';
                                    appClaveAutorizacion.auditoria.Boleto = `${_.padStart(data.SerieBoleto, 3, '0')}-${_.padStart(data.NumeBoleto, 7, '0')}`;
                                });
                            });

                            await deferredModal($('#appClaveAutorizacion'), false).done(function () {
                                appClaveAutorizacion.$nextTick(() => {
                                    checkClaveAutorizacion = appClaveAutorizacion.trustedPassword;
                                });
                            });

                            if (!checkClaveAutorizacion) {
                                return;
                            }
                        } else {
                            //Panel 36 'Emitir Giros Terrestes'
                            if (appController.validatePanel('36') === '1') {

                                var checkClaveAutorizacion = false;

                                appController.showClaveAutorizacion(claveReintegro);

                                await deferredModal($('#appClaveAutorizacion'), true).done(function () {
                                    appClaveAutorizacion.$nextTick(() => {
                                        appClaveAutorizacion.idVenta = data.IdVenta;
                                    });
                                });

                                await deferredModal($('#appClaveAutorizacion'), false).done(function () {
                                    appClaveAutorizacion.$nextTick(() => {
                                        checkClaveAutorizacion = appClaveAutorizacion.trustedPassword;
                                    });
                                });

                                if (!checkClaveAutorizacion) {
                                    return;
                                }
                            }

                            //Panel 163 y Nivel Usuario 11
                            if (appController.validatePanel('163') === '1') {
                                if (Usuario.Nivel === 11) {
                                    APP.msg.warning("Solo los administradores pueden anular comprobantes");
                                    return;
                                }
                            }

                            //Panel 35 'Editar consignado en entrega de encomiendas'
                            if (appController.validatePanel('35') === '1') {

                                var checkClaveAutorizacion = false;

                                appController.showClaveAutorizacion(claveReintegro);

                                await deferredModal($('#appClaveAutorizacion'), true).done(function () {
                                    appClaveAutorizacion.$nextTick(() => {
                                        appClaveAutorizacion.idVenta = data.IdVenta;
                                    });
                                });

                                await deferredModal($('#appClaveAutorizacion'), false).done(function () {
                                    appClaveAutorizacion.$nextTick(() => {
                                        checkClaveAutorizacion = appClaveAutorizacion.trustedPassword;
                                    });
                                });

                                if (!checkClaveAutorizacion) {
                                    return;
                                }
                            }
                        }

                        //Mensaje de confirmación antes de enviar a anular
                        if (data && data.IdVenta) {
                            if (await APP.msg.confirm('Mensaje de confirmación', `¿Desea anular el reintegro ${data.Tipo}${_.padStart(data.SerieBoleto, 3, '0')}-${_.padStart(data.NumeBoleto, 8, '0')} con monto ${_this.$options.filters.money(data.PrecioVenta)}?`)) {
                                _this.anularReintegro(data);
                            } else return;
                        }
                    }

                },
                anularReintegro: async function (data) {
                    var _this = this;

                    var auxObjEmpresa = appController.findEmpresa(data.CodiEmpresa);

                    await APP.rq.axios2.post(APP.base + '/reintegro/reintegro-anular' + APP.util.getQueryParamByObject({
                        IdVenta: data.IdVenta,
                        CodiEsca: data.CodiEsca,
                        CodiDestinoPas: data.CodiDestino,
                        IngresoManualPasajes: IngresoManualPasajes,
                        CodiEmpresa: data.CodiEmpresa,
                        FechaVenta: data.FechaVenta,
                        SerieBoleto: data.SerieBoleto,
                        NumeBoleto: data.NumeBoleto,
                        Tipo: data.Tipo,
                        TipoPago: data.TipoPago,
                        PrecioVenta: data.PrecioVenta,

                        RucEmpresa: auxObjEmpresa.Ruc,
                        ElectronicoEmpresa: auxObjEmpresa.Electronico
                    }))
                        .then(async (res) => {
                            if (res.data.EsCorrecto) {
                                _this.close();
                                APP.msg.info('Se anuló correctamente');
                            }
                        }).catch(APP.rq.axios_handler_error_alert);
                },
                limpiarCampos: function () {
                    let _this = this;
                    _this.filtro.codEmpresa = '';
                    _this.filtro.serie = '';
                    _this.filtro.numero = '';
                },
                close: function () {
                    $('#appVueAnulaReintegro').modal('hide');
                }
            },
            computed: {
                filtroCodiEmpresa: {
                    get: function () {
                        if (this.list.empresas.length > 0 && this.list.empresas.find(x => x.id === this.filtro.codEmpresa)) {
                            return this.list.empresas.find(x => x.id === this.filtro.codEmpresa)
                        }
                    },
                    set: function (value) {
                        if (value !== '' && value !== null) {
                            if (this.list.empresas.find(x => x.id === value.id)) {
                                this.filtro.codEmpresa = value.id;
                                //this.$refs.refRESerie.focus()
                            }
                        } else {
                            this.filtro.codEmpresa = '';
                        }

                        this.$nextTick(() => {
                            this.$refs.refANUREEmpresa.typeAheadPointer = this.$getSelectorVselect(this.list.empresas, value);
                        });
                    }
                },
            },
            watch: {}
        });

        var appVuePaseLote = new Vue({
            el: '#appVuePaseLote',
            data: {
                filtroOrigen: {
                    CodiOrigen: '',
                    CodiDestino: '',
                    CodiServicio: '',
                    FechaViaje: moment().format('DD/MM/YYYY'),
                    Hora: moment().format('hh:mm A'),
                    TodosTurnos: false,
                    SoloProgramados: true,
                    NomDestino: ''
                },
                filtroDestino: {
                    CodiOrigen: '',
                    CodiDestino: '',
                    CodiServicio: '',
                    FechaViaje: moment().format('DD/MM/YYYY'),
                    Hora: moment().format('hh:mm A'),
                    TodosTurnos: false,
                    SoloProgramados: true,
                    NomDestino: ''
                },
                nuevaProgramacion: {
                    CodiEmpresa: '',
                    CodiSucursal: '',
                    CodiPuntoVenta: '',
                    CodiRuta: '',
                    CodiBus: '',
                    FechaProgramacion: '',
                    HoraProgramacion: '',
                    CodiServicio: '',
                    NroViaje: ''
                },
                list: {
                    empresas: [],//
                    rutas: [],
                    rutasAll: [],
                    servicios: [],
                    itinerarios1: [],
                    itinerarios2: [],
                    tempListOri: [],
                    plano5_Ori: [],
                    plano4_Ori: [],
                    plano3_Ori: [],
                    plano2_Ori: [],
                    plano1_Ori: [],
                    tempListDes: [],
                    plano5_Des: [],
                    plano4_Des: [],
                    plano3_Des: [],
                    plano2_Des: [],
                    plano1_Des: [],
                    newAsientos: [],
                    newAsientosManuales: []
                },
                paginate: ['items', 'items2'],
                rainEfect: false,
                processingLote: false,
                dragItem: {},
                objProgramacion: {},
                chargeCurrCell: false, //evitar multiples llamadas a auxSetTd
                auxFirstCurrCell1: true, //inicia en la primera celda
                auxFirstCurrCell2: true //inicia en la primera celda
            },
            mounted: function () {
                let _this = this;

                window.addEventListener('keydown', e => {
                    if (e.ctrlKey && e.keyCode == 118) {
                        _this.show();
                    }
                });

                $('#appVuePaseLote').on('shown.bs.modal', function () {
                    window.addEventListener('keyup', _this.esc);

                    $(document).off('focusin.modal');

                    if (!document.getElementById('CollapseOrigen').classList.contains("in")) {
                        _this.$refs.refCollapseOrigen.click();
                    }

                    if (!document.getElementById('CollapseDestino').classList.contains("in")) {
                        _this.$refs.refCollapseDestino.click();
                    }

                    _this.$nextTick(() => {
                        _this.$refs.refLOTEOrigen1.$el.querySelector('input').focus();
                    });
                });
            },
            methods: {
                show: async function () {
                    this.limpiarCampos();
                    this.limpiarBus(0);
                    this.setData();
                    this.$nextTick(() => {
                        appVueVenta.$nextTick(() => {
                            if (appVueVenta.showVentas)
                                $('#appVuePaseLote').modal('show');
                            else
                                APP.msg.infoMessage('Debe estar en un turno','Para poder acceder a esta opción debe ingresar a un turno');
                        });
                    });
                },
                setData: function () {
                    let _this = this;
                    _this.$nextTick(() => {

                        if (_this.list.empresas.length === 0) {
                            _this.list.empresas = empresas;
                        }

                        if (_this.list.rutas.length === 0) {
                            _this.list.rutas = _.cloneDeep(rutas);
                        }

                        if (_this.list.rutasAll.length === 0 || _this.list.rutasAll.length === 1) {
                            _this.list.rutasAll = _.cloneDeep(rutas);
                            _this.list.rutasAll.unshift(selectAll);
                        }

                        if (_this.list.servicios.length === 0 || _this.list.servicios.length === 1) {
                            _this.list.servicios = _.cloneDeep(servicios);
                            _this.list.servicios.unshift(selectAll);
                        }
                    });
                },
                getLabel: function (option) {
                    return `${option.id} - ${option.label}`
                },
                dbClickProgramacion: async function (item, auxMapa) {
                    let _this = this;

                    _this.limpiarBus(auxMapa);

                    // Valida 'ProgramacionCerrada'
                    if (item.ProgramacionCerrada !== '0') {

                        switch (item.ProgramacionCerrada) {
                            case '1':
                                APP.msg.warning('La ruta está bloqueada para esta fecha.');
                                break;
                            case '2':
                                APP.msg.warning('La ruta está bloqueada desde esta fecha hacia adelante.');
                                break;
                        }
                        return;
                    }

                    var FechaViaje = (auxMapa == 1) ? _this.filtroOrigen.FechaViaje : _this.filtroDestino.FechaViaje;
                    var Turno = (auxMapa == 1) ? _this.filtroOrigen.Hora : _this.filtroDestino.Hora;

                    // Valida 'FechaViaje'
                    if (moment(FechaViaje, 'DD/MM/YYYY').isBefore(moment(), 'days')) {
                        APP.msg.warning('La fecha de viaje debe ser igual o mayor a la fecha actual.');
                        return;
                    }

                    // Valida 'TurnoDisponible'
                    if (!IngresoManualPasajes) {
                        //validar hora de venta con hora de viajes
                        if (appController.validatePanel('54') === '1') {
                            var verificaTurnoDisponible = _this.verificaTurnoDisponible(FechaViaje, Turno);
                            if (!verificaTurnoDisponible) {
                                APP.msg.warning('La hora de viaje ya pasó, verificar.');
                                return;
                            }
                        }
                    }

                    //// Valida 'Manifiesto'
                    //var resValidaManifiestoProgramacion = await _this.validaManifiestoProgramacion();
                    //if (!resValidaManifiestoProgramacion) {
                    //    _this.disabledAsiento = false;
                    //    return;
                    //}

                    var input = {};
                    input.CodiEmpresa = item.CodiEmpresa;
                    input.CodiOrigen = item.CodiOrigen;
                    input.CodiDestino = item.CodiDestino;
                    input.CodiSucursal = item.CodiSucursal;
                    input.CodiRuta = item.CodiRuta;
                    input.CodiPuntoVenta = item.CodiPuntoVenta;
                    input.CodiServicio = item.CodiServicio;
                    input.HoraViaje = item.HoraPartida;
                    input.FechaViaje = item.FechaViaje;
                    input.CodiProgramacion = item.CodiProgramacion;

                    await APP.rq.axios.post(APP.base + '/itinerarios/turnos', input)
                        .then(res => {
                            _this.$nextTick(async () => {

                                // Valida 'Programación cerrada'
                                if (res.data.Valor.Activo === '1') {
                                    APP.msg.warning('La programación se encuentra cerrada.');
                                    return;
                                }

                                // Valida 'Manifiesto'
                                var CodiProgramacion = res.data.Valor.CodiProgramacion;
                                var CodiSucursal = res.data.Valor.CodiSucursal;

                                var resValidaManifiestoProgramacion = await _this.validaManifiestoProgramacion(CodiProgramacion, CodiSucursal);
                                if (resValidaManifiestoProgramacion) {
                                    APP.msg.warning('Manifiesto ya fue emitido.');
                                    return;
                                }

                                switch (auxMapa) {
                                    case 1: {
                                        //Se crea nuevaProgramacion por si se requiere crear una Programación
                                        _this.nuevaProgramacion.CodiEmpresa = res.data.Valor.CodiEmpresa;
                                        _this.nuevaProgramacion.CodiSucursal = res.data.Valor.CodiSucursal;
                                        _this.nuevaProgramacion.CodiPuntoVenta = res.data.Valor.CodiPuntoVenta;
                                        _this.nuevaProgramacion.CodiRuta = res.data.Valor.CodiRuta;
                                        _this.nuevaProgramacion.CodiBus = res.data.Valor.CodiBus;
                                        _this.nuevaProgramacion.FechaProgramacion = res.data.Valor.FechaProgramacion;
                                        _this.nuevaProgramacion.HoraProgramacion = res.data.Valor.HoraProgramacion;
                                        _this.nuevaProgramacion.CodiServicio = res.data.Valor.CodiServicio;
                                        _this.nuevaProgramacion.NroViaje = res.data.Valor.NroViaje;

                                        _this.list.tempListOri = _.cloneDeep(res.data.Valor.ListaPlanoBus);
                                        _this.list.plano5_Ori = _this.list.tempListOri.filter(x => x.Indice === Math.ceil(x.Indice / 5) * 5);
                                        _this.list.plano4_Ori = _this.list.tempListOri.filter(x => x.Indice + 1 === Math.ceil(x.Indice / 5) * 5);
                                        _this.list.plano3_Ori = _this.list.tempListOri.filter(x => x.Indice + 2 === Math.ceil(x.Indice / 5) * 5);
                                        _this.list.plano2_Ori = _this.list.tempListOri.filter(x => x.Indice + 3 === Math.ceil(x.Indice / 5) * 5);
                                        _this.list.plano1_Ori = _this.list.tempListOri.filter(x => x.Indice + 4 === Math.ceil(x.Indice / 5) * 5);
                                        _this.$refs.refCollapseOrigen.click();
                                        _this.$refs.refLOTEOrigen2.$el.querySelector('input').focus();
                                    }; break;
                                    case 2: {
                                        $('#appVuePaseLote').animate({ scrollTop: 100 }, 800);

                                        //Se llena objProgramacion para Bloquear/Desbloquear Asientos
                                        _this.objProgramacion.CodiProgramacion = _.cloneDeep(res.data.Valor.CodiProgramacion);
                                        _this.objProgramacion.CodiServicio = _.cloneDeep(res.data.Valor.CodiServicio);
                                        _this.objProgramacion.FechaProgramacion = _.cloneDeep(res.data.Valor.FechaProgramacion);
                                        _this.objProgramacion.HoraProgramacion = _.cloneDeep(res.data.Valor.HoraProgramacion);

                                        _this.objProgramacion.NroViaje = _.cloneDeep(res.data.Valor.NroViaje);
                                        _this.objProgramacion.CodiOrigen = _.cloneDeep(res.data.Valor.CodiOrigen);
                                        _this.objProgramacion.CodiDestino = _.cloneDeep(res.data.Valor.CodiDestino);

                                        _this.list.tempListDes = _.cloneDeep(res.data.Valor.ListaPlanoBus);
                                        _this.list.plano5_Des = _this.list.tempListDes.filter(x => x.Indice === Math.ceil(x.Indice / 5) * 5);
                                        _this.list.plano4_Des = _this.list.tempListDes.filter(x => x.Indice + 1 === Math.ceil(x.Indice / 5) * 5);
                                        _this.list.plano3_Des = _this.list.tempListDes.filter(x => x.Indice + 2 === Math.ceil(x.Indice / 5) * 5);
                                        _this.list.plano2_Des = _this.list.tempListDes.filter(x => x.Indice + 3 === Math.ceil(x.Indice / 5) * 5);
                                        _this.list.plano1_Des = _this.list.tempListDes.filter(x => x.Indice + 4 === Math.ceil(x.Indice / 5) * 5);
                                        _this.$refs.refCollapseDestino.click();

                                        _this.$nextTick(() => {
                                            _this.$refs.refBtnPrevisualizar.focus();
                                        });
                                    }; break;
                                }
                            });
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                validaManifiestoProgramacion: async function (_codiProgramacion, _codiSucursal) {
                    let _this = this;

                    var response = false;

                    await APP.rq.axios2.get(APP.base + '/paseLote/validar-manifiesto' + APP.util.getQueryParamByObject({
                        CodiProgramacion: _codiProgramacion,
                        CodiSucursal: _codiSucursal
                    }))
                        .then(res => {
                            response = _.cloneDeep(res.data.EsCorrecto);
                        })
                        .catch(APP.rq.axios_handler_error_alert);

                    return response;
                },
                verificaTurnoDisponible: function (Fecha, Hora) {

                    var auxResponse = false;

                    if (Fecha === moment().format('DD/MM/YYYY')) {
                        if (appController.validatePanel('14') === '1') {
                            var auxHours = parseInt(AddTimeTurno.substring(0, 2)) || 0;
                            var auxMinutes = parseInt(AddTimeTurno.substring(3, 5)) || 0;
                            var auxHoraResult = moment(Hora, 'hh:mmA').add(auxHours, 'hours').add(auxMinutes, 'minutes');

                            if (auxHoraResult.isSameOrAfter(moment(), 'minutes'))
                                auxResponse = true;
                        }
                        else {
                            if (moment(Hora, 'hh:mmA').isSameOrAfter(moment(), 'minutes'))
                                auxResponse = true;
                        }
                    }
                    else
                        auxResponse = true;

                    return auxResponse;
                },
                searchProgramacion: function (auxProg) {
                    let _this = this;
                    var filtroProg = (auxProg === 1) ? _this.filtroOrigen : _this.filtroDestino;
                    APP.rq.axios.post(APP.base + '/itinerarios/lista-itinerarios', filtroProg)
                        .then(res => {
                            if (res.data.Estado) {
                                var _data = _.cloneDeep(res.data.Valor);
                                _this.limpiarBus(auxProg);
                                _this.$nextTick(() => {
                                    if (auxProg === 1) {

                                        _this.list.itinerarios1 = _data;

                                        if (_this.list.itinerarios1.length > 0) {
                                            _this.$nextTick(() => {
                                                if (_this.$refs.paginator1 && _this.list.itinerarios1.length > 0) {
                                                    _this.$refs.paginator1.goToPage(1);
                                                    _this.setTd1();
                                                }
                                            });
                                        }
                                    } else {

                                        _this.list.itinerarios2 = _data;

                                        if (_this.list.itinerarios2.length > 0) {
                                            _this.$nextTick(() => {
                                                if (_this.$refs.paginator2 && _this.list.itinerarios2.length > 0) {
                                                    _this.$refs.paginator2.goToPage(1);
                                                    _this.setTd2();
                                                }
                                            });
                                        }
                                    }
                                });
                            }
                            else
                                APP.msg.error(res.data.Mensaje);

                            _this.processing = false;
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                //--------------------------------------
                setTd1: function () {
                    auxSetTd('tblProgramacionPLoteOri', this.sendRowOfTab1, this.stepsOfRow1, this.auxFirstCurrCell1);
                },
                sendRowOfTab1: async function (e) {
                    let _this = this;
                    if (!_this.chargeCurrCell) {
                        _this.chargeCurrCell = true;
                        var _index = parseInt(e.target.tabIndex / 19) + (_this.paginate.items.page * 5);
                        var _item = _this.list.itinerarios1[_index];
                        await _this.dbClickProgramacion(_item, 1);
                        _this.chargeCurrCell = false;
                    }
                },
                stepsOfRow1: function (_auxStep) {
                    let _this = this;
                    switch (_auxStep) {
                        case 1: {
                            if (_this.paginate.items.page > 0) {
                                _this.auxFirstCurrCell = false;
                                _this.$refs.paginator1.goToPage(_this.paginate.items.page);
                            }
                        }; break;
                        case 2: {
                            if (_this.paginate.items.page < parseInt((_this.list.itinerarios1.length - 1) / 5)) {
                                _this.auxFirstCurrCell = true;
                                _this.$refs.paginator1.goToPage(_this.paginate.items.page + 2);
                            }
                        }; break;
                    }
                },
                setTd2: function () {
                    auxSetTd('tblProgramacionPLoteDes', this.sendRowOfTab2, this.stepsOfRow2, this.auxFirstCurrCell2);
                },
                sendRowOfTab2: async function (e) {
                    let _this = this;
                    if (!_this.chargeCurrCell) {
                        _this.chargeCurrCell = true;
                        var _index = parseInt(e.target.tabIndex / 19) + (_this.paginate.items2.page * 5);
                        var _item = _this.list.itinerarios2[_index];
                        await _this.dbClickProgramacion(_item, 2);
                        _this.chargeCurrCell = false;
                    }
                },
                stepsOfRow2: function (_auxStep) {
                    let _this = this;
                    switch (_auxStep) {
                        case 1: {
                            if (_this.paginate.items2.page > 0) {
                                _this.auxFirstCurrCell = false;
                                _this.$refs.paginator2.goToPage(_this.paginate.items2.page);
                            }
                        }; break;
                        case 2: {
                            if (_this.paginate.items2.page < parseInt((_this.list.itinerarios2.length - 1) / 5)) {
                                _this.auxFirstCurrCell = true;
                                _this.$refs.paginator2.goToPage(_this.paginate.items2.page + 2);
                            }
                        }; break;
                    }
                },
                //--------------------------------------
                previsualizar: function () {
                    let _this = this;

                    if (!_this.processingLote) {

                        for (var e1 of _this.list.tempListOri) {
                            for (var e2 of _this.list.tempListDes) {
                                if (e1.NumeAsiento !== 0 && e1.IdVenta !== '') {
                                    if (e2.NumeAsiento === 0 && e1.NumeAsiento === parseInt(e2.Tipo)) {
                                        var numeAsiento = _.cloneDeep(e1.NumeAsiento)
                                        _this.list.newAsientos.push(numeAsiento);
                                        e1.IDS = numeAsiento;
                                        e2.NumeAsiento = numeAsiento;
                                        e2.IDS = numeAsiento;
                                    }
                                }
                            }
                        }

                        if (_this.list.newAsientos.length > 0) {
                            _this.rainEfect = true;
                            _this.$refs.refBtnProccesingLote.focus();
                        } else APP.msg.info('No se encontró coincidencias');



                    }
                },
                stopPrevisualizar: function () {
                    let _this = this;

                    _this.rainEfect = false;

                    for (var e1 of _this.list.tempListOri) {
                        if (e1.NumeAsiento !== 0) {
                            if (_this.list.newAsientos.includes(e1.NumeAsiento)) {
                                e1.IDS = 0;
                                //_.dropWhile(_this.list.newAsientos, e1.NumeAsiento);
                            }
                        }
                    }

                    if (!_this.processingLote) {

                        for (var e2 of _this.list.tempListDes) {
                            if (e2.NumeAsiento !== 0) {
                                if (_this.list.newAsientos.includes(e2.NumeAsiento)) {
                                    e2.NumeAsiento = 0;
                                    e2.IDS = 0;
                                    //_.dropWhile(_this.list.newAsientos, e2.NumeAsiento);
                                }
                            }
                        }
                    }
                },
                procesarEnLote: function () {
                    let _this = this;

                    if (_this.rainEfect) {

                        for (var e2 of _this.list.tempListDes) {
                            if (e2.NumeAsiento !== 0) {
                                if (_this.list.newAsientos.includes(e2.NumeAsiento)) {
                                    e2.NumeAsiento = 0;
                                    e2.IDS = 0;
                                }
                            }
                        }

                        _this.stopPrevisualizar();
                        _this.rainEfect = false;
                    }

                    var asientosBloqueados = [];

                    _this.$nextTick(async () => {

                        if (!_this.list.newAsientos.length > 0) {

                            for (var e1 of _this.list.tempListOri) {
                                for (var e2 of _this.list.tempListDes) {
                                    if (e1.NumeAsiento !== 0 && e1.IdVenta !== '') {
                                        if (e2.NumeAsiento === 0 && e1.NumeAsiento === parseInt(e2.Tipo)) {
                                            _this.list.newAsientos.push(_.cloneDeep(e1.NumeAsiento));
                                        }
                                    }
                                }
                            }
                        }

                        if (_this.list.newAsientos.length > 0) {

                            for (var e1 of _this.list.tempListOri) {
                                if (e1.NumeAsiento !== 0) {
                                    if (_this.list.newAsientos.includes(e1.NumeAsiento)) {
                                        e1.NumeAsiento = 0;
                                    }
                                }
                            }

                            for (var e2 of _this.list.tempListDes) {
                                for (var asiento of _this.list.newAsientos) {
                                    if (e2.NumeAsiento === 0 && parseInt(e2.Tipo) === asiento) {
                                        e2.NumeAsiento = asiento;
                                        asientosBloqueados.push(_.padStart(asiento, 2, '0'));
                                    }
                                }
                            }

                            _this.processingLote = true;

                            await _this.bloquearAsientoList(asientosBloqueados);

                            await APP.msg.infoMessage('Asientos Bloqueados', `Se bloqueó correctamente los asientos: ${asientosBloqueados.join(', ')}`)
                        } else APP.msg.info('No se encontró coincidencias');
                    });
                },
                restaurarLote: async function () {
                    let _this = this;

                    _this.processingLote = false;

                    for (var e2 of _this.list.tempListOri) {
                        for (var asiento of _this.list.newAsientos) {
                            if (e2.NumeAsiento === 0 && parseInt(e2.Tipo) === asiento) {
                                e2.NumeAsiento = asiento;
                            }
                        }
                    }

                    for (var e1 of _this.list.tempListDes) {
                        if (e1.NumeAsiento !== 0) {
                            if (_this.list.newAsientos.includes(e1.NumeAsiento)) {
                                e1.NumeAsiento = 0;
                            }
                        }
                    }


                    for (var e3 of _this.list.newAsientosManuales) {

                        for (var e1 of _this.list.tempListOri) {
                            if (e1.NumeAsiento === 0) {
                                if (e3.origen == parseInt(e1.Tipo)) {
                                    e1.NumeAsiento = e3.origen;
                                }
                            }
                        }

                        for (var e2 of _this.list.tempListDes) {
                            if (e2.NumeAsiento !== 0) {
                                if (e3.destino == e2.NumeAsiento) {
                                    e2.NumeAsiento = 0;
                                }
                            }
                        }
                    }

                    _this.list.newAsientos = [];
                    _this.list.newAsientosManuales = [];

                    await _this.desbloquearAsientoList();

                    APP.msg.info('Se desbloquearon los asientos');
                },
                bloquearAsientoList: async function (asientos) {
                    let _this = this;
                    var input = {};
                    input.CodiProgramacion = _this.objProgramacion.CodiProgramacion;
                    input.NroViaje = _this.objProgramacion.NroViaje;
                    input.CodiOrigen = _this.objProgramacion.CodiOrigen;
                    input.CodiDestino = _this.objProgramacion.CodiDestino;
                    input.NumeAsientos = asientos;
                    input.FechaProgramacion = _this.objProgramacion.FechaProgramacion;
                    input.Precio = 0;

                    await APP.rq.axios2.post(APP.base + '/paseLote/bloquearAsientoList', input)
                        .then(async function (res) {
                            //TODO: implementar
                        });
                },
                desbloquearAsientoList: async function () {
                    let _this = this;

                    await APP.rq.axios2.post(APP.base + '/paseLote/desbloquearAsientoList' + APP.util.getQueryParamByObject({ CodiProgramacion: _this.objProgramacion.CodiProgramacion}))
                        .then(async function (res) {
                            _this.list.newAsientos = [];
                            _this.list.newAsientosManuales = [];
                        });
                },
                OrigenDraggable: function (_item) {
                    if (_item && _item.NumeAsiento && !_item.IDS && _item.IdVenta)
                        return true
                    else
                        return false;
                },
                onDragstart: function (item) {
                    this.dragItem = _.cloneDeep(item);
                },
                onDrop: async function (event, item) {
                    let _this = this

                    event.stopPropagation();
                    event.preventDefault();

                    for (var e1 of _this.list.tempListOri) {
                        if (e1.NumeAsiento !== 0) {
                            if (e1.NumeAsiento === _this.dragItem.NumeAsiento) {
                                e1.NumeAsiento = 0;
                                break;
                            }
                        }
                    }

                    _this.list.newAsientosManuales.push({ origen: _this.dragItem.NumeAsiento, destino: parseInt(item.Tipo) });
                    item.NumeAsiento = parseInt(item.Tipo);

                    if ((_.findIndex(_this.list.tempListOri, (o) => { return o.NumeAsiento !== 0 && o.IdVenta !== ''; })) <= -1) {
                        _this.processingLote = true;
                    }

                    _this.dragItem = {};

                    var nuevoAsiento = parseInt(item.Tipo);

                    await _this.bloquearAsientoList(nuevoAsiento);

                    APP.msg.warning('Se bloqueó el asiento: ' + _.cloneDeep(_.padStart(nuevoAsiento, 2, '0')))
                },
                bloquearAsiento: async function (_asiento) {
                    //var input = {};
                    //input.CodiProgramacion = _this.filtro.CodiProgramacion;
                    //input.NroViaje = _this.filtro.NroViaje;
                    //input.CodiOrigen = _this.filtro.CodiSucursal.id;
                    //input.CodiDestino = _this.filtro.CodiDestinoPas.id;
                    //input.NumeAsiento = _asiento.Tipo;
                    //input.FechaProgramacion = _this.filtro.Fecha;
                    //input.Precio = _asiento.PrecioVenta;

                    //await APP.rq.axios2.post(APP.base + '/itinerarios/bloquearAsiento', input)
                    //    .then(async function (res) {
                    //        if (res.data.EsCorrecto) {

                    //            asientoSel.IDS = res.data.Valor;

                    //            //// callSignalR_BloquearAsiento
                    //            //callSignalR_BloquearAsiento(_this.filtro.NroViaje, _this.objTurno.FechaProgramacion, asientoSel.Tipo);
                    //        }
                    //        else {
                    //            if (res.data.Estado)
                    //                APP.msg.warning(res.data.Mensaje);
                    //            else
                    //                APP.msg.error(res.data.Mensaje);
                    //        }
                    //    })
                    //    .catch(APP.rq.axios_handler_error_alert);
                },
                crearProgramacion: async function () {
                    let _this = this;

                    // Validación de Plano de Origen
                    if (!_this.list.tempListOri.length > 0) {
                        APP.msg.infoMessage('Plano de origen no seleccionado', 'Debe seleccionar un plano de origen con el que se creará la nueva programación');
                        return;
                    }

                    //Validación de no tener asientos bloqueados
                    if (!(_this.list.newAsientos.length == 0 && _this.list.newAsientosManuales.length == 0)) {
                        if (_this.rainEfect) {
                            _this.stopPrevisualizar();
                        } else {
                            if (await APP.msg.confirm('Mensaje de Confirmación', 'Los asientos bloqueados se restaurarán. ¿Desea continuar?')) {
                                _this.restaurarLote();
                                APP.msg.info('Se desbloquearon los asientos');
                            } else return;
                        }
                    }

                    var input = {};
                    input.CodiEmpresa = _this.nuevaProgramacion.CodiEmpresa;
                    input.CodiSucursal = _this.nuevaProgramacion.CodiSucursal;
                    input.CodiPuntoVenta = _this.nuevaProgramacion.CodiPuntoVenta;
                    input.CodiRuta = _this.nuevaProgramacion.CodiRuta;
                    input.CodiBus = _this.nuevaProgramacion.CodiBus;
                    input.FechaProgramacion = _this.nuevaProgramacion.FechaProgramacion;
                    input.HoraProgramacion = _this.nuevaProgramacion.HoraProgramacion;
                    input.CodiServicio = _this.nuevaProgramacion.CodiServicio;
                    input.NroViaje = _this.nuevaProgramacion.NroViaje;

                    appController.showCrearProgramacion(input);

                    await deferredModal($('#appVueCrearProgramacion'), true).done(function () {
                        appVueCrearProgramacion.$nextTick(() => {
                            window.removeEventListener('keyup', _this.esc);
                        });
                    });

                    await deferredModal($('#appVueCrearProgramacion'), false).done(function () {
                        appVueCrearProgramacion.$nextTick(() => {
                            //if (appVueMiniMapa.asientoSel.Tipo) {
                            //    _this.filtroCambio.NumAsiento = appVueMiniMapa.asientoSel.Tipo;
                            //    _this.list.destinosPas = appVueMiniMapa.list.destinosPas;
                            //    _this.filtroCambio.Fecha = _this.filtroMiniMapa.FechaViaje;
                            //    _this.filtroCambio.Hora = _this.filtroMiniMapa.HoraViaje;
                            //    _this.filtroCambio.Nivel = appVueMiniMapa.asientoSel.Nivel;
                            //    _this.$nextTick(() => {
                            //        _this.$refs.refREDestinoNew.$el.querySelector('input').focus();
                            //    });
                            //} else _this.$refs.refREAsientoNew.focus();

                            window.addEventListener('keyup', _this.esc);
                        });
                    });
                },
                confirm: async function () {
                    let _this = this;

                    if (_this.list.newAsientos.length == 0 && _this.list.newAsientosManuales.length == 0) {
                        APP.msg.info('No ha realizado cambios en ningún plano');
                        return;
                    }

                    if (!(_this.list.tempListOri.length > 0 && _this.list.tempListDes.length > 0)) {
                        if (!_this.list.tempListOri.length > 0)
                            APP.msg.info('Ningún plano de Origen Seleccionado');
                        else
                            APP.msg.info('Ningún plano de Destino Seleccionado');
                        return;
                    }

                    if (_.findIndex(_this.list.tempListOri, (o) => { return o.NumeAsiento !== 0 && o.IdVenta !== ''; }) >= 0) {
                        if (await APP.msg.confirm(null, 'Existen asientos en el plano de Origen. ¿Desea continuar con la operación?')) {
                        } else return;
                    }

                    var asientoCambiados = [];

                    var input = {};
                    input.list = [];

                    for (var e of _this.list.newAsientos) {
                        for (var e1 of _this.list.tempListOri) {
                            if (parseInt(e1.Tipo) === e) {
                                var filtroProg = {};
                                filtroProg.CodiProgramacion = _this.objProgramacion.CodiProgramacion;
                                filtroProg.IdVenta = e1.IdVenta;
                                filtroProg.NumeAsiento = e;
                                filtroProg.CodiServicio = _this.objProgramacion.CodiServicio;
                                filtroProg.FechaViaje = _this.objProgramacion.FechaProgramacion;
                                filtroProg.HoraViaje = _this.objProgramacion.HoraProgramacion;
                                filtroProg.FlagVenta = e1.FlagVenta;
                                filtroProg.CodiEsca = e1.CodiEsca;
                                filtroProg.CodiEmpresa = e1.CodiEmpresa;
                                filtroProg.Boleto = e1.TipoBoleto + e1.Boleto;
                                filtroProg.Pasajero = `${e1.Nombres},${e1.ApellidoPaterno},${e1.ApellidoMaterno}`;
                                filtroProg.Ruta = e1.CodiDestino;
                                filtroProg.Origen = e1.CodiOrigen;

                                input.list.push(filtroProg);
                                asientoCambiados.push(_.padStart(e, 2, '0'));
                            }
                        }
                    }

                    for (var e of _this.list.newAsientosManuales) {
                        for (var e1 of _this.list.tempListOri) {
                            if (parseInt(e1.Tipo) === e.origen) {
                                var filtroProg = {};
                                filtroProg.CodiProgramacion = _this.objProgramacion.CodiProgramacion;
                                filtroProg.IdVenta = e1.IdVenta;
                                filtroProg.NumeAsiento = e.destino;
                                filtroProg.CodiServicio = _this.objProgramacion.CodiServicio;
                                filtroProg.FechaViaje = _this.objProgramacion.FechaProgramacion;
                                filtroProg.HoraViaje = _this.objProgramacion.HoraProgramacion;
                                filtroProg.FlagVenta = e1.FlagVenta;
                                filtroProg.CodiEsca = e1.CodiEsca;
                                filtroProg.CodiEmpresa = e1.CodiEmpresa;
                                filtroProg.Boleto = e1.TipoBoleto + e1.Boleto;
                                filtroProg.Pasajero = `${e1.Nombres},${e1.ApellidoPaterno},${e1.ApellidoMaterno}`;
                                filtroProg.Ruta = e1.CodiDestino;
                                filtroProg.Origen = e1.CodiOrigen;

                                input.list.push(filtroProg);
                                asientoCambiados.push(_.padStart(e.destino, 2, '0'));
                            }
                        }
                    }

                    await APP.rq.axios2.post(APP.base + '/paseLote/update-postergacion', input)
                        .then(async (res) => {
                            var asientosCorrectos = _.map(_.cloneDeep(res.data.Valor), 'NumeAsiento');

                            if (await APP.msg.successMessage('Asientos Cambiados', `Se cambió correctamente los asientos: ${asientosCorrectos.join(', ')}`)) {
                                if (JSON.stringify(asientosCorrectos) == JSON.stringify(asientoCambiados)) {

                                    _this.close();
                                } else {
                                    var asientosNoCorrectos = [];

                                    for (var e of asientoCambiados) {
                                        if (asientosCorrectos.indexOf(e) <= -1) {
                                            asientosNoCorrectos.push(e);
                                        }
                                    }

                                    if (await APP.msg.errorMessage('Asientos No Cambiados', `No se cambiaron los asientos: ${asientosNoCorrectos.join(', ')}`)) {
                                        _this.close();
                                    }
                                }
                            }

                            // Desbloquea Asientos
                            await _this.desbloquearAsientoList();
                            //_this.list.newAsientos = [];
                            //_this.list.newAsientosManuales = [];

                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                limpiarCampos: function () {
                    let _this = this;
                    _this.filtroOrigen.CodiOrigen = '';
                    _this.filtroOrigen.CodiDestino = '';
                    _this.filtroOrigen.CodiServicio = '';
                    _this.filtroOrigen.FechaViaje = moment().format('DD/MM/YYYY');
                    _this.filtroOrigen.Hora = moment().format('hh:mm A');
                    _this.filtroOrigen.NomDestino = '';
                    _this.filtroDestino.CodiOrigen = '';
                    _this.filtroDestino.CodiDestino = '';
                    _this.filtroDestino.CodiServicio = '';
                    _this.filtroDestino.FechaViaje = moment().format('DD/MM/YYYY');
                    _this.filtroDestino.Hora = moment().format('hh:mm A');
                    _this.filtroDestino.NomDestino = '';
                    _this.list.itinerarios1 = [];
                    _this.list.itinerarios2 = [];

                    _this.objProgramacion.CodiProgramacion = '';
                    _this.objProgramacion.CodiServicio = '';
                    _this.objProgramacion.FechaProgramacion = '';
                    _this.objProgramacion.HoraProgramacion = '';

                    _this.objProgramacion.NroViaje = '';
                    _this.objProgramacion.CodiOrigen = '';
                    _this.objProgramacion.CodiDestino = '';

                    _this.nuevaProgramacion.CodiEmpresa = '';
                    _this.nuevaProgramacion.CodiSucursal = '';
                    _this.nuevaProgramacion.CodiPuntoVenta = '';
                    _this.nuevaProgramacion.CodiRuta = '';
                    _this.nuevaProgramacion.CodiBus = '';
                    _this.nuevaProgramacion.FechaProgramacion = '';
                    _this.nuevaProgramacion.HoraProgramacion = '';
                    _this.nuevaProgramacion.CodiServicio = '';
                    _this.nuevaProgramacion.NroViaje = '';
                },
                limpiarBus: function (auxMapa) {
                    let _this = this;
                    switch (auxMapa) {
                        case 1: {
                            _this.list.tempListOri = [];
                            _this.list.plano5_Ori = [];
                            _this.list.plano4_Ori = [];
                            _this.list.plano3_Ori = [];
                            _this.list.plano2_Ori = [];
                            _this.list.plano1_Ori = [];

                            for (var e2 of _this.list.newAsientos) {
                                for (var e1 of _this.list.tempListDes) {
                                    if (e1.NumeAsiento !== 0) {
                                        if (parseInt(e1.Tipo) === e2) {
                                            e1.NumeAsiento = 0;
                                            e1.IDS = 0;
                                        }
                                    }
                                }
                            }

                            for (var e2 of _this.list.newAsientosManuales) {
                                for (var e1 of _this.list.tempListDes) {
                                    if (e1.NumeAsiento !== 0) {
                                        if (parseInt(e1.Tipo) === e2.destino) {
                                            e1.NumeAsiento = 0;
                                            e1.IDS = 0;
                                        }
                                    }
                                }
                            }
                        }; break;
                        case 2: {
                            _this.list.tempListDes = [];
                            _this.list.plano5_Des = [];
                            _this.list.plano4_Des = [];
                            _this.list.plano3_Des = [];
                            _this.list.plano2_Des = [];
                            _this.list.plano1_Des = [];

                            for (var e2 of _this.list.newAsientos) {
                                for (var e1 of _this.list.tempListOri) {
                                    if (e1.NumeAsiento === 0) {
                                        if (parseInt(e1.Tipo) === e2) {
                                            e1.NumeAsiento = e2;
                                            e1.IDS = 0;
                                        }
                                    }
                                }
                            }

                            for (var e2 of _this.list.newAsientosManuales) {
                                for (var e1 of _this.list.tempListOri) {
                                    if (e1.NumeAsiento === 0) {
                                        if (parseInt(e1.Tipo) === e2.origen) {
                                            e1.NumeAsiento = e2.origen;
                                            e1.IDS = 0;
                                        }
                                    }
                                }
                            }

                        }; break;
                        default:
                            _this.list.tempListOri = [];
                            _this.list.plano5_Ori = [];
                            _this.list.plano4_Ori = [];
                            _this.list.plano3_Ori = [];
                            _this.list.plano2_Ori = [];
                            _this.list.plano1_Ori = [];
                            _this.list.tempListDes = [];
                            _this.list.plano5_Des = [];
                            _this.list.plano4_Des = [];
                            _this.list.plano3_Des = [];
                            _this.list.plano2_Des = [];
                            _this.list.plano1_Des = [];
                    }

                    _this.$nextTick(async () => {
                        _this.rainEfect = false;
                        _this.processingLote = false;
                        if (_this.objProgramacion && _this.objProgramacion.CodiProgramacion) {
                            await _this.desbloquearAsientoList();
                        } else {
                            _this.list.newAsientos = [];
                            _this.list.newAsientosManuales = [];
                        }
                    });
                },
                esc: function (event) {
                    if (event.keyCode === 27) {
                        this.close();
                    }
                },
                close: function () {
                    $('#appVuePaseLote').modal('hide');
                    window.removeEventListener('keyup', this.esc);
                }
            },
            computed: {
                filtroCodiOrigen1: {
                    get: function () {
                        if (this.list.rutas.length > 0 && this.list.rutas.find(x => x.id === this.filtroOrigen.CodiOrigen)) {
                            return this.list.rutas.find(x => x.id === this.filtroOrigen.CodiOrigen)
                        }
                    },
                    set: function (value) {
                        if (value !== '' && value !== null) {
                            if (this.list.rutas.find(x => x.id === value.id)) {
                                this.filtroOrigen.CodiOrigen = value.id;
                            }
                        } else {
                            this.filtroOrigen.CodiOrigen = '';
                        }

                        this.$nextTick(() => {
                            this.$refs.refLOTEOrigen1.typeAheadPointer = this.$getSelectorVselect(this.list.rutas, value);
                        });
                    }
                },
                filtroCodiDestino1: {
                    get: function () {
                        if (this.list.rutasAll.length > 0 && this.list.rutasAll.find(x => x.id === this.filtroOrigen.CodiDestino)) {
                            return this.list.rutasAll.find(x => x.id === this.filtroOrigen.CodiDestino)
                        }
                    },
                    set: function (value) {
                        if (value !== '' && value !== null) {
                            if (this.list.rutasAll.find(x => x.id === value.id)) {
                                this.filtroOrigen.CodiDestino = value.id;
                                this.filtroOrigen.NomDestino = value.label;
                            }
                        } else {
                            this.filtroOrigen.CodiDestino = '';
                            this.filtroOrigen.NomDestino = '';
                        }

                        this.$nextTick(() => {
                            this.$refs.refLOTEDestino1.typeAheadPointer = this.$getSelectorVselect(this.list.rutasAll, value);
                        });
                    }
                },
                filtroCodiServicio1: {
                    get: function () {
                        if (this.list.servicios.length > 0 && this.list.servicios.find(x => x.id === this.filtroOrigen.CodiServicio)) {
                            return this.list.servicios.find(x => x.id === this.filtroOrigen.CodiServicio)
                        }
                    },
                    set: function (value) {
                        if (value !== '' && value !== null) {
                            if (this.list.servicios.find(x => x.id === value.id)) {
                                this.filtroOrigen.CodiServicio = value.id;
                            }
                        } else {
                            this.filtroOrigen.CodiServicio = '';
                        }

                        this.$nextTick(() => {
                            this.$refs.refLOTEServicio1.typeAheadPointer = this.$getSelectorVselect(this.list.servicios, value);
                        });
                    }
                },
                filtroCodiOrigen2: {
                    get: function () {
                        if (this.list.rutas.length > 0 && this.list.rutas.find(x => x.id === this.filtroDestino.CodiOrigen)) {
                            return this.list.rutas.find(x => x.id === this.filtroDestino.CodiOrigen)
                        }
                    },
                    set: function (value) {
                        if (value !== '' && value !== null) {
                            if (this.list.rutas.find(x => x.id === value.id)) {
                                this.filtroDestino.CodiOrigen = value.id;
                            }
                        } else {
                            this.filtroDestino.CodiOrigen = '';
                        }

                        this.$nextTick(() => {
                            this.$refs.refLOTEOrigen2.typeAheadPointer = this.$getSelectorVselect(this.list.rutas, value);
                        });
                    }
                },
                filtroCodiDestino2: {
                    get: function () {
                        if (this.list.rutasAll.length > 0 && this.list.rutasAll.find(x => x.id === this.filtroDestino.CodiDestino)) {
                            return this.list.rutasAll.find(x => x.id === this.filtroDestino.CodiDestino)
                        }
                    },
                    set: function (value) {
                        if (value !== '' && value !== null) {
                            if (this.list.rutasAll.find(x => x.id === value.id)) {
                                this.filtroDestino.CodiDestino = value.id;
                                this.filtroDestino.NomDestino = value.label;
                            }
                        } else {
                            this.filtroDestino.CodiDestino = '';
                            this.filtroDestino.NomDestino = '';
                        }

                        this.$nextTick(() => {
                            this.$refs.refLOTEDestino2.typeAheadPointer = this.$getSelectorVselect(this.list.rutasAll, value);
                        });
                    }
                },
                filtroCodiServicio2: {
                    get: function () {
                        if (this.list.servicios.length > 0 && this.list.servicios.find(x => x.id === this.filtroDestino.CodiServicio)) {
                            return this.list.servicios.find(x => x.id === this.filtroDestino.CodiServicio)
                        }
                    },
                    set: function (value) {
                        if (value !== '' && value !== null) {
                            if (this.list.servicios.find(x => x.id === value.id)) {
                                this.filtroDestino.CodiServicio = value.id;
                            }
                        } else {
                            this.filtroDestino.CodiServicio = '';
                        }

                        this.$nextTick(() => {
                            this.$refs.refLOTEServicio2.typeAheadPointer = this.$getSelectorVselect(this.list.servicios, value);
                        });
                    }
                },
            },
            watch: {}
        });

        var appVueCTipoPago = new Vue({
            el: '#appVueCTipoPago',
            data: {
                filtro: {
                    empresa: '',
                    codEmpresa: 0,
                    tipo: 'M',
                    serie: '',
                    numero: ''
                },
                item: {
                    idCliente: 0,
                    origenPasj: '',
                    destinoPasj: '',
                    destinoBus: '',
                    servicio: '',
                    fechaVenta: '',
                    horaViaje: '',
                    fechaViaje: '',
                    documento: '',
                    numero: '',
                    apellidoPaterno: '',
                    apellidoMaterno: '',
                    nombre: '',
                    edad: '',
                    telefono: '',
                    nacionalidad: '',
                    boleto: '',
                    venta: '',
                    ruc: '',
                    razonSocial: '',
                    direccion: '',
                    asiento: '',
                    precio: 0,
                    reintegro: '',
                    fechaNac: '',
                    tipoPago: '',
                    numeroTarjeta: '',
                    codiTarjeta: ''
                },
                list: {
                    empresas: [],
                    tiposPago: [],
                    tarjetas: []
                },
                dataOriginal: {},
                asientoSel: {}
            },
            mounted: function () {
                let _this = this;

                $('#appVueCTipoPago').on('shown.bs.modal', function () {
                    window.addEventListener('keyup', _this.esc);

                    $(document).off('focusin.modal');

                    _this.$nextTick(() => {
                        _this.$refs.refCTPNumero.focus();
                    });
                });
            },
            methods: {
                show: function (asientoSel) {
                    let _this = this;
                    _this.limpiarData();
                    _this.asientoSel = asientoSel;
                    $('#appVueCTipoPago').modal('show');
                    _this.setData();
                },
                setData: function () {
                    let _this = this;
                    _this.filtro.tipo = _this.asientoSel.TipoBoleto;
                    _this.filtro.serie = _this.asientoSel.Boleto.substring(0, 3);
                    _this.filtro.numero = '0' + _this.asientoSel.Boleto.substring(11, 4);
                    _this.filtro.codEmpresa = String(_this.asientoSel.CodiEmpresa);
                    _this.$nextTick(() => {
                        if (_this.list.empresas.length == 0) {
                            _this.list.empresas = empresas;
                        }

                        if (_this.list.tiposPago.length == 0) {
                            _this.list.tiposPago = _.filter(tiposPago, (o) => {return o.id === '01' || o.id === '03'});;
                        }

                        if (_this.list.tarjetas.length == 0) {
                            _this.list.tarjetas = tarjetas;
                        }
                    });
                },
                searchData: async function () {
                    let _this = this;

                    _this.limpiarData();

                    await APP.rq.axios2.post(APP.base + '/itinerarios/ventaConsultaF12' + APP.util.getQueryParamByObject({
                        Serie: parseInt(_this.filtro.serie),
                        Numero: parseInt(_this.filtro.numero),
                        CodiEmpresa: parseInt(_this.filtro.codEmpresa),
                        Tipo: _this.filtro.tipo
                    }))
                        .then(async (res) => {

                            var data = _.cloneDeep(res.data.Valor);

                            if (data) {
                                _this.dataOriginal = _.cloneDeep(data);
                                _this.item.origenPasj = data.CodiOrigen;
                                _this.item.destinoPasj = data.CodiDestino;
                                _this.item.destinoBus = data.CodiRuta;
                                _this.item.servicio = data.CodiServicio;
                                _this.item.fechaVenta = data.FechaVenta;
                                _this.item.fechaViaje = data.FechaViaje;
                                _this.item.horaViaje = data.HoraViaje;
                                _this.item.documento = data.TipoDocumento;
                                _this.item.numero = data.Dni;
                                _this.item.apellidoPaterno = data.SplitNombre[1];
                                _this.item.apellidoMaterno = data.SplitNombre[2];
                                _this.item.nombre = data.SplitNombre[0];
                                _this.item.edad = data.Edad;
                                _this.item.telefono = data.Telefono;
                                _this.item.nacionalidad = data.Nacionalidad;
                                _this.item.boleto = (_this.filtro.tipo === 'F') ? appVueVenta.CorrelativoVentaFactura : appVueVenta.CorrelativoVentaBoleta;
                                _this.item.venta = data.IdVenta;
                                _this.item.ruc = data.RucCliente;
                                _this.item.razonSocial = data.RazonSocial;
                                _this.item.direccion = data.Direccion;
                                _this.item.asiento = data.NumeAsiento;
                                _this.item.precio = data.PrecioVenta;
                                _this.item.fechaNac = data.FechaNac;
                                _this.item.tipoPago = data.TipoPago;
                                _this.item.codiTarjeta = data.CodiTarjetaCredito;
                                _this.item.numeroTarjeta = data.NumeTarjetaCredito;
                            } else APP.msg.warning('No se encontró resultados');
                        })
                        .catch(APP.rq.axios_handler_error_alert);

                    _this.$refs.refCTPTipoPago.$el.querySelector('input').focus();
                },
                limpiarData: function () {
                    let _this = this;
                    _this.asientoSel = {};
                    _this.dataOriginal = {};
                    _this.item.origenPasj = '';
                    _this.item.destinoPasj = '';
                    _this.item.destinoBus = '';
                    _this.item.servicio = '';
                    _this.item.fechaVenta = '';
                    _this.item.horaViaje = '';
                    _this.item.fechaViaje = '';
                    _this.item.idCliente = 0
                    _this.item.documento = '';
                    _this.item.numero = '';
                    _this.item.apellidoPaterno = '';
                    _this.item.apellidoMaterno = '';
                    _this.item.nombre = '';
                    _this.item.edad = '';
                    _this.item.telefono = '';
                    _this.item.nacionalidad = '';
                    _this.item.boleto = '';
                    _this.item.venta = '';
                    _this.item.ruc = '';
                    _this.item.razonSocial = '';
                    _this.item.direccion = '';
                    _this.item.asiento = '';
                    _this.item.precio = '';
                    _this.item.tipoPago = '';
                    _this.item.numeroTarjeta = '';
                    _this.item.codiTarjeta = '';
                },
                getLabel: function (option) {
                    return `${option.id} - ${option.label}`
                },
                nextStep: function (_index) {
                    let _this = this;

                    _this.$nextTick(() => {
                        switch (_index) {
                            case 0: {
                                if (_this.item.tipoPago === '03')
                                    _this.$refs.refCTPTipoTarjeta.$el.querySelector('input').focus();
                                else
                                    _this.$refs.refCTPGuardar.focus();
                            }; break;
                            case 1: {
                                _this.$refs.refCTPNumeroTarjeta.focus();
                            }; break;
                            case 2: {
                                if (_this.item.numeroTarjeta.length === 19)
                                    _this.$refs.refCTPGuardar.focus();
                            }; break;
                        }
                    });
                },
                confirm: async function () {
                    let _this = this;

                    if (await APP.msg.confirm('Mensaje de Confirmación', '¿Esta seguro(a) de realizar los cambios?')) {

                        if (_this.item.tipoPago === '01' && _this.dataOriginal.TipoPago === '01') {
                            APP.msg.warning('Ningún cambio realizado');
                        } else {
                            var input = {};
                            input.IdVenta = _this.dataOriginal.IdVenta;
                            input.NewTipoPago = _this.item.tipoPago;
                            input.OldTipoPago = _this.dataOriginal.TipoPago;
                            input.NomNewTipoPago = _this.$options.filters.tipoPago(_this.item.tipoPago);
                            input.CodiEmpresa = _this.filtro.codEmpresa;
                            input.CodiTarjetaCredito = _this.item.codiTarjeta;
                            input.NumeTarjetaCredito = _this.item.numeroTarjeta;
                            input.NomTarjetaCredito = (_this.item.tipoPago === '03') ? _this.list.tarjetas.find(x => x.id === _this.item.codiTarjeta).label : '';
                            input.Nombre = _this.dataOriginal.Nombre;
                            input.Tipo = _this.dataOriginal.Tipo;
                            input.Serie = _this.dataOriginal.SerieBoleto;
                            input.Numero = _this.dataOriginal.NumeBoleto;
                            input.PrecioVenta = _this.dataOriginal.PrecioVenta;
                            input.CodiDestino = _this.dataOriginal.CodiDestino;
                            input.FechaViaje = _this.dataOriginal.FechaViaje;
                            input.HoraViaje = _this.dataOriginal.HoraViaje;
                            input.NumeAsiento = _this.dataOriginal.NumeAsiento;
                            input.NombDestino = _this.$options.filters.rutas(_this.dataOriginal.CodiDestino);

                            await APP.rq.axios.post(APP.base + '/cTipoPago/change-tipo-pago', input)
                                .then(async function (res) {
                                    if (res.data.Estado) {
                                        if (res.data.Valor)
                                            APP.msg.infoMessage('Vale generado', 'Se generó el vale: ' + res.data.Valor);
                                        APP.msg.info('Se cambió Tipo de Pago correctamente');
                                        _this.close();
                                    }
                                })
                                .catch(APP.rq.axios_handler_error_alert);
                        }
                    }
                },
                esc: function (event) {
                    if (event.keyCode === 27) {
                        this.close();
                    }
                },
                close: function () {
                    window.removeEventListener('keyup', this.esc);
                    $('#appVueCTipoPago').modal('hide');
                },
            },
            computed: {
                filtroCodiEmpresa: {
                    get: function () {
                        if (this.list.empresas.length > 0 && this.list.empresas.find(x => x.id === this.filtro.codEmpresa)) {
                            return this.list.empresas.find(x => x.id === this.filtro.codEmpresa)
                        }
                    },
                    set: function (value) {
                        if (value !== '' && value !== null) {
                            if (this.list.empresas.find(x => x.id === value.id)) {
                                this.filtro.codEmpresa = value.id;
                                this.$refs.refCTPSerie.focus()
                            }
                        } else {
                            this.filtro.codEmpresa = '';
                        }

                        this.$nextTick(() => {
                            this.$refs.refCTPEmpresa.typeAheadPointer = this.$getSelectorVselect(this.list.empresas, value);
                        });
                    }
                },
                computedTipoPago: {
                    get: function () {
                        if (this.list.tiposPago.length > 0 && this.list.tiposPago.find(x => x.id === this.item.tipoPago)) {
                            return this.list.tiposPago.find(x => x.id === this.item.tipoPago)
                        }
                    },
                    set: function (value) {
                        if (value !== '' && value !== null) {
                            if (this.list.tiposPago.find(x => x.id === value.id)) {
                                this.item.tipoPago = value.id;
                            }
                        } else {
                            this.item.tipoPago = '';
                        }

                        this.$nextTick(() => {
                            this.$refs.refCTPTipoPago.typeAheadPointer = this.$getSelectorVselect(this.list.tiposPago, value);
                        });
                    }
                },
                computedTarjetas: {
                    get: function () {
                        if (this.list.tarjetas.length > 0 && this.list.tarjetas.find(x => x.id === this.item.codiTarjeta)) {
                            return this.list.tarjetas.find(x => x.id === this.item.codiTarjeta)
                        }
                    },
                    set: function (value) {
                        if (value !== '' && value !== null) {
                            if (this.list.tarjetas.find(x => x.id === value.id)) {
                                this.item.codiTarjeta = value.id;
                            }
                        } else {
                            this.item.codiTarjeta = '';
                        }

                        this.$nextTick(() => {
                            this.$refs.refCTPTipoTarjeta.typeAheadPointer = this.$getSelectorVselect(this.list.tarjetas, value);
                        });
                    }
                },
                dataToSave: function () {
                    let _this = this;
                    if (_this.item.tipoPago) {
                        if (_this.item.tipoPago === '01') {
                            return true;
                        } else if (_this.item.tipoPago === '03') {
                            if (_this.item.codiTarjeta && _this.item.numeroTarjeta && _this.item.numeroTarjeta.length == 19)
                                return true;
                            else return false;
                        }
                    } else return false;
                }
            },
            watch: {
            }
        });

        var appVueCrearProgramacion = new Vue({
            el: '#appVueCrearProgramacion',
            data: {
                filtro: {},
                list: {
                    empresas: [],
                    rutas: [],
                    servicios: []
                }
            },
            mounted: function () {
                let _this = this;

                $('#appVueCrearProgramacion').on('shown.bs.modal', function () {
                    window.addEventListener('keyup', _this.esc);

                    $(document).off('focusin.modal');

                    _this.$nextTick(() => {
                        _this.$refs.refCPHoraProg.focus();
                    });
                });
            },
            methods: {
                show: function (_filtro) {
                    let _this = this;
                    _this.limpiarData();
                    _this.filtro = _filtro;
                    $('#appVueCrearProgramacion').modal('show');
                    _this.setData();
                },
                setData: function () {
                },
                getLabel: function (option) {
                    return `${option.id} - ${option.label}`
                },
                save: async function () {
                    let _this = this;

                    //Validación si no tiene hora de programación
                    if (!_this.filtro.HoraProgramacion) {
                        APP.msg.warning('Debe seleccionar una hora');
                        _this.$refs.refCPHoraProg.focus();
                        return;
                    }
                    
                    //await APP.rq.axios.post(APP.base + '/paseLote/crearProgramacion', _this.filtro)
                    //    .then(async function (res) {
                    //        if (res.data.Estado) {
                    //            APP.msg.info('Se creó la Programación correctamente');
                    //            _this.close();
                    //        }
                    //    })
                    //    .catch(APP.rq.axios_handler_error_alert);
                },
                limpiarData: function () {
                    let _this = this;
                    _this.filtro = {};
                },
                esc: function (event) {
                    if (event.keyCode === 27) {
                        this.close();
                    }
                },
                close: function () {
                    window.removeEventListener('keyup', this.esc);
                    $('#appVueCrearProgramacion').modal('hide');
                },
            },
            computed: {},
            watch: {}
        });

        var appVueNotaCredito = new Vue({
            el: "#appVueNotaCredito",
            data: {
                filtro: {
                    empresa: null,
                    rdbPasEnc: 'P',
                    chbDocumentoElec: false,
                    tipoDocumento: null,
                    cliente: null,
                    clienteId: '',
                    clienteLabel: '',
                    fechaInicial: '',
                    fechaFinal: '',
                    tipoNumDoc: null,
                    serieNumDoc: '',
                    numeroNumDoc: '',
                    rdbManEle: 'M',
                    concepto: null,
                    notaCredito: '',
                    fechaEmision: '',
                    importe: ''
                },
                list: {
                    empresas: [],
                    tiposDocumentos: [],
                    clientes: [],
                    tiposNumDoc: [
                        { 'id': 'B', 'label': 'B' },
                        { 'id': 'F', 'label': 'F' },
                        { 'id': 'M', 'label': 'M' }
                    ],
                    conceptos: [],
                    documentosEmitidos: [],
                    documentosSeleccionados: []
                },
                mask: {
                    tipoDocumento: ''
                }
            },
            mounted: function () { },
            methods: {
                show: function () {
                    $('#appVueNotaCredito').modal('show');
                },
                cargarChbDocumentoElec: function (_CodiEmpresa) {
                    var _this = this;

                    APP.rq.axios2.post(APP.base + '/notaCredito/consultaTipoTerminalElectronico', {
                        CodiEmpresa: _CodiEmpresa
                    })
                        .then(res => {
                            if (res.data.Estado)
                                _this.filtro.chbDocumentoElec = (res.data.Valor === 'E' ? true : false);
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                listaClientesNC_Autocomplete: async function (search, loading) {
                    var _this = this;

                    // Validaciones
                    switch (_this.filtro.tipoDocumento.id) {
                        case '77':
                            {
                                if (!isNaN(search) && search.length > 11)
                                    return;
                                if (isNaN(search) && search.length > 100)
                                    return;
                            };
                            break;
                        default:
                            {
                                var validateTipoDocumento = appController.validateTipoDocumento(_this.filtro.tipoDocumento.id, _this.filtro.clienteId, true);
                                if (!validateTipoDocumento)
                                    return;
                            };
                            break;
                    }
                    // ------------

                    if (loading)
                        loading(true);

                    await APP.rq.axios2.post(APP.base + '/notaCredito/listaClientesNC_Autocomplete', {
                        TipoDocumento: _this.filtro.tipoDocumento.id,
                        Value: search
                    })
                        .then(res => {
                            if (res.data.Estado) {
                                if (loading)
                                    loading(false);

                                if (_this.filtro.tipoDocumento.id === '77')
                                    _this.list.clientes = res.data.Valor;
                                else {
                                    if (res.data.Valor.length > 0)
                                        _this.filtro.clienteLabel = res.data.Valor[0].label;
                                }

                                if (!res.data.EsCorrecto)
                                    APP.msg.warning(res.data.Mensaje);
                            }
                            else
                                APP.msg.error(res.data.Mensaje);
                        })
                        .catch(APP.rq.axios_handler_error_alert);
                },
                cerrarNotaCredito: function () {
                    $('#appVueNotaCredito').modal('hide');
                },
                esc: function (event) {
                    if (event.keyCode === 27)
                        this.cerrarNotaCredito();
                },
                limpiarNotaCredito: function () {
                    this.filtro.empresa = null;
                    this.filtro.rdbPasEnc = 'P';
                    this.filtro.chbDocumentoElec = false;
                    this.filtro.tipoDocumento = null;
                    this.filtro.cliente = null;
                    this.filtro.clienteId = '';
                    this.filtro.clienteLabel = '';
                    this.filtro.fechaInicial = '';
                    this.filtro.fechaFinal = '';
                    this.filtro.tipoNumDoc = null;
                    this.filtro.serieNumDoc = '';
                    this.filtro.numeroNumDoc = '';
                    this.filtro.rdbManEle = 'M';
                    this.filtro.concepto = null;
                    this.filtro.notaCredito = '';
                    this.filtro.fechaEmision = '';
                    this.filtro.importe = '';
                },
                recorrerNotaCredito: function (auxValidate) {
                    var _this = this;
                    var auxResponse = false;

                    _this.$nextTick(() => {

                        if (!_this.filtro.empresa) {
                            $('#cboEmpresaNC input[type=search]').focus();
                            if (auxValidate === true) APP.msg.warning('Seleccione una empresa.');
                        }
                        else if (!_this.filtro.tipoDocumento) {
                            $('#cboTipoDocumentoNC input[type=search]').focus();
                            if (auxValidate === true) APP.msg.warning('Seleccione un tipo de documento.');
                        }
                        else if (_this.filtro.tipoDocumento.id === '77' && !_this.filtro.cliente) {
                            $('#cboClienteNC input[type=search]').focus();
                            if (auxValidate === true) APP.msg.warning('Ingrese ' + _this.filtro.tipoDocumento.label + '.');
                        }
                        else if (_this.filtro.tipoDocumento.id != '77' && !_this.filtro.clienteId && !_this.filtro.clienteLabel) {
                            document.getElementById('txtClienteIdNC').focus();
                            if (auxValidate === true) APP.msg.warning('Ingrese ' + _this.filtro.tipoDocumento.label + '.');
                        }
                        else if (!_this.filtro.fechaInicial) {
                            document.getElementById('txtFechaInicialNC').focus();
                            if (auxValidate === true) APP.msg.warning('Ingrese fecha inicial.');
                        }
                        else if (!_this.filtro.fechaFinal) {
                            document.getElementById('txtFechaFinalNC').focus();
                            if (auxValidate === true) APP.msg.warning('Ingrese fecha final.');
                        }
                        else if (!_this.filtro.tipoNumDoc) {
                            $('#cboTipoNumDocNC input[type=search]').focus();
                            if (auxValidate === true) APP.msg.warning('Seleccione un tipo de número documento.');
                        }
                        else {
                            document.getElementById('btnBuscarNC').focus();
                            auxResponse = true;
                        }

                        return auxResponse;
                    });
                },
                recorridoVselectTipoDocumento: function () {
                    var _this = this;

                    _this.$nextTick(function () {
                        if (_this.filtro.tipoDocumento.id === '77')
                            $('#cboClienteNC input[type=search]').focus();
                        else
                            document.getElementById('txtClienteIdNC').focus();
                    });
                },
                recorridoTxtClienteIdNC: async function () {
                    await this.listaClientesNC_Autocomplete(this.filtro.clienteId, false);

                    if (this.filtro.clienteLabel)
                        this.recorrerNotaCredito();
                },
                recorridoTxtFechaInicial: function () {
                    this.filtro.fechaInicial = this.$getValueDateTimePicker(event);

                    if (this.filtro.fechaFinal) {
                        if (moment(this.filtro.fechaInicial, 'DD/MM/YYYY').isAfter(moment(this.filtro.fechaFinal, 'DD/MM/YYYY'))) {
                            APP.msg.warning('La fecha inicial debe ser menor o igual a la fecha final.');
                            return false;
                        }
                    }

                    this.recorrerNotaCredito();
                },
                recorridoTxtFechaFinal: function () {
                    this.filtro.fechaFinal = this.$getValueDateTimePicker(event);

                    if (this.filtro.fechaInicial) {
                        if (moment(this.filtro.fechaInicial, 'DD/MM/YYYY').isAfter(moment(this.filtro.fechaFinal, 'DD/MM/YYYY'))) {
                            APP.msg.warning('La fecha final debe ser igual o mayor a la fecha inicial.');
                            return false;
                        }
                    }

                    this.recorrerNotaCredito();
                },
                getLabel: function (option) {
                    return `${option.id} - ${option.label}`
                }
            },
            computed: {},
            watch: {
                'filtro.empresa': function (newVal, oldVal) {
                    if (newVal)
                        this.cargarChbDocumentoElec(newVal.id);
                },
                'filtro.tipoDocumento': function (newVal, oldVal) {
                    if (newVal) {
                        this.mask.tipoDocumento = (newVal.TipoDatoDocumento).repeat(newVal.MaxLonDocumento);

                        if (this.filtro.tipoDocumento.id === '77')
                            this.filtro.cliente = null;
                        else {
                            this.filtro.clienteId = '';
                            this.filtro.clienteLabel = '';
                        }
                    }
                },
                'filtro.clienteId': function (newVal, oldVal) {
                    if (newVal)
                        this.filtro.clienteLabel = '';
                }
            }
        });

    </script>
}
